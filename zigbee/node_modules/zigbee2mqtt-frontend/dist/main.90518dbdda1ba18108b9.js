"use strict";
(self["webpackChunkzigbee2mqtt_frontend"] = self["webpackChunkzigbee2mqtt_frontend"] || []).push([[179],{

/***/ 7225:
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {


;// CONCATENATED MODULE: ./src/styles/styles.global.scss
// extracted by mini-css-extract-plugin

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(7294);
;// CONCATENATED MODULE: ./src/components/map/map.css
// extracted by mini-css-extract-plugin
/* harmony default export */ const map = ({"container":"tcVoQd7lsth_Nm1tGZt6","img":"_nHMOnRtjo1O5WcM5Rfm","node":"_66Jl0YOy5TVYGn0cWKR","link":"nUWwkcvC966phUVZbUuQ","linkLabel":"wTEx_ByGjbYdQetAV8WW","links":"mNuzk_GbBpaUd08NFAxs","nodes":"fMBbAJoZ17AC2x1RqxVi","EndDevice":"j6JhGFL8PRJ_ItS85MZu","Coordinator":"WfRvr6031db9ACNpi_lN","Router":"_RdLkq0wDiiKrhPcPChz","BrokenLink":"bCFEazU3vx717BaShrKi","Coordinator2Router":"DhY_vi0sNfdHwS_3BUAG","Router2Coordinator":"TZifpxSyHA5VQ53VaZ0H","Router2Router":"_853t_nfiOUJUhhW848E","Coordinator2EndDevice":"_OqUuzFgJm3FBkH07P4s","EndDevice2Coordinator":"CGVsTc_eOoKxZz2zUKoS","Router2EndDevice":"_l12g6zz_mm911qxKr4M","EndDevice2Router":"avv6NnKj_sYUKQxMxl7q","foreignObject":"_9iAB_hIq_fkwoNdMjXG","offline":"_HiFF3JRG4ERbc3f7XYY","controls":"ZuBPBDAIrPLIgEP8tcmd"});
// EXTERNAL MODULE: ./node_modules/classnames/index.js
var classnames = __webpack_require__(4184);
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);
// EXTERNAL MODULE: ./node_modules/d3-selection/src/select.js
var src_select = __webpack_require__(3838);
;// CONCATENATED MODULE: ./src/components/map/links.tsx




const Link = props => {
    const { link: { linkType }, id, ...rest } = props;
    return react.createElement("path", { id: id, className: classnames_default()(map.link, map[linkType]), strokeWidth: 1, fill: "transparent", ...rest });
};
const LinkLabel = props => {
    const { link } = props;
    return react.createElement("text", { className: map.linkLabel }, link.linkqualities.join('/'));
};
const Links = props => {
    const { links } = props;
    const ref = (0,react.useRef)();
    (0,react.useLayoutEffect)(() => {
        (0,src_select/* default */.Z)(ref.current).selectAll(`.${map.link}`).data(links);
        (0,src_select/* default */.Z)(ref.current).selectAll(`.${map.linkLabel}`).data(links);
    }, [links.length]);
    return (react.createElement("g", { ref: ref, className: map.links }, links.map((link) => {
        const id = `${link.source.ieeeAddr}-${link.target.ieeeAddr}-${link.linkType}`;
        return react.createElement(react.Fragment, { key: `fragment${id}` },
            react.createElement(Link, { id: `edgepath${id}`, link: link }),
            react.createElement(LinkLabel, { xlinkHref: `#edgepath${id}`, link: link }));
    })));
};
/* harmony default export */ const map_links = (Links);

// EXTERNAL MODULE: ./src/images/generic-zigbee-device.png
var generic_zigbee_device = __webpack_require__(9394);
// EXTERNAL MODULE: ./node_modules/jszip/dist/jszip.min.js
var jszip_min = __webpack_require__(5733);
var jszip_min_default = /*#__PURE__*/__webpack_require__.n(jszip_min);
// EXTERNAL MODULE: ./node_modules/file-saver/dist/FileSaver.min.js
var FileSaver_min = __webpack_require__(3162);
var FileSaver_min_default = /*#__PURE__*/__webpack_require__.n(FileSaver_min);
;// CONCATENATED MODULE: ./src/utils.ts


const genDeviceDetailsLink = (deviceIdentifier) => (`/device/${deviceIdentifier}`);
const toHex = (input, padding = 4) => {
    return `0x${(`${'0'.repeat(padding)}${input.toString(16)}`).substr(-1 * padding).toUpperCase()}`;
};
const toHHMMSS = (secs) => {
    if (!secs) {
        return 'N/A';
    }
    const hours = Math.floor(secs / 3600);
    const minutes = Math.floor(secs / 60) % 60;
    const seconds = Math.floor(secs % 60);
    return [hours, minutes, seconds]
        .map(v => v < 10 ? `0${v}` : v)
        .filter((v, i) => v !== "00" || i > 0)
        .join(":");
};
const getLastSeenType = (config) => {
    if (config.last_seen !== "disable") {
        return config.last_seen;
    }
    if (config.elapsed) {
        return "elapsed";
    }
    return "disable";
};
const lastSeen = (state, lastSeenType) => {
    switch (lastSeenType) {
        case "ISO_8601":
        case "ISO_8601_local":
            return new Date(Date.parse(state.last_seen));
        case "epoch":
            return new Date(state.last_seen);
        case "elapsed":
            return new Date(Date.now() - state.elapsed);
        case "disable":
            return undefined;
        default:
            console.warn("Unknown last_seen type " + lastSeenType);
            return undefined;
    }
};
const sanitizeGraph = (inGraph) => {
    const nodes = {};
    const links = new Map();
    inGraph.nodes.forEach(node => {
        nodes[node.ieeeAddr] = node;
    });
    inGraph.links.sort((a, b) => a.relationship - b.relationship).forEach(link => {
        const src = nodes[link.source.ieeeAddr];
        const dst = nodes[link.target.ieeeAddr];
        if (src && dst) {
            const linkId = [link.source.ieeeAddr, link.target.ieeeAddr].sort().join('');
            const repeatedLink = links.get(linkId);
            const linkType = [src.type, dst.type].join('2');
            if (repeatedLink) {
                repeatedLink.linkqualities.push(link.linkquality);
                repeatedLink.relationships.push(link.relationship);
            }
            else {
                links.set(linkId, { ...link, ...{ source: src, target: dst, linkType, linkqualities: [link.linkquality], relationships: [link.relationship] } });
            }
        }
        else {
            console.warn(`Broken link${src ? "" : " ,source node is missing"}${dst ? "" : " ,target node is missing"}`, link);
        }
    });
    inGraph.links = Array.from(links.values());
    return inGraph;
};
const getDeviceDisplayName = (device) => {
    var _a, _b;
    return `${device.friendly_name} ${((_a = device.definition) === null || _a === void 0 ? void 0 : _a.model) ? `(${(_b = device.definition) === null || _b === void 0 ? void 0 : _b.model})` : ''}`;
};
const randomString = (len) => Math.random().toString(36).substr(2, len);
const isSecurePage = () => location.protocol === 'https:';
const scale = (inputY, yRange, xRange) => {
    const [xMin, xMax] = xRange;
    const [yMin, yMax] = yRange;
    const percent = (inputY - yMin) / (yMax - yMin);
    const outputX = percent * (xMax - xMin) + xMin;
    return outputX;
};
const download = (data, filename) => {
    const zip = new (jszip_min_default())();
    zip.file(filename, JSON.stringify(data, null, 4), { compression: 'DEFLATE' });
    zip.generateAsync({ type: "blob" }).then((content) => {
        FileSaver_min_default().saveAs(content, `${filename}.zip`);
    });
};
const sanitizeZ2MDeviceName = (deviceName) => deviceName ? deviceName.replace(/:|\s|\//g, "-") : "NA";
const getEndpoints = (obj) => {
    if (!obj) {
        return [];
    }
    else if (obj.endpoints) {
        return Object.keys(obj.endpoints);
    }
    else if (obj.members) {
        return obj.members.map(g => g.endpoint);
    }
    return [];
};
const stringifyWithPreservingUndefinedAsNull = (data) => JSON.stringify(data, (k, v) => v === undefined ? null : v);
const isOnlyOneBitIsSet = (b) => {
    return b && !(b & (b - 1));
};
const getCurrentTheme = () => { var _a; return (_a = localStorage.getItem('theme')) !== null && _a !== void 0 ? _a : 'light'; };
const saveCurrentTheme = (theme) => localStorage.setItem('theme', theme);

;// CONCATENATED MODULE: ./src/components/device-image/style.css
// extracted by mini-css-extract-plugin
/* harmony default export */ const style = ({"img":"MmRQbUfRaZbJJr_F9ddJ"});
// EXTERNAL MODULE: ./node_modules/react-i18next/dist/es/useTranslation.js
var useTranslation = __webpack_require__(6793);
;// CONCATENATED MODULE: ./src/components/device-image/index.tsx






const genericDeiviceImageFallback = (device) => generic_zigbee_device;
const genSlsDeviceImageUrlZ2M = (device) => { var _a; return `https://www.zigbee2mqtt.io/images/devices/${sanitizeZ2MDeviceName((_a = device === null || device === void 0 ? void 0 : device.definition) === null || _a === void 0 ? void 0 : _a.model)}.jpg`; };
const converterDeviceImage = (device) => { var _a; return (_a = device.definition) === null || _a === void 0 ? void 0 : _a.icon; };
const sanitizeModelIDForImageUrl = (modelName) => modelName === null || modelName === void 0 ? void 0 : modelName.replace("/", "_");
const genSlsDeviceImageUrlSLS = (device) => (`https://slsys.github.io/Gateway/devices/png/${sanitizeModelIDForImageUrl(device.model_id)}.png`);
const AVALIABLE_GENERATORS = [
    converterDeviceImage, genSlsDeviceImageUrlZ2M, genSlsDeviceImageUrlSLS
];
const DeviceImage = (props) => {
    var _a, _b;
    const { t } = (0,useTranslation/* useTranslation */.$)("zigbee");
    const [imageGenerators, setimageGenerators] = (0,react.useState)(AVALIABLE_GENERATORS);
    const { device = {}, deviceStatus, type = "img", className, ...rest } = props;
    let src = genericDeiviceImageFallback(device);
    const onImageError = () => {
        const newGenerators = [...imageGenerators];
        newGenerators.shift();
        setimageGenerators(newGenerators);
    };
    if (((_a = device === null || device === void 0 ? void 0 : device.definition) === null || _a === void 0 ? void 0 : _a.model) && imageGenerators.length) {
        src = imageGenerators[0](device);
        if (!src) {
            onImageError();
        }
    }
    if (src) {
        const otaSpinner = ((_b = deviceStatus === null || deviceStatus === void 0 ? void 0 : deviceStatus.update) === null || _b === void 0 ? void 0 : _b.state) === "updating" ? react.createElement("i", { title: t("updating_firmware"), className: "fa fa-sync fa-spin position-absolute bottom-0 right-0" }) : null;
        const interviewSpinner = device.interviewing ? react.createElement("i", { title: t("interviewing"), className: "fa fa-spinner fa-spin position-absolute bottom-0 right-0" }) : null;
        const unseccessfullInterview = !device.interviewing && !device.interview_completed ? react.createElement("i", { title: t("interview_failed"), className: "fa fa-exclamation-triangle position-absolute top-0 right-0 text-danger" }) : null;
        switch (type) {
            case "svg":
                return react.createElement("image", { crossOrigin: "anonymous", ...rest, onError: onImageError, href: src });
            case "img":
            default:
                return react.createElement("div", { className: classnames_default()(className, "position-relative"), ...rest },
                    react.createElement("img", { crossOrigin: "anonymous", onError: onImageError, src: src, className: style.img }),
                    interviewSpinner,
                    otaSpinner,
                    unseccessfullInterview);
        }
    }
    else {
        return null;
    }
};
/* harmony default export */ const device_image = (DeviceImage);

// EXTERNAL MODULE: ./node_modules/d3-drag/src/drag.js + 2 modules
var drag = __webpack_require__(9875);
// EXTERNAL MODULE: ./node_modules/react-transition-group/esm/CSSTransition.js + 6 modules
var CSSTransition = __webpack_require__(7919);
// EXTERNAL MODULE: ./node_modules/lodash/isEqual.js
var isEqual = __webpack_require__(8446);
var isEqual_default = /*#__PURE__*/__webpack_require__.n(isEqual);
;// CONCATENATED MODULE: ./src/components/map/nodes.tsx








const getStarShape = (innerCircleArms, innerRadius, outerRadius) => {
    const centerX = 15;
    const centerY = 15;
    const angle = Math.PI / innerCircleArms;
    const angleOffsetToCenterStar = 60;
    const totalArms = innerCircleArms * 2;
    let points = "";
    for (let i = 0; i < totalArms; i++) {
        const isEvenIndex = i % 2 == 0;
        const r = isEvenIndex ? outerRadius : innerRadius;
        const currX = centerX + Math.cos(i * angle + angleOffsetToCenterStar) * r;
        const currY = centerY + Math.sin(i * angle + angleOffsetToCenterStar) * r;
        points += `${currX}, ${currY} `;
    }
    return points;
};
const offlineTimeout = (/* unused pure expression or super */ null && (3600 * 2));
const isOnline = (device) => {
    return true;
};
class Node extends react.Component {
    constructor() {
        super(...arguments);
        this.state = {
            hasBeenUpdated: false
        };
        this.ref = (0,react.createRef)();
        this.onMouseOut = () => {
            const { node, onMouseOut } = this.props;
            this.ref && this.ref.current && onMouseOut && onMouseOut(node, this.ref.current);
        };
        this.onMouseOver = () => {
            const { node, onMouseOver } = this.props;
            this.ref && this.ref.current && onMouseOver && onMouseOver(node, this.ref.current);
        };
        this.onDblClick = () => {
            const { node, onDblClick } = this.props;
            this.ref && this.ref.current && onDblClick && onDblClick(node, this.ref.current);
        };
    }
    componentDidUpdate(prevProps) {
        const { deviceState: prevDeviceState } = prevProps;
        const { deviceState: currentDeviceState } = this.props;
        const statesAreEqual = isEqual_default()(prevDeviceState, currentDeviceState);
        let { hasBeenUpdated } = this.state;
        if (statesAreEqual) {
            if (hasBeenUpdated) {
                this.setState({ hasBeenUpdated: false });
            }
        }
        else {
            this.setState({ hasBeenUpdated: true });
        }
    }
    componentDidMount() {
        const { current } = this.ref;
        const { node } = this.props;
        (0,src_select/* default */.Z)(current).data([node]);
    }
    render() {
        const { hasBeenUpdated } = this.state;
        const { node, deviceState, device } = this.props;
        const { onMouseOver, onMouseOut, onDblClick } = this;
        const deviceType = node.type;
        const cn = classnames_default()(map.node, map[deviceType]);
        return (react.createElement("g", { className: cn, ref: this.ref, onMouseOver: onMouseOver, onMouseOut: onMouseOut, onDoubleClick: onDblClick },
            node.type === "Coordinator" ? (react.createElement(react.Fragment, null,
                react.createElement("circle", { cx: 15, cy: 16, r: 24, fill: "#fff", stroke: "blue", strokeWidth: 1 }),
                react.createElement("polygon", { stroke: "blue", strokeWidth: 1, points: getStarShape(5, 5, 14) }))) : (react.createElement(react.Fragment, null,
                react.createElement(CSSTransition/* default */.Z, { in: hasBeenUpdated, timeout: 200, classNames: "stroke-blink" },
                    react.createElement("circle", { "data-foo": deviceState === null || deviceState === void 0 ? void 0 : deviceState.last_seen, cx: 16, cy: 17, r: 24, fill: "#fff", stroke: "blue", strokeWidth: 1 })),
                react.createElement(device_image, { type: "svg", width: 32, height: 32, device: device, className: `${map.img}` }))),
            react.createElement("text", { x: 45, y: 25 }, node.friendlyName)));
    }
}
class Nodes extends react.Component {
    constructor() {
        super(...arguments);
        this.state = {
            toggle: false
        };
    }
    updateDrag() {
        const { simulation, root } = this.props;
        const dragForce = (0,drag/* default */.Z)()
            .on("start", (event, d) => {
            if (!event.active) {
                simulation.alphaTarget(0.3).restart();
            }
            d.fx = d.x;
            d.fy = d.y;
        })
            .on("drag", ({ x, y }, d) => {
            d.fx = x;
            d.fy = y;
        })
            .on("end", (event, d) => {
            if (!event.active) {
                simulation.alphaTarget(0);
            }
            d.fx = undefined;
            d.fy = undefined;
        });
        (0,src_select/* default */.Z)(root).selectAll(`.${map.node}`)
            .call(dragForce);
    }
    componentDidMount() {
        this.updateDrag();
    }
    componentDidUpdate() {
        this.updateDrag();
    }
    render() {
        const { nodes, onMouseOut, onMouseOver, deviceStates, devices } = this.props;
        return (react.createElement("g", { className: map.nodes }, nodes.map((node) => (react.createElement(Node, { onMouseOut: onMouseOut, onMouseOver: onMouseOver, key: node.ieeeAddr, node: node, deviceState: deviceStates[node.friendlyName], device: devices[node.ieeeAddr] })))));
    }
}

;// CONCATENATED MODULE: ./src/components/map/types.ts
var ZigbeeRelationship;
(function (ZigbeeRelationship) {
    ZigbeeRelationship[ZigbeeRelationship["NeigbhorIsParent"] = 0] = "NeigbhorIsParent";
    ZigbeeRelationship[ZigbeeRelationship["NeigbhorIsAChild"] = 1] = "NeigbhorIsAChild";
    ZigbeeRelationship[ZigbeeRelationship["NeigbhorIsASibling"] = 2] = "NeigbhorIsASibling";
    ZigbeeRelationship[ZigbeeRelationship["NoneOfTheAbove"] = 3] = "NoneOfTheAbove";
    ZigbeeRelationship[ZigbeeRelationship["NeigbhorIsAFormerChild"] = 4] = "NeigbhorIsAFormerChild";
})(ZigbeeRelationship || (ZigbeeRelationship = {}));

// EXTERNAL MODULE: ./node_modules/unistore/react.js
var unistore_react = __webpack_require__(2599);
// EXTERNAL MODULE: ./node_modules/reconnecting-websocket/dist/reconnecting-websocket-mjs.js
var reconnecting_websocket_mjs = __webpack_require__(2003);
// EXTERNAL MODULE: ./node_modules/unistore/dist/unistore.es.js
var unistore_es = __webpack_require__(2720);
// EXTERNAL MODULE: ./node_modules/unistore/devtools.js
var devtools = __webpack_require__(2512);
;// CONCATENATED MODULE: ./src/initialState.json
const initialState_namespaceObject = JSON.parse('{"devices":{},"deviceStates":{},"touchlinkDevices":[],"touchlinkScanInProgress":false,"touchlinkIdentifyInProgress":false,"touchlinkResetInProgress":false,"networkGraph":{"links":[],"nodes":[]},"networkGraphIsLoading":false,"groups":[],"bridgeState":"online","bridgeConfig":{},"bridgeInfo":{"configSchema":{"properties":{},"required":[]},"config":{"advanced":{}}},"logs":[],"extensions":[],"theme":"light","missingTranslations":{}}');
;// CONCATENATED MODULE: ./src/store.ts




const theme = getCurrentTheme();
initialState_namespaceObject.theme = theme;
const _store = (0,unistore_es/* default */.Z)(initialState_namespaceObject);
const store =  true ? _store : 0;
/* harmony default export */ const src_store = (store);

// EXTERNAL MODULE: ./node_modules/notyf/notyf.es.js
var notyf_es = __webpack_require__(6685);
;// CONCATENATED MODULE: ./src/api.ts




const MAX_LOGS_RECORDS_IN_BUFFER = 100;
const TOKEN_LOCAL_STORAGE_ITEM_NAME = "z2m-token";
const AUTH_FLAG_LOCAL_STORAGE_ITEM_NAME = "z2m-auth";
const UNAUTHORIZED_ERROR_CODE = 4401;
const notyf = new notyf_es/* Notyf */.Iq();
const blacklistedMessages = [
    /MQTT publish/
];
const isLogMessage = (msg) => {
    return msg.level !== undefined && msg.message !== undefined;
};
const isResponseWithStatus = (msg) => {
    return msg.status !== undefined;
};
const showNotity = (data) => {
    let message = "", level = "";
    if (isLogMessage(data)) {
        message = data.message;
        level = data.level;
    }
    else if (isResponseWithStatus(data)) {
        switch (data.status) {
            case "error":
                level = "error";
                message = data.error;
                break;
            default:
                break;
        }
    }
    switch (level) {
        case "error":
        case "warning":
            notyf.error(message);
            break;
        case "info":
            notyf.success(message);
            break;
        default:
            break;
    }
};
class Api {
    constructor(url) {
        this.requests = new Map();
        this.transactionNumber = 1;
        this.send = (topic, payload) => {
            console.debug("Calling API", { topic, payload });
            if (topic.startsWith('bridge/request/')) {
                const transaction = `${this.transactionRndPreffix}-${this.transactionNumber++}`;
                const promise = new Promise((resolve, reject) => {
                    this.requests.set(transaction, [resolve, reject]);
                });
                this.socket.send(stringifyWithPreservingUndefinedAsNull({ topic, payload: { ...payload, transaction } }));
                return promise;
            }
            else {
                this.socket.send(stringifyWithPreservingUndefinedAsNull({ topic, payload }));
                return Promise.resolve();
            }
        };
        this.urlProvider = async () => {
            const url = new URL(this.url);
            let token = localStorage.getItem(TOKEN_LOCAL_STORAGE_ITEM_NAME);
            const authRequired = !!localStorage.getItem(AUTH_FLAG_LOCAL_STORAGE_ITEM_NAME);
            if (authRequired) {
                if (!token) {
                    token = prompt("enter your z2m admin token");
                    localStorage.setItem(TOKEN_LOCAL_STORAGE_ITEM_NAME, token);
                }
                url.searchParams.append("token", token);
            }
            return url.toString();
        };
        this.procsessBridgeMessage = (data) => {
            switch (data.topic) {
                case "bridge/config":
                    src_store.setState({
                        bridgeConfig: data.payload
                    });
                    break;
                case "bridge/info":
                    src_store.setState({
                        bridgeInfo: data.payload
                    });
                    break;
                case "bridge/state":
                    src_store.setState({
                        bridgeState: data.payload
                    });
                    break;
                case "bridge/devices":
                    {
                        const devicesMap = {};
                        data.payload.forEach((device) => {
                            devicesMap[device.ieee_address] = device;
                        });
                        src_store.setState({
                            devices: devicesMap
                        });
                    }
                    break;
                case "bridge/groups":
                    src_store.setState({
                        groups: data.payload
                    });
                    break;
                case "bridge/event":
                    break;
                case "bridge/extensions":
                    {
                        const extensions = data.payload;
                        src_store.setState({ extensions });
                    }
                    break;
                case "bridge/logging":
                    {
                        const { logs } = src_store.getState();
                        const newLogs = [...logs.slice(-MAX_LOGS_RECORDS_IN_BUFFER)];
                        newLogs.push(data.payload);
                        src_store.setState({ logs: newLogs });
                        const log = data.payload;
                        if (blacklistedMessages.every(val => !val.test(log.message))) {
                            showNotity(log);
                        }
                    }
                    break;
                case "bridge/response/networkmap":
                    {
                        const response = data.payload;
                        if (response.status == "ok") {
                            const { value } = response.data;
                            src_store.setState({
                                networkGraphIsLoading: false,
                                networkGraph: sanitizeGraph(value)
                            });
                        }
                        else {
                            src_store.setState({ networkGraphIsLoading: false });
                        }
                    }
                    break;
                case "bridge/response/touchlink/scan":
                    {
                        const { status, data: payloadData } = data.payload;
                        if (status === "ok") {
                            src_store.setState({ touchlinkScanInProgress: false, touchlinkDevices: payloadData.found });
                        }
                        else {
                            src_store.setState({ touchlinkScanInProgress: false });
                        }
                    }
                    break;
                case "bridge/response/touchlink/identify":
                    src_store.setState({ touchlinkIdentifyInProgress: false });
                    break;
                case "bridge/response/touchlink/factory_reset":
                    src_store.setState({ touchlinkResetInProgress: false });
                    break;
                default:
                    break;
            }
            if (data.topic.startsWith("bridge/response/")) {
                showNotity(data.payload);
                this.resolvePromises(data.payload);
            }
        };
        this.onClose = (e) => {
            if (e.code === UNAUTHORIZED_ERROR_CODE) {
                localStorage.setItem(AUTH_FLAG_LOCAL_STORAGE_ITEM_NAME, "true");
                localStorage.removeItem(TOKEN_LOCAL_STORAGE_ITEM_NAME);
                notyf.error("Unauthorized");
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }
        };
        this.onMessage = (event) => {
            let data = {};
            try {
                data = JSON.parse(event.data);
            }
            catch (e) {
                notyf.error(e.message);
                notyf.error(event.data);
            }
            if (data.topic.startsWith("bridge/")) {
                this.procsessBridgeMessage(data);
            }
            else {
                let { deviceStates } = src_store.getState();
                deviceStates = { ...deviceStates, ...{ [data.topic]: { ...deviceStates[data.topic], ...data.payload } } };
                src_store.setState({ deviceStates });
            }
        };
        this.url = url;
        this.transactionRndPreffix = randomString(5);
    }
    connect() {
        this.socket = new reconnecting_websocket_mjs/* default */.Z(this.urlProvider);
        this.socket.addEventListener("message", this.onMessage);
        this.socket.addEventListener("close", this.onClose);
    }
    resolvePromises(message) {
        const { transaction, status } = message;
        if (transaction !== undefined && this.requests.has(transaction)) {
            const [resolve, reject] = this.requests.get(transaction);
            if (status == "ok" || status == undefined) {
                resolve();
            }
            else {
                reject();
            }
            this.requests.delete(transaction);
        }
    }
}
const apiUrl = `${window.location.host}${document.location.pathname}api`;
const api = new Api(`${isSecurePage() ? 'wss' : 'ws'}://${apiUrl}`);
/* harmony default export */ const src_api = (api);

;// CONCATENATED MODULE: ./src/actions/BridgeApi.ts

/* harmony default export */ const BridgeApi = ({
    setPermitJoin(_state, permit = true, device, time = 254) {
        return src_api.send("bridge/request/permit_join", { value: permit, time, device: device === null || device === void 0 ? void 0 : device.friendly_name });
    },
    updateBridgeConfig(_state, options) {
        return src_api.send('bridge/request/options', { options });
    },
    restartBridge(_state) {
        return src_api.send('bridge/request/restart', {});
    },
});

;// CONCATENATED MODULE: ./src/actions/DeviceApi.ts


/* harmony default export */ const DeviceApi = ({
    renameDevice: (state, from, to, homeassistantRename) => {
        return src_api.send("bridge/request/device/rename", {
            from,
            to,
            'homeassistant_rename': homeassistantRename,
        });
    },
    removeDevice: (state, dev, force, block) => {
        return src_api.send("bridge/request/device/remove", { id: dev, force, block });
    },
    configureDevice: (state, name) => {
        return src_api.send("bridge/request/device/configure", { id: name });
    },
    setDeviceOptions: (state, id, options) => {
        return src_api.send("bridge/request/device/options", { id, options });
    },
    readDeviceAttributes(state, id, endpoint, cluster, attributes, options) {
        return src_api.send(`${toDeviceId(id, endpoint)}/set`, { read: { cluster, attributes, options } });
    },
    writeDeviceAttributes(state, id, endpoint, cluster, attributes, options) {
        const payload = {};
        attributes.forEach(info => {
            payload[info.attribute] = info.value;
        });
        return src_api.send(`${toDeviceId(id, endpoint)}/set`, { write: { cluster, payload, options } });
    }
});

;// CONCATENATED MODULE: ./src/actions/GroupsApi.ts

/* harmony default export */ const GroupsApi = ({
    createGroup: (state, group, id) => {
        const payload = {
            'friendly_name': group
        };
        if (id) {
            payload['id'] = id;
        }
        return src_api.send("bridge/request/group/add", payload);
    },
    removeGroup: (state, group) => {
        return src_api.send("bridge/request/group/remove", { id: group });
    },
    addDeviceToGroup: (state, device, group) => {
        return src_api.send("bridge/request/group/members/add", { group, device });
    },
    removeDeviceFromGroup: (state, device, group) => {
        return src_api.send("bridge/request/group/members/remove", { device, group });
    },
    renameGroup: (state, oldName, newName) => {
        return src_api.send("bridge/request/group/rename", { from: oldName, to: newName });
    },
});

;// CONCATENATED MODULE: ./src/actions/StateApi.ts

/* harmony default export */ const StateApi = ({
    setStateValue(state, dev, name, value) {
        return src_api.send(`${dev}/set`, { [name]: value });
    },
    setDeviceState(state, dev, value) {
        return src_api.send(`${dev}/set`, value);
    },
    getDeviceState(state, dev, value) {
        return src_api.send(`${dev}/get`, value);
    },
});

;// CONCATENATED MODULE: ./src/actions/OtaApi.ts

/* harmony default export */ const OtaApi = ({
    checkOTA: (state, deviceName) => {
        return src_api.send("bridge/request/device/ota_update/check", { id: deviceName });
    },
    updateOTA: (state, deviceName) => {
        return src_api.send("bridge/request/device/ota_update/update", { id: deviceName });
    },
});

;// CONCATENATED MODULE: ./src/actions/BindApi.ts

const bindOp = (operation, params) => {
    return src_api.send(`bridge/request/device/${operation}`, params);
};
/* harmony default export */ const BindApi = ({
    addBind: (state, params) => bindOp("bind", params),
    removeBind: (state, params) => bindOp("unbind", params),
});

;// CONCATENATED MODULE: ./src/actions/TouchlinkApi.ts


/* harmony default export */ const TouchlinkApi = ({
    touchlinkScan(state) {
        src_store.setState({ touchlinkScanInProgress: true, touchlinkDevices: [] });
        return src_api.send("bridge/request/touchlink/scan", { value: true });
    },
    touchlinkIdentify(state, device) {
        src_store.setState({ touchlinkIdentifyInProgress: true });
        return src_api.send("bridge/request/touchlink/identify", device);
    },
    touchlinkReset(state, device) {
        src_store.setState({ touchlinkResetInProgress: true });
        return src_api.send("bridge/request/touchlink/factory_reset", device);
    },
});

;// CONCATENATED MODULE: ./src/actions/ExtensionApi.ts


/* harmony default export */ const ExtensionApi = ({
    updateExtensionCode: (state, extension) => {
        const { extensions } = src_store.getState();
        const newExtensions = extensions.filter(f => f.name !== extension.name).concat([extension]);
        src_store.setState({ extensions: newExtensions });
        return Promise.resolve();
    },
    saveExtensionCode: (state, extension) => {
        return src_api.send(`bridge/request/extension/save`, extension);
    },
    removeExtension: (state, extension) => {
        const { extensions } = src_store.getState();
        const newExtensions = extensions.filter(f => f.name !== extension.name);
        src_store.setState({ extensions: newExtensions });
        return src_api.send(`bridge/request/extension/remove`, { name: extension.name });
    }
});

;// CONCATENATED MODULE: ./src/actions/SceneApi.ts

/* harmony default export */ const SceneApi = ({
    sceneStore(state, dev, scene, endpoint) {
        return src_api.send(`${dev}/set`, { scene_store: { ...{ ID: scene.id }, ...(scene.name && { name: scene.name }) } });
    },
    sceneRecall(state, dev, sceneId, endpoint) {
        return src_api.send(`${dev}/set`, { scene_recall: sceneId });
    },
    sceneRemove(state, dev, sceneId, endpoint) {
        return src_api.send(`${dev}/set`, { scene_remove: sceneId });
    },
    sceneRemoveAll(state, dev, endpoint) {
        return src_api.send(`${dev}/set`, { scene_remove_all: "" });
    },
});

;// CONCATENATED MODULE: ./src/actions/actions.ts











const toDeviceId = (friendlyNameOrIEEEAddress, endpoint) => {
    if (endpoint) {
        return `${friendlyNameOrIEEEAddress}/${endpoint}`;
    }
    else {
        return friendlyNameOrIEEEAddress;
    }
};
const actions = (store) => ({
    ...BridgeApi,
    ...DeviceApi,
    ...GroupsApi,
    ...StateApi,
    ...OtaApi,
    ...BindApi,
    ...TouchlinkApi,
    ...ExtensionApi,
    ...SceneApi,
    networkMapRequest: (state) => {
        store.setState({ networkGraphIsLoading: true, networkGraph: { nodes: [], links: [] } });
        return src_api.send("bridge/request/networkmap", { type: "raw", routes: false });
    },
    exportState(state) {
        download(state, 'state.json');
        return Promise.resolve();
    },
    configureReport(state, device, config) {
        return src_api.send('bridge/request/device/configure_reporting', {
            id: device,
            ...config
        });
    },
    setTheme(state, theme) {
        saveCurrentTheme(theme);
        store.setState({ theme });
        return Promise.resolve();
    },
    clearLogs(state) {
        store.setState({ logs: [] });
        return Promise.resolve();
    }
});
/* harmony default export */ const actions_actions = (actions);

;// CONCATENATED MODULE: ./src/hooks/useModal.tsx

const useModal = (defaultIsVisible) => {
    const [isOpen, setVisible] = (0,react.useState)(defaultIsVisible);
    function toggle() {
        setVisible(!isOpen);
    }
    return { toggle, isOpen };
};
/* harmony default export */ const hooks_useModal = (useModal);

// EXTERNAL MODULE: ./node_modules/react-dom/index.js
var react_dom = __webpack_require__(3935);
;// CONCATENATED MODULE: ./src/components/modal/Modal.tsx
function ModalHeader(props) {
    return react.createElement("div", { className: "modal-header" }, props.children);
}
function ModalBody(props) {
    return react.createElement("div", { className: "modal-body" }, props.children);
}
function ModalFooter(props) {
    return react.createElement("div", { className: "modal-footer" }, props.children);
}


class BodyEnd extends react.Component {
    constructor(props) {
        super(props);
        this.el = document.createElement('div');
        'modal-backdrop fade show'.split(' ').map(className => this.el.classList.add(className));
    }
    componentDidMount() {
        document.body.appendChild(this.el);
    }
    componentWillUnmount() {
        document.body.removeChild(this.el);
    }
    render() {
        return react_dom.createPortal(this.props.children, this.el);
    }
}
const Modal = ({ isOpen, children }) => {
    (0,react.useEffect)(() => {
        if (isOpen) {
            document.body.classList.add("modal-open");
        }
        else {
            document.body.classList.remove("modal-open");
        }
    }, [isOpen]);
    return isOpen ? react_dom.createPortal(react.createElement("div", { className: "modal show overflow-scroll", style: { display: 'block' } },
        react.createElement("div", { className: "modal-dialog" },
            react.createElement("div", { className: "modal-content" }, children)),
        react.createElement(BodyEnd, null)), document.body) : null;
};
/* harmony default export */ const modal_Modal = (Modal);

;// CONCATENATED MODULE: ./src/components/button/index.tsx




function Button(props) {
    const { children, item, onClick, promt, ...rest } = props;
    const { t } = (0,useTranslation/* useTranslation */.$)("common");
    const { isOpen, toggle } = hooks_useModal(false);
    const onConfirmHandler = () => {
        onClick && onClick(item);
        toggle();
    };
    const onClickHandler = () => {
        if (promt) {
            toggle();
        }
        else {
            onClick && onClick(item);
        }
    };
    return (react.createElement(react.Fragment, null,
        react.createElement("button", { type: "button", ...rest, onClick: onClickHandler }, children),
        react.createElement(modal_Modal, { isOpen: isOpen },
            react.createElement(ModalHeader, null,
                react.createElement("h3", null, t('confirmation'))),
            react.createElement(ModalBody, null, t('dialog_confirmation_prompt')),
            react.createElement(ModalFooter, null,
                react.createElement("button", { type: "button", className: "btn btn-secondary", onClick: toggle }, t('common:close')),
                react.createElement("button", { type: "button", className: "btn btn-primary", onClick: onConfirmHandler }, t('common:ok'))))));
}

// EXTERNAL MODULE: ./node_modules/d3-force/src/simulation.js + 1 modules
var simulation = __webpack_require__(7054);
// EXTERNAL MODULE: ./node_modules/d3-force/src/link.js
var src_link = __webpack_require__(6561);
// EXTERNAL MODULE: ./node_modules/d3-force/src/collide.js + 14 modules
var collide = __webpack_require__(873);
// EXTERNAL MODULE: ./node_modules/d3-force/src/center.js
var center = __webpack_require__(8505);
// EXTERNAL MODULE: ./node_modules/d3-force/src/x.js
var x = __webpack_require__(341);
// EXTERNAL MODULE: ./node_modules/d3-force/src/y.js
var y = __webpack_require__(2688);
// EXTERNAL MODULE: ./node_modules/d3-force-reuse/src/manyBodyReuse.js + 15 modules
var manyBodyReuse = __webpack_require__(2289);
// EXTERNAL MODULE: ./node_modules/d3-zoom/src/index.js + 48 modules
var src = __webpack_require__(5164);
;// CONCATENATED MODULE: ./src/components/map/consts.ts

const linkTypes = [
    {
        title: 'IsParent',
        relationship: ZigbeeRelationship.NeigbhorIsParent
    },
    {
        title: 'IsAChild',
        relationship: ZigbeeRelationship.NeigbhorIsAChild
    },
    {
        title: 'IsASibling',
        relationship: ZigbeeRelationship.NeigbhorIsASibling
    },
    {
        title: 'NoneOfTheAbove',
        relationship: ZigbeeRelationship.NoneOfTheAbove
    }
];

;// CONCATENATED MODULE: ./src/components/spinner.tsx

const Spinner = () => {
    return react.createElement("div", { className: "d-flex align-items-center" },
        react.createElement("strong", null, "Loading, please wait."),
        react.createElement("div", { className: "spinner-border me-2", role: "status" },
            react.createElement("span", { className: "sr-only" }, "Loading...")));
};
/* harmony default export */ const spinner = (Spinner);

// EXTERNAL MODULE: ./node_modules/lodash/intersection.js
var intersection = __webpack_require__(5325);
var intersection_default = /*#__PURE__*/__webpack_require__.n(intersection);
// EXTERNAL MODULE: ./node_modules/react-i18next/dist/es/withTranslation.js + 1 modules
var withTranslation = __webpack_require__(5848);
;// CONCATENATED MODULE: ./src/components/map/index.tsx

















const parentOrChild = [ZigbeeRelationship.NeigbhorIsAChild, ZigbeeRelationship.NeigbhorIsParent];
const linkStrregth = (d) => {
    if (d.linkType === "Router2Router") {
        return 1;
    }
    if (parentOrChild.includes(d.relationship)) {
        return 0.5;
    }
    return 0;
};
const defaultVisibleRelationshLinks = [...parentOrChild, ZigbeeRelationship.NeigbhorIsASibling];
const baseDistance = 100;
const distancesMap = {
    BrokenLink: 5 * baseDistance,
    Router2Router: 2.5 * baseDistance,
    Coordinator2Router: 2.5 * baseDistance,
    Coordinator2EndDevice: 1 * baseDistance,
    EndDevice2Router: 1 * baseDistance
};
const getDistance = (d) => {
    var _a;
    return (_a = distancesMap[d.linkType]) !== null && _a !== void 0 ? _a : 250;
};
const computeLink = (d, transform) => {
    const src = d.source;
    const dst = d.target;
    const [x1, y1] = transform.apply([src.x, src.y]);
    const [x2, y2] = transform.apply([dst.x, dst.y]);
    return `M ${x1} ${y1} L ${x2} ${y2}`;
};
const ticked = ({ transform, node, link, linkLabel, links }) => {
    links.forEach((d) => {
        const [x1, y1] = transform.apply([d.source.x, d.source.y]), [x2, y2] = transform.apply([d.target.x, d.target.y]);
        d.x = (x2 + x1) / 2;
        d.y = (y2 + y1) / 2;
    });
    link.attr("d", (d) => computeLink(d, transform));
    linkLabel
        .attr('x', ({ source, target }) => transform.applyX((source.x + target.x) / 2))
        .attr('y', ({ source, target }) => transform.applyY((source.y + target.y) / 2));
    node.attr("transform", (d) => {
        const imgXShift = 32 / 2;
        const imgYShift = 32 / 2;
        const [X, Y] = transform.apply([d.x, d.y]);
        return `translate(${X - imgXShift}, ${Y - imgYShift})`;
    });
};
const processHighlights = ({ networkGraph, links, selectedNode, node, link, linkLabel }) => {
    const linkedByIndex = new Set();
    networkGraph.nodes.forEach(n => linkedByIndex.add(n.ieeeAddr + "," + n.ieeeAddr));
    links.forEach((l) => linkedByIndex.add(l.source.ieeeAddr + "," + l.target.ieeeAddr));
    const neighboring = (a, b) => linkedByIndex.has(a.ieeeAddr + "," + b.ieeeAddr);
    const computeOpacity = (l) => ((l === null || l === void 0 ? void 0 : l.source) === selectedNode || (l === null || l === void 0 ? void 0 : l.target) === selectedNode ? 1 : 0.15);
    if (selectedNode) {
        node.style("opacity", (o) => neighboring(selectedNode, o) || neighboring(o, selectedNode) ? 1 : 0.15);
        link.style("stroke-opacity", computeOpacity);
        linkLabel.style("opacity", computeOpacity);
    }
    else {
        node.style("opacity", 1);
        link.style("stroke-opacity", 1);
        linkLabel.style("opacity", 1);
    }
};
class MapComponent extends react.Component {
    constructor() {
        super(...arguments);
        this.ref = (0,react.createRef)();
        this.svgRef = (0,react.createRef)();
        this.simulation = (0,simulation/* default */.Z)();
        this.state = {
            width: 0,
            height: 0,
            visibleLinks: defaultVisibleRelationshLinks,
            legendIsVisible: true,
        };
        this.transform = src/* zoomIdentity */.CR;
        this.updateNodes = () => {
            var _a;
            const { networkGraph } = this.props;
            const { visibleLinks, selectedNode, width, height } = this.state;
            const container = (0,src_select/* default */.Z)(this.svgRef.current);
            const node = container.selectAll(`.${map.node}`);
            const link = container.selectAll(`.${map.link}`);
            const linkLabel = container.selectAll(`.${map.linkLabel}`);
            const links = networkGraph.links.filter(l => intersection_default()(visibleLinks, l.relationships).length);
            this.simulation.nodes(networkGraph.nodes.concat(links));
            (_a = this.simulation.force("link")) === null || _a === void 0 ? void 0 : _a.links(links);
            this.simulation.on("tick", () => ticked({ transform: this.transform, node, link, linkLabel, links }));
            const everything = container.selectAll('.everything');
            const zoomHandler = (0,src/* zoom */.sP)()
                .extent([[0, 0], [width, height]])
                .scaleExtent([1 / 10, 8])
                .on("zoom", ({ transform }) => {
                everything.attr("transform", transform);
            });
            zoomHandler(container);
            processHighlights({ networkGraph, links, selectedNode, node, link, linkLabel });
            node.on("click", (event, d) => {
                const { selectedNode } = this.state;
                this.setState({ selectedNode: selectedNode ? null : d });
            });
            this.simulation.alphaTarget(0.03).restart();
        };
        this.initPage = () => {
            const { width, height } = this.ref.current.getBoundingClientRect();
            this.setState({ width, height });
            this.updateForces(width, height);
        };
        this.onRequestClick = () => {
            const { networkMapRequest } = this.props;
            networkMapRequest();
        };
        this.onLinkTypeFilterChange = (e) => {
            const { visibleLinks: stateVisibleLinks } = this.state;
            const { checked, value } = e.target;
            const inValue = parseInt(value, 10);
            let visibleLinks = [...stateVisibleLinks];
            if (checked) {
                visibleLinks.push(inValue);
            }
            else {
                visibleLinks = visibleLinks.filter((v) => v !== inValue);
            }
            this.setState({ visibleLinks });
        };
    }
    updateForces(width, height) {
        this.simulation = this.simulation
            .force("link", (0,src_link/* default */.Z)().id(d => d.ieeeAddr).distance(getDistance).strength(linkStrregth))
            .force("charge", (0,manyBodyReuse/* default */.Z)().strength(-700))
            .force("collisionForce", (0,collide/* default */.Z)())
            .force("center", (0,center/* default */.Z)(width / 2, height / 2))
            .force("x", (0,x/* default */.Z)().strength(0.1))
            .force("y", (0,y/* default */.Z)().strength(0.2));
    }
    componentDidMount() {
        setTimeout(this.initPage, 200);
    }
    componentDidUpdate() {
        this.updateNodes();
    }
    renderMap() {
        const { width, height, visibleLinks } = this.state;
        const { networkGraph, deviceStates, devices } = this.props;
        const links = networkGraph.links.filter(l => intersection_default()(visibleLinks, l.relationships).length > 0);
        return (react.createElement("svg", { ref: this.svgRef, viewBox: `0 0 ${width} ${height}` },
            react.createElement("g", { className: "everything" },
                react.createElement(map_links, { links: links }),
                react.createElement(Nodes, { root: this.svgRef.current, nodes: networkGraph.nodes, simulation: this.simulation, deviceStates: deviceStates, devices: devices }))));
    }
    renderMessage() {
        const { networkGraphIsLoading, t } = this.props;
        return (react.createElement("div", { className: "h-100 d-flex justify-content-center align-items-center" }, networkGraphIsLoading ? (react.createElement("div", null,
            react.createElement(spinner, null),
            react.createElement("div", null, t('loading')))) : react.createElement(Button, { onClick: this.onRequestClick, className: "btn btn-primary d-block" }, t('load'))));
    }
    renderMapControls() {
        const { visibleLinks } = this.state;
        return react.createElement("div", { className: map.controls },
            linkTypes.map(linkType => (react.createElement("div", { key: linkType.title, className: "form-check form-check-inline" },
                react.createElement("input", { onChange: this.onLinkTypeFilterChange, className: "form-check-input", type: "checkbox", id: linkType.title, value: linkType.relationship, checked: visibleLinks.includes(linkType.relationship) }),
                react.createElement("label", { className: "form-check-label", htmlFor: linkType.title }, linkType.title)))),
            react.createElement("div", { className: "btn-group btn-group-sm", role: "group" },
                react.createElement(Button, { title: "Refresh data", className: "btn btn-primary", onClick: this.onRequestClick },
                    react.createElement("i", { className: "fa fa-sync" }))));
    }
    renderHelp() {
        const { t } = this.props;
        const { legendIsVisible } = this.state;
        return (react.createElement("div", { className: classnames_default()("fixed-bottom", { "d-none": !legendIsVisible }), onClick: () => this.setState({ legendIsVisible: false }) },
            react.createElement("div", { className: classnames_default()(map.node, map.Coordinator) },
                react.createElement("svg", { width: "28", height: "28", viewBox: "0 0 28 28" },
                    react.createElement("polygon", { points: getStarShape(5, 5, 14) })),
                " ",
                t('help_is_coordinator')),
            react.createElement("div", { className: classnames_default()(map.node, map.EndDevice) }, t("help_end_device_description")),
            react.createElement("div", { className: classnames_default()(map.node, map.Router) }, t('help_router_description')),
            react.createElement("div", null, t('help_coordinator_link_description')),
            react.createElement("div", null, t('help_router_links_description')),
            react.createElement("div", null, t("help_lqi_description")),
            react.createElement("div", null, t("hide"))));
    }
    render() {
        const { networkGraph } = this.props;
        return (react.createElement("div", { className: map.container, ref: this.ref },
            networkGraph.nodes.length ? react.createElement(react.Fragment, null,
                this.renderMapControls(),
                " ",
                this.renderMap()) : this.renderMessage(),
            this.renderHelp()));
    }
}
const mappedProps = ["networkGraph", "networkGraphIsLoading", "deviceStates", "devices"];
const ConnectedMap = (0,withTranslation/* withTranslation */.Z)("map")((0,unistore_react/* connect */.$)(mappedProps, actions_actions)(MapComponent));
/* harmony default export */ const components_map = (ConnectedMap);

// EXTERNAL MODULE: ./node_modules/react-router-dom/esm/react-router-dom.js
var react_router_dom = __webpack_require__(3727);
// EXTERNAL MODULE: ./node_modules/react-router/esm/react-router.js + 1 modules
var react_router = __webpack_require__(5977);
;// CONCATENATED MODULE: ./src/components/device-control/RenameAction.tsx





function RenameAction(props) {
    var _a;
    const { bridgeInfo, device, renameDevice } = props;
    const [isHassRename, setIsHassRename] = (0,react.useState)(false);
    const [friendlyName, setFriendlyName] = (0,react.useState)(device.friendly_name);
    const { t } = (0,useTranslation/* useTranslation */.$)(["zigbee", "common"]);
    const { isOpen, toggle } = hooks_useModal(false);
    const onSaveClick = async () => {
        await renameDevice(device.friendly_name, friendlyName, isHassRename);
        toggle();
    };
    return (react.createElement(react.Fragment, null,
        react.createElement(Button, { className: "btn btn-primary", onClick: toggle, title: t('rename_device') },
            react.createElement("i", { className: "fa fa-edit" })),
        react.createElement(modal_Modal, { isOpen: isOpen },
            react.createElement(ModalHeader, null,
                react.createElement("h3", null, t('rename_device')),
                react.createElement("small", null, device.friendly_name)),
            react.createElement(ModalBody, null,
                react.createElement("div", { className: "mb-3" },
                    react.createElement("label", { htmlFor: `fn${device.ieee_address}`, className: "form-label" }, t('friendly_name')),
                    react.createElement("input", { id: `fn${device.ieee_address}`, onChange: (e) => setFriendlyName(e.target.value), type: "text", className: "form-control", value: friendlyName })),
                ((_a = bridgeInfo === null || bridgeInfo === void 0 ? void 0 : bridgeInfo.config) === null || _a === void 0 ? void 0 : _a.homeassistant) ? (react.createElement("div", { className: "form-check form-switch" },
                    react.createElement("input", { className: "form-check-input", checked: isHassRename, type: "checkbox", id: `hass${device.ieee_address}`, onChange: (e) => setIsHassRename(e.target.checked) }),
                    react.createElement("label", { className: "form-check-label", htmlFor: `hass${device.ieee_address}` }, t('update_Home_assistant_entity_id')))) : null),
            react.createElement(ModalFooter, null,
                react.createElement("button", { type: "button", className: "btn btn-secondary", onClick: toggle }, t('common:close')),
                react.createElement("button", { type: "button", className: "btn btn-primary", onClick: onSaveClick }, t('common:save'))))));
}

;// CONCATENATED MODULE: ./src/components/device-control/RemoveAction.tsx





function RemoveAction(props) {
    const { t } = (0,useTranslation/* useTranslation */.$)(["zigbee", "common"]);
    const { device, removeDevice } = props;
    const [removeParams, setRemoveParams] = (0,react.useState)({ block: false, force: false });
    const { isOpen, toggle } = hooks_useModal(false);
    const checks = [
        { label: t('force_remove'), name: 'force', value: removeParams.force },
        { label: t('block_join'), name: 'block', value: removeParams.block },
    ];
    const onDeviceRemovalParamChange = (e) => {
        const { checked, name } = e.target;
        setRemoveParams({ ...removeParams, ...{ [name]: checked } });
    };
    const onRemoveClick = () => {
        removeDevice(device.friendly_name, removeParams.force, removeParams.block);
        toggle();
    };
    return (react.createElement(react.Fragment, null,
        react.createElement(modal_Modal, { isOpen: isOpen },
            react.createElement(ModalHeader, null,
                react.createElement("h3", null, t('remove_device')),
                react.createElement("small", null, device.friendly_name)),
            react.createElement(ModalBody, null, checks.map(check => {
                const id = `${check.name}${device.ieee_address}`;
                return react.createElement("div", { key: check.name, className: "form-check form-switch" },
                    react.createElement("input", { className: "form-check-input", name: check.name, checked: check.value, type: "checkbox", id: id, onChange: onDeviceRemovalParamChange }),
                    react.createElement("label", { className: "form-check-label", htmlFor: id }, check.label));
            })),
            react.createElement(ModalFooter, null,
                react.createElement("button", { type: "button", className: "btn btn-secondary", onClick: toggle }, t('common:close')),
                react.createElement("button", { type: "button", className: "btn btn-danger", onClick: onRemoveClick }, t('common:delete')))),
        react.createElement("button", { onClick: toggle, className: "btn btn-danger", title: t('remove_device') },
            react.createElement("i", { className: classnames_default()("fa", "fa-trash") }))));
}

;// CONCATENATED MODULE: ./src/components/device-control/DeviceControlGroup.tsx








function DeviceControlGroup(props) {
    const { device, bridgeInfo, configureDevice, renameDevice, removeDevice } = props;
    const { t } = (0,useTranslation/* useTranslation */.$)(["zigbee", "common"]);
    return (react.createElement("div", { className: "btn-group btn-group-sm", role: "group" },
        react.createElement(RenameAction, { device: device, bridgeInfo: bridgeInfo, renameDevice: renameDevice }),
        react.createElement(Button, { className: "btn btn-warning", onClick: configureDevice, item: device.friendly_name, title: t('reconfigure'), promt: true },
            react.createElement("i", { className: classnames_default()("fa", "fa-retweet") })),
        react.createElement(RemoveAction, { device: device, removeDevice: removeDevice })));
}
const DeviceControlGroup_mappedProps = ["bridgeInfo"];
const ConnectedDeviceControlGroup = (0,unistore_react/* connect */.$)(DeviceControlGroup_mappedProps, actions_actions)(DeviceControlGroup);
/* harmony default export */ const device_control_DeviceControlGroup = (ConnectedDeviceControlGroup);

;// CONCATENATED MODULE: ./src/components/device-page/style.css
// extracted by mini-css-extract-plugin
/* harmony default export */ const device_page_style = ({"device-pic":"dkhkRxKNJ4S6dt_C3xCB","small-nav":"Epci4w_rY3KT2zsywx7a"});
// EXTERNAL MODULE: ./node_modules/lodash/get.js
var get = __webpack_require__(7361);
var get_default = /*#__PURE__*/__webpack_require__.n(get);
;// CONCATENATED MODULE: ./src/components/vendor-links/verndor-links.tsx


const normalizeModel = (model) => {
    const find = '[/| |:]';
    const re = new RegExp(find, 'g');
    return model.replace(re, '_');
};
const VendorLink = (props) => {
    const { t } = (0,useTranslation/* useTranslation */.$)("zigbee");
    const { device } = props;
    if (device.supported && device.definition) {
        const url = `https://www.zigbee2mqtt.io/information/supported_devices.html#v=${encodeURIComponent(normalizeModel(device.definition.vendor))}`;
        return react.createElement("a", { target: "_blank", rel: "noopener noreferrer", href: url }, device.definition.vendor);
    }
    return react.createElement(react.Fragment, null, t('unsupported'));
};
const ModelLink = (props) => {
    var _a, _b, _c, _d, _e;
    const { device, anchor } = props;
    let url = 'https://www.zigbee2mqtt.io/how_tos/how_to_support_new_devices.html#how-to-support-new-devices';
    let title = device.model_id;
    if (device.supported && device.definition) {
        const detailsAcnchor = [
            encodeURIComponent((_b = (_a = device.definition) === null || _a === void 0 ? void 0 : _a.vendor) === null || _b === void 0 ? void 0 : _b.toLowerCase()),
            encodeURIComponent((_d = (_c = device.definition) === null || _c === void 0 ? void 0 : _c.model) === null || _d === void 0 ? void 0 : _d.toLowerCase()),
        ].join('-');
        url = `https://www.zigbee2mqtt.io/devices/${encodeURIComponent(normalizeModel((_e = device.definition) === null || _e === void 0 ? void 0 : _e.model))}.html#${encodeURIComponent(normalizeModel(anchor || detailsAcnchor))}`;
        title = device.definition.model;
    }
    return react.createElement("a", { target: "_blank", rel: "noopener noreferrer", href: url }, title);
};
const OTALink = (props) => {
    var _a, _b, _c;
    const { device, anchor } = props;
    let url = '';
    let title = device.software_build_id;
    switch ((_a = device === null || device === void 0 ? void 0 : device.definition) === null || _a === void 0 ? void 0 : _a.vendor) {
        case "IKEA":
            url = `https://ww8.ikea.com/ikeahomesmart/releasenotes/releasenotes.html`;
            break;
        case "Ubisys":
            url = `https://www.ubisys.de/en/support/firmware/changelog-${(_c = (_b = device.definition) === null || _b === void 0 ? void 0 : _b.model) === null || _c === void 0 ? void 0 : _c.replace(/[-]/g, '').toLowerCase()}/`;
            break;
    }
    if (url != '') {
        return react.createElement("a", { target: "_blank", rel: "noopener noreferrer", href: url }, title);
    }
    else {
        return react.createElement(react.Fragment, null, title);
    }
};

;// CONCATENATED MODULE: ./src/components/power-source/style.css
// extracted by mini-css-extract-plugin
/* harmony default export */ const power_source_style = ({"plug":"EspRfhYeipxSh1XjWH3o"});
;// CONCATENATED MODULE: ./src/components/power-source/index.tsx



const powerSourceTypeToTranslationKey = (source) => {
    return source.toLowerCase().replace(/\s/g, '_').replace(/[^a-z0-9_]/g, '');
};
const PowerSource = ({ source, battery, batteryLow, showLevel, ...rest }) => {
    const { t } = (0,useTranslation/* useTranslation */.$)("zigbee");
    let batteryClass = "";
    switch (source) {
        case "Battery":
            let title = t(powerSourceTypeToTranslationKey(source));
            if (batteryLow !== undefined) {
                batteryClass = batteryLow ? `fa-battery-empty animation-blinking text-danger` : 'fa-battery-full text-success';
                title += batteryLow ? ' LOW' : ' OK';
            }
            if (battery !== undefined) {
                if (battery >= 85) {
                    batteryClass += " fa-battery-full";
                }
                else if (battery >= 75) {
                    batteryClass += " fa-battery-three-quarters";
                }
                else if (battery >= 50) {
                    batteryClass += " fa-battery-half";
                }
                else if (battery >= 25) {
                    batteryClass += " fa-battery-quarter";
                }
                else if (battery >= 10) {
                    batteryClass += ` fa-battery-empty animation-blinking`;
                }
                else {
                    return react.createElement("span", { className: `animation-blinking text-danger`, role: "alert" },
                        battery,
                        "%");
                }
            }
            title += `${battery ? (`, ` + t(`power_level`) + ` ${battery}%`) : ""}`;
            if (!batteryClass) {
                batteryClass = "fa-question";
            }
            return react.createElement(react.Fragment, null,
                showLevel ? react.createElement("span", { className: "pe-2" },
                    t('battery'),
                    " ",
                    battery !== undefined ? `${battery}%` : null) : null,
                react.createElement("i", { className: `fa ${batteryClass}`, title: title, ...rest }));
        case "Mains (single phase)":
        case "DC Source":
            return react.createElement("i", { className: `fa fa-plug ${power_source_style.plug}`, title: t(powerSourceTypeToTranslationKey(source)), ...rest });
        default:
            return react.createElement("i", { className: `fa fa-question`, title: source, ...rest });
    }
};
/* harmony default export */ const power_source = (PowerSource);

// EXTERNAL MODULE: ./node_modules/timeago.js/esm/index.js + 6 modules
var esm = __webpack_require__(9327);
;// CONCATENATED MODULE: ./src/components/LastSeen.tsx




function LastSeen(props) {
    const { i18n } = (0,useTranslation/* useTranslation */.$)();
    const { state, lastSeenType } = props;
    const lastSeenDate = lastSeen(state, lastSeenType);
    if (lastSeenDate) {
        return react.createElement(react.Fragment, null, (0,esm/* format */.WU)(lastSeenDate, i18n.language));
    }
    else {
        return react.createElement(react.Fragment, null, "N/A");
    }
}

;// CONCATENATED MODULE: ./src/components/display-value/DisplayValue.tsx



function BooleanValueView(props) {
    const { value, name } = props;
    const { t } = (0,useTranslation/* useTranslation */.$)("values");
    const booleansMap = {
        contact: new Map([
            [true, t('closed')],
            [false, t('open')],
        ]),
        occupancy: new Map([
            [true, t('occupied')],
            [false, t('clear')]
        ]),
        water_leak: new Map([
            [true, react.createElement("span", { className: classnames_default()("text-danger", "animation-blinking"), key: "Leaking" }, t('leaking'))],
            [false, t('clear')]
        ]),
        tamper: new Map([
            [true, react.createElement("span", { className: classnames_default()("text-danger", "animation-blinking"), key: "tampered" }, t('tampered'))],
            [false, t('clear')]
        ]),
        supported: new Map([
            [true, t('supported')],
            [false, t('not_supported')]
        ]),
        _default: new Map([
            [true, t('true')],
            [false, t('false')]
        ])
    };
    const mapValue = booleansMap[name] || booleansMap._default;
    return react.createElement(react.Fragment, null, mapValue.get(value));
}
function DisplayValue(props) {
    const { t } = (0,useTranslation/* useTranslation */.$)("values");
    const { value } = props;
    switch (typeof value) {
        case 'boolean':
            return react.createElement(BooleanValueView, { ...props });
        case "undefined":
            return react.createElement(react.Fragment, null, "N/A");
        case "object":
            return react.createElement(react.Fragment, null, value === null ? t('null') : JSON.stringify(value));
        case "string":
            return react.createElement(react.Fragment, null, value === "" ? react.createElement("small", { className: "text-muted" }, t('empty_string')) : value);
        default:
            return react.createElement(react.Fragment, null, JSON.stringify(value));
    }
}

;// CONCATENATED MODULE: ./src/components/device-page/info.tsx













const markdownLinkRegex = /\[(.*?)\]\((.*?)\)/;
const displayProps = [
    {
        translationKey: 'friendly_name',
        render: (device) => react.createElement("dd", { className: "col-12 col-md-7" },
            react.createElement("strong", null, device.friendly_name)),
    },
    {
        translationKey: 'last_seen',
        render: (device, state, bridgeInfo) => react.createElement("dd", { className: "col-12 col-md-7" },
            react.createElement(LastSeen, { lastSeenType: getLastSeenType(bridgeInfo.config.advanced), state: state })),
    },
    {
        key: 'type',
        translationKey: 'device_type'
    },
    {
        key: 'model_id',
        translationKey: 'zigbee_model'
    },
    {
        key: 'manufacturer',
        translationKey: 'zigbee_manufacturer'
    },
    {
        key: 'definition.description',
        translationKey: 'description',
        if: 'supported',
        render: (device) => {
            var _a, _b;
            const result = markdownLinkRegex.exec((_a = device.definition) === null || _a === void 0 ? void 0 : _a.description);
            let content = react.createElement("span", null, (_b = device.definition) === null || _b === void 0 ? void 0 : _b.description);
            if (result) {
                const [all, title, link] = result;
                content = react.createElement("a", { target: "_blank", rel: "noopener noreferrer", href: link }, title);
            }
            return react.createElement("dd", { className: "col-12 col-md-7" }, content);
        },
    },
    {
        render: (device) => react.createElement("dd", { className: "col-12 col-md-7" },
            react.createElement("p", { className: classnames_default()('mb-0', 'font-weight-bold', { 'text-danger': !device.supported, 'text-success': device.supported }) },
                react.createElement(DisplayValue, { name: "supported", value: device.supported }))),
        translationKey: 'support_status'
    },
    {
        key: 'ieee_address',
        translationKey: 'ieee_address'
    },
    {
        key: 'network_address',
        translationKey: 'network_address',
        render: (device) => react.createElement("dd", { className: "col-12 col-md-7" }, toHex(device.network_address)),
    },
    {
        key: 'date_code',
        translationKey: 'firmware_build_date',
        if: 'date_code'
    },
    {
        key: 'software_build_id',
        translationKey: 'firmware_version',
        if: 'software_build_id'
    },
    {
        key: 'definition.vendor',
        translationKey: 'manufacturer',
        if: 'supported',
        render: (device) => react.createElement("dd", { className: "col-12 col-md-7" },
            react.createElement(VendorLink, { device: device }))
    },
    {
        key: 'definition.model',
        translationKey: 'model',
        if: 'supported',
        render: (device) => react.createElement("dd", { className: "col-12 col-md-7" },
            react.createElement(ModelLink, { device: device }))
    },
    {
        translationKey: 'power',
        render: (device, deviceStatus) => react.createElement("dd", { className: "col-12 col-md-7" },
            react.createElement(power_source, { showLevel: true, source: device.power_source, battery: deviceStatus.battery, batteryLow: deviceStatus.battery_low }))
    },
    {
        translationKey: 'interview_completed',
        render: (device) => react.createElement("dd", { className: "col-12 col-md-7" },
            react.createElement(DisplayValue, { name: "interview_completed", value: device.interview_completed }))
    }
];
class DeviceInfo extends react.Component {
    render() {
        var _a;
        const { device, deviceStates, bridgeInfo, t } = this.props;
        const deviceState = (_a = deviceStates[device.friendly_name]) !== null && _a !== void 0 ? _a : {};
        return (react.createElement(react.Fragment, null,
            react.createElement("div", { className: "d-flex justify-content-center" },
                react.createElement(device_image, { className: `card-img-top w-auto ${device_page_style["device-pic"]}`, device: device, deviceStatus: deviceState })),
            react.createElement("dl", { className: "row" }, displayProps.filter(prop => prop.if === undefined || get_default()(device, prop.if, false)).map(prop => (react.createElement(react.Fragment, { key: prop.translationKey },
                react.createElement("dt", { className: "col-12 col-md-5" }, t(prop.translationKey)),
                prop.render ?
                    prop.render(device, deviceState, bridgeInfo) : react.createElement("dd", { className: "col-12 col-md-7" }, get_default()(device, prop.key)))))),
            react.createElement(device_control_DeviceControlGroup, { device: device, state: deviceState })));
    }
}
const info_mappedProps = ["deviceStates", "bridgeInfo"];
const ConnectedDeviceInfoPage = (0,withTranslation/* withTranslation */.Z)("zigbee")((0,unistore_react/* connect */.$)(info_mappedProps)(DeviceInfo));
/* harmony default export */ const info = (ConnectedDeviceInfoPage);

;// CONCATENATED MODULE: ./src/components/device-picker/index.tsx



function DevicePicker(props) {
    const { t } = (0,useTranslation/* useTranslation */.$)("common");
    const { devices, value, label, onChange, groups = [], ...rest } = props;
    const onSelectHandler = (e) => {
        const { value } = e.target;
        if (devices[value]) {
            onChange(devices[value], "device");
        }
        else {
            const group = groups.find(g => parseInt(value, 10) === g.id);
            onChange(group, "group");
        }
    };
    let options = [react.createElement("option", { key: "hidden", hidden: true }, t('select_device'))];
    const devicesOptions = [];
    Object.values(devices)
        .sort((a, b) => a.friendly_name.localeCompare(b.friendly_name))
        .forEach((device) => {
        var _a;
        devicesOptions.push(react.createElement("option", { title: (_a = device.definition) === null || _a === void 0 ? void 0 : _a.description, key: device.ieee_address, value: device.ieee_address }, getDeviceDisplayName(device)));
    });
    if (groups && groups.length) {
        const groupOptions = groups.map(group => react.createElement("option", { key: group.friendly_name, value: group.id }, group.friendly_name));
        options.push(react.createElement("optgroup", { key: "Groups", label: t('groups') }, groupOptions));
        options.push(react.createElement("optgroup", { key: "Devices", label: t('devices') }, devicesOptions));
    }
    else {
        options = options.concat(devicesOptions);
    }
    return react.createElement("div", { className: "form-group" },
        label && react.createElement("label", { className: "form-label" }, label),
        react.createElement("select", { value: value, onChange: onSelectHandler, className: "form-control", ...rest }, options));
}

;// CONCATENATED MODULE: ./src/components/endpoint-picker/index.tsx


function EndpointPicker(props) {
    const { value, values, disabled, onChange, label, ...rest } = props;
    const { t } = (0,useTranslation/* useTranslation */.$)("common");
    const onSelectHandler = (e) => {
        const { value } = e.target;
        onChange(value);
    };
    const hasOnlyOneEP = values.length == 1;
    const options = values.map(ep => react.createElement("option", { key: ep, value: ep }, ep));
    options.unshift(react.createElement("option", { key: "hidded", hidden: true }, t('select_endpoint')));
    return react.createElement("div", { className: "form-group" },
        label && react.createElement("label", { className: "form-label" }, label),
        react.createElement("select", { disabled: value && hasOnlyOneEP || disabled, value: value, className: "form-control", title: hasOnlyOneEP ? t('the_only_endpoint') : "", onChange: onSelectHandler, ...rest }, options));
}

;// CONCATENATED MODULE: ./src/components/cluster-picker/MultiPicker.tsx



function MultiPicker(props) {
    const [pickerId] = (0,react.useState)(randomString(5));
    const { clusters = [], onChange, label, value, disabled } = props;
    let options = [];
    const onChangeHandler = (e) => {
        const { checked: isChecked, name } = e.target;
        let newVal = [...value];
        if (isChecked) {
            newVal.push(name);
        }
        else {
            newVal = newVal.filter(v => v !== name);
        }
        onChange(newVal);
    };
    if (isClusterGroup(clusters)) {
        console.warn("Not implemented");
    }
    else {
        options = clusters.sort((a, b) => a.localeCompare(b)).map(cluster => {
            var _a;
            return (react.createElement("div", { key: cluster, className: "form-check form-check-inline" },
                react.createElement("input", { className: "form-check-input", type: "checkbox", checked: value.includes(cluster), name: cluster, id: `${pickerId}_${cluster}`, value: cluster, onChange: onChangeHandler, disabled: disabled }),
                react.createElement("label", { className: "form-check-label", htmlFor: `${pickerId}_${cluster}`, title: cluster }, (_a = clusterDescriptions[cluster]) !== null && _a !== void 0 ? _a : cluster)));
        });
    }
    return react.createElement("div", { className: "form-group" },
        label && react.createElement("label", { className: "form-label" }, label),
        react.createElement("div", { className: "form-control border-0" }, options));
}

;// CONCATENATED MODULE: ./src/components/cluster-picker/SinglePicker.tsx




function SinglePicker(props) {
    const [pickerId] = (0,react.useState)(randomString(5));
    const { clusters = [], onChange, value, label, disabled } = props;
    const { t } = (0,useTranslation/* useTranslation */.$)(["zigbee", "common"]);
    const options = [react.createElement("option", { key: "hidden", hidden: true }, t('select_cluster'))];
    const onChangeHandler = (e) => {
        const { value } = e.target;
        onChange(value);
    };
    if (isClusterGroup(clusters)) {
        clusters.forEach(group => {
            const groupOptions = group.clusters.map(cluster => { var _a; return react.createElement("option", { key: cluster, value: cluster }, (_a = clusterDescriptions[cluster]) !== null && _a !== void 0 ? _a : cluster); });
            if (groupOptions.length === 0) {
                groupOptions.push(react.createElement("option", { key: "none", disabled: true }, t('none')));
            }
            options.push(react.createElement("optgroup", { key: group.name, label: group.name }, groupOptions));
        });
    }
    else {
        clusters.forEach(cluster => {
            var _a;
            options.push(react.createElement("option", { key: cluster, value: cluster }, (_a = clusterDescriptions[cluster]) !== null && _a !== void 0 ? _a : cluster));
        });
    }
    return (react.createElement("div", { className: "form-group" },
        label && react.createElement("label", { htmlFor: pickerId, className: "form-label" }, label),
        react.createElement("select", { id: pickerId, value: value, className: "form-select", onChange: onChangeHandler, disabled: disabled }, options)));
}

;// CONCATENATED MODULE: ./src/components/cluster-picker/index.tsx



const clusterDescriptions = {
    genPowerCfg: "PowerCfg",
    genScenes: "Scenes",
    genOnOff: "OnOff",
    genLevelCtrl: "LevelCtrl",
    lightingColorCtrl: "LColorCtrl",
    closuresWindowCovering: "Closures",
    genMultistateInput: "MultistateInput",
    genGroups: "Groups",
    genOta: "Ota",
    touchlink: "Touchlink",
    genIdentify: "Identify",
    msTemperatureMeasurement: "Temperature",
    msIlluminanceMeasurement: "Illuminance",
    msRelativeHumidity: "Humidity",
    msPressureMeasurement: "Pressure",
    msSoilMoisture: "Soil Moisture",
};
var PickerType;
(function (PickerType) {
    PickerType[PickerType["MULTIPLE"] = 0] = "MULTIPLE";
    PickerType[PickerType["SINGLE"] = 1] = "SINGLE";
})(PickerType || (PickerType = {}));
function isClusterGroup(clusters) {
    return clusters.length > 0 && typeof clusters[0] !== 'string';
}
function ClusterPicker(props) {
    const { pickerType, onChange, clusters, value, label, disabled } = props;
    if (pickerType === PickerType.MULTIPLE) {
        return react.createElement(MultiPicker, { onChange: onChange, clusters: clusters, value: value, disabled: disabled, label: label });
    }
    else {
        return react.createElement(SinglePicker, { onChange: onChange, clusters: clusters, value: value, disabled: disabled, label: label });
    }
}

;// CONCATENATED MODULE: ./src/components/device-page/bind-row.tsx







const getTarget = (rule, devices, groups) => {
    var _a;
    if (rule.target.type === "group") {
        return groups.find(g => g.id === rule.target.id);
    }
    return devices[(_a = rule.target) === null || _a === void 0 ? void 0 : _a.ieee_address];
};
class BindRow extends react.Component {
    constructor() {
        super(...arguments);
        this.state = {
            stateRule: {}
        };
        this.setSourceEp = (sourceEp) => {
            const { stateRule } = this.state;
            stateRule.source.endpoint = sourceEp;
            this.setState({ stateRule });
        };
        this.setDestination = (destination, type) => {
            const { stateRule } = this.state;
            if (type === "device") {
                const endpoints = getEndpoints(destination);
                stateRule.target['ieee_address'] = destination['ieee_address'];
                stateRule.target.type = "endpoint";
                stateRule.target.endpoint = endpoints[0];
                delete stateRule.target.id;
            }
            else if (type === "group") {
                stateRule.target.id = destination.id;
                stateRule.target.type = "group";
                delete stateRule.target.ieee_address;
            }
            stateRule.clusters = [];
            this.setState({ stateRule });
        };
        this.setDestinationEp = (destinationEp) => {
            const { stateRule } = this.state;
            stateRule.target.endpoint = destinationEp;
            stateRule.clusters = [];
            this.setState({ stateRule });
        };
        this.setClusters = (clusters) => {
            const { stateRule } = this.state;
            stateRule.clusters = clusters;
            this.setState({ stateRule });
        };
        this.onBindOrUnBindClick = (action) => {
            const { onUnBind, onBind } = this.props;
            const { from, to, clusters } = this.getBidningParams();
            if (action == "Bind") {
                onBind({ from, to, clusters });
            }
            else {
                onUnBind({ from, to, clusters });
            }
        };
    }
    static getDerivedStateFromProps(props, state) {
        const { rule } = props;
        return {
            stateRule: rule
        };
    }
    getBidningParams() {
        var _a;
        const { device, groups, devices } = this.props;
        const { stateRule } = this.state;
        const from = `${device.friendly_name}/${stateRule.source.endpoint}`;
        let to = "";
        if (stateRule.target.type === "group") {
            const targetGroup = groups.find(group => group.id === stateRule.target.id);
            to = `${targetGroup.friendly_name}`;
        }
        else if (stateRule.target.type === "endpoint") {
            const targeDevice = devices[(_a = stateRule.target) === null || _a === void 0 ? void 0 : _a.ieee_address];
            if (targeDevice.type === "Coordinator") {
                to = `${targeDevice.friendly_name}`;
            }
            else {
                to = `${targeDevice.friendly_name}/${stateRule.target.endpoint}`;
            }
        }
        return { from, to, clusters: stateRule.clusters };
    }
    isValidRule() {
        const { stateRule } = this.state;
        let valid;
        if (stateRule.target.type == "endpoint") {
            valid = stateRule.source.endpoint
                && stateRule.target.ieee_address
                && stateRule.target.endpoint
                && stateRule.clusters.length > 0;
        }
        else if (stateRule.target.type == "group") {
            valid = stateRule.source.endpoint
                && stateRule.target.id
                && stateRule.clusters.length > 0;
        }
        return !!valid;
    }
    render() {
        const { devices, groups, device, t } = this.props;
        const { stateRule } = this.state;
        const sourceEndpoints = getEndpoints(device);
        const target = getTarget(stateRule, devices, groups);
        const destinationEndpoints = getEndpoints(target);
        const possibleClusters = new Set(stateRule.clusters);
        const destEndpoint = device.endpoints[stateRule.source.endpoint];
        if (destEndpoint) {
            destEndpoint.clusters.output.forEach(cluster => possibleClusters.add(cluster));
        }
        return (react.createElement("div", { className: "row pb-2 border-bottom" },
            react.createElement("div", { className: "col-md-2" },
                react.createElement(EndpointPicker, { label: t('source_endpoint'), disabled: !stateRule.isNew, values: sourceEndpoints, value: stateRule.source.endpoint, onChange: this.setSourceEp })),
            react.createElement("div", { className: "col-md-2" },
                react.createElement(DevicePicker, { label: t('destination'), disabled: !stateRule.isNew, value: (stateRule.target.ieee_address || stateRule.target.id), devices: devices, groups: groups, onChange: this.setDestination })),
            react.createElement("div", { className: "col-md-2" }, stateRule.target.type === "endpoint" ? react.createElement(EndpointPicker, { label: 'destination_endpoint', disabled: !stateRule.isNew, values: destinationEndpoints, value: stateRule.target.endpoint, onChange: this.setDestinationEp }) : null),
            react.createElement("div", { className: "col-md-4" },
                react.createElement(ClusterPicker, { label: t('clusters'), pickerType: PickerType.MULTIPLE, clusters: Array.from(possibleClusters), value: stateRule.clusters, onChange: this.setClusters })),
            react.createElement("div", { className: "col-md-2" },
                react.createElement("div", { className: "form-group" },
                    react.createElement("label", { className: "form-label" }, "Actions"),
                    react.createElement("div", { className: "form-control border-0" },
                        react.createElement("div", { className: "btn-group btn-group-sm" },
                            react.createElement(Button, { item: "Bind", disabled: !this.isValidRule(), title: t('bind'), className: "btn btn-primary", onClick: this.onBindOrUnBindClick },
                                t('bind'),
                                "\u00A0",
                                react.createElement("i", { className: "fa fa-heart" })),
                            react.createElement(Button, { item: "Unbind", disabled: !stateRule.isNew && !this.isValidRule(), title: t('unbind'), className: "btn btn-danger", onClick: this.onBindOrUnBindClick },
                                react.createElement("i", { className: "fa fa-heart-broken" }),
                                "\u00A0",
                                t('unbind'))))))));
    }
}
/* harmony default export */ const bind_row = ((0,withTranslation/* withTranslation */.Z)(["common", "zigbee"])(BindRow));

;// CONCATENATED MODULE: ./src/components/device-page/bind.tsx




const rule2key = (rule) => `${rule.source.endpoint}-${rule.isNew}${rule.source.ieee_address}-${rule.target.id}-${rule.target.ieee_address}-${rule.clusters.join('-')}`;
const convertBidningsIntoNiceStructure = (device) => {
    const bindings = {};
    Object.entries(device.endpoints).forEach(([endpoint, description]) => {
        description.bindings
            .forEach(b => {
            var _a;
            let targetId = (_a = b.target.id) !== null && _a !== void 0 ? _a : `${b.target.ieee_address}-${b.target.endpoint}`;
            targetId = `${targetId}-${endpoint}`;
            if (bindings[targetId]) {
                bindings[targetId].clusters.push(b.cluster);
            }
            else {
                bindings[targetId] = {
                    source: {
                        ieee_address: device.ieee_address,
                        endpoint
                    },
                    target: b.target,
                    clusters: [b.cluster]
                };
            }
        });
    });
    return Object.values(bindings);
};
function Bind(props) {
    const { device, devices, groups, removeBind, addBind } = props;
    const [newBindingRule, setnewBindingRule] = (0,react.useState)({ isNew: Date.now(), target: {}, source: { 'ieee_address': device.ieee_address, endpoint: "" }, clusters: [] });
    const bidingRules = convertBidningsIntoNiceStructure(device);
    return react.createElement("div", { className: "container-fluid" }, [...bidingRules, newBindingRule]
        .map((rule, idx) => react.createElement(bind_row, { key: rule2key(rule), rule: rule, groups: groups, onUnBind: removeBind, onBind: addBind, device: device, idx: idx, devices: devices })));
}
const bind_mappedProps = ["devices", "groups"];
const ConnectedBindPage = (0,unistore_react/* connect */.$)(bind_mappedProps, actions_actions)(Bind);
/* harmony default export */ const bind = (ConnectedBindPage);

// EXTERNAL MODULE: ./node_modules/zigbee-herdsman/dist/zcl/definition/cluster.js
var definition_cluster = __webpack_require__(3056);
var cluster_default = /*#__PURE__*/__webpack_require__.n(definition_cluster);
;// CONCATENATED MODULE: ./src/components/attribute-picker/index.tsx



function AttributePicker(props) {
    const { cluster, onChange, label, value, ...rest } = props;
    const { t } = (0,useTranslation/* useTranslation */.$)("zigbee");
    const onChangeHandler = (e) => {
        const { value } = e.target;
        const currentCluster = (cluster_default())[cluster];
        const attributeInfo = currentCluster.attributes[value];
        onChange(value, attributeInfo);
    };
    let attrs = [];
    const clusterDefinition = (cluster_default())[cluster];
    if (clusterDefinition) {
        attrs = Object.keys(clusterDefinition.attributes);
    }
    if (value !== undefined && !attrs.includes(value)) {
        attrs.push(value);
    }
    const options = attrs.map(attr => react.createElement("option", { key: attr, value: attr }, attr));
    options.unshift(react.createElement("option", { key: "none", hidden: true }, t('select_attribute')));
    return (react.createElement("div", { className: "form-group" },
        label && react.createElement("label", { className: "form-label" }, label),
        react.createElement("select", { disabled: attrs.length === 0, className: "form-control", onChange: onChangeHandler, value: value, ...rest }, options)));
}

;// CONCATENATED MODULE: ./src/components/device-page/reporting-row.tsx








const getClusters = (device, endpoint, currentCluster) => {
    let possibleClusters = Object.keys((cluster_default()));
    let availableClusters = [];
    const ep = device.endpoints[endpoint];
    if (ep) {
        availableClusters = availableClusters.concat(ep.clusters.output);
        possibleClusters = possibleClusters.filter(cluster => !availableClusters.includes(cluster));
    }
    if (currentCluster && !availableClusters.includes(currentCluster)) {
        availableClusters.push(currentCluster);
    }
    return [
        {
            name: 'Avaliable',
            clusters: availableClusters
        },
        {
            name: 'Possible',
            clusters: possibleClusters
        }
    ];
};
const requiredRuleFileds = ['maximum_report_interval', 'minimum_report_interval', 'reportable_change', 'endpoint', 'cluster', 'attribute'];
const isValidRule = (rule) => {
    return requiredRuleFileds.every(field => rule[field] !== undefined);
};
const FormGroupInput = (props) => {
    const { onChange, label, value, name } = props;
    return react.createElement("div", { className: "form-group" },
        react.createElement("label", { className: "form-label text-nowrap" }, label),
        react.createElement("input", { onChange: onChange, value: value, required: true, type: "number", name: name, className: "form-control" }));
};
class ReportingRow extends react.Component {
    constructor() {
        super(...arguments);
        this.state = {
            stateRule: {}
        };
        this.setSourceEp = (sourceEp) => {
            const { stateRule } = this.state;
            stateRule.endpoint = sourceEp;
            this.setState({ stateRule });
        };
        this.setCluster = (cluster) => {
            const { stateRule } = this.state;
            stateRule.cluster = cluster;
            this.setState({ stateRule });
        };
        this.setAttribute = (attr) => {
            const { stateRule } = this.state;
            stateRule.attribute = attr;
            this.setState({ stateRule });
        };
        this.changeHandler = (event) => {
            const { stateRule } = this.state;
            const { name, value } = event.target;
            stateRule[name] = value;
            this.setState({ stateRule });
        };
        this.applyRule = () => {
            const { onApply } = this.props;
            const { stateRule } = this.state;
            onApply(stateRule);
        };
        this.disableRule = () => {
            const { onApply } = this.props;
            const { stateRule } = this.state;
            onApply({ ...stateRule, maximum_report_interval: 0xFFFF });
        };
    }
    static getDerivedStateFromProps(props, state) {
        const { rule } = props;
        return {
            stateRule: rule
        };
    }
    render() {
        const { rule, device, t } = this.props;
        const { stateRule } = this.state;
        const sourceEndpoints = getEndpoints(device);
        return (react.createElement("div", { className: "row pb-2 border-bottom" },
            react.createElement("div", { className: "col-md-2" },
                react.createElement(EndpointPicker, { label: t('endpoint'), disabled: !rule.isNew, values: sourceEndpoints, value: stateRule.endpoint, onChange: this.setSourceEp })),
            react.createElement("div", { className: "col-md-2" },
                react.createElement(ClusterPicker, { label: t('cluster'), disabled: !stateRule.endpoint, pickerType: PickerType.SINGLE, clusters: getClusters(device, stateRule.endpoint, stateRule.cluster), value: stateRule.cluster, onChange: this.setCluster })),
            react.createElement("div", { className: "col-md-2" },
                react.createElement(AttributePicker, { label: t('attribute'), disabled: !stateRule.cluster, value: stateRule.attribute, cluster: stateRule.cluster, onChange: this.setAttribute })),
            react.createElement("div", { className: "col-md-2" },
                react.createElement(FormGroupInput, { onChange: this.changeHandler, value: stateRule.minimum_report_interval, name: "minimum_report_interval", label: t('min_rep_interval') })),
            react.createElement("div", { className: "col-md-1" },
                react.createElement(FormGroupInput, { onChange: this.changeHandler, value: stateRule.maximum_report_interval, name: "maximum_report_interval", label: t('max_rep_interval') })),
            react.createElement("div", { className: "col-md-1" },
                react.createElement("div", { className: "form-group" },
                    react.createElement("label", { className: "form-label text-nowrap" }, t('min_rep_change')),
                    react.createElement("input", { onChange: this.changeHandler, value: stateRule.reportable_change, required: true, type: "number", name: "reportable_change", className: "form-control" }))),
            react.createElement("div", { className: "col-md-2" },
                react.createElement("div", { className: "form-group" },
                    react.createElement("label", { className: "form-label" }, t('actions')),
                    react.createElement("div", { className: "form-group" },
                        react.createElement("div", { className: "btn-group", role: "group", "aria-label": "Basic example" },
                            react.createElement(Button, { disabled: !isValidRule(stateRule), className: "btn btn-primary", onClick: this.applyRule }, t('common:apply')),
                            !stateRule.isNew ? react.createElement(Button, { promt: true, className: "btn btn-danger", onClick: this.disableRule }, t('common:disable')) : null))))));
    }
}
/* harmony default export */ const reporting_row = ((0,withTranslation/* withTranslation */.Z)(["zigbee", "common"])(ReportingRow));

;// CONCATENATED MODULE: ./src/components/device-page/reporting.tsx




const reporting_convertBidningsIntoNiceStructure = (device) => {
    const reportings = [];
    Object.entries(device.endpoints).forEach(([endpoint, description]) => {
        description.configured_reportings
            .forEach(reportingRule => {
            reportings.push({
                ...reportingRule,
                endpoint
            });
        });
    });
    return reportings;
};
const reporting_rule2key = (rule) => `${rule.isNew}${rule.endpoint}${rule.cluster}-${rule.attribute}`;
function Reporting(props) {
    const { configureReport, device } = props;
    const [newReportingRule, setnewReportingRule] = (0,react.useState)({ isNew: Date.now(), reportable_change: 0, minimum_report_interval: 60, maximum_report_interval: 3600, endpoint: "", cluster: "", attribute: "" });
    const onApply = (rule) => {
        const { cluster, endpoint, attribute, minimum_report_interval, maximum_report_interval, reportable_change } = rule;
        configureReport(`${device.friendly_name}/${endpoint}`, {
            cluster, attribute, minimum_report_interval, maximum_report_interval, reportable_change
        });
    };
    const reportingRules = reporting_convertBidningsIntoNiceStructure(device);
    return (react.createElement("div", { className: "container-fluid" }, [...reportingRules, newReportingRule].map((rule) => react.createElement(reporting_row, { key: reporting_rule2key(rule), rule: rule, device: device, onApply: onApply }))));
}
const reporting_mappedProps = ["devices", "groups"];
const ConnectedReportingPage = (0,unistore_react/* connect */.$)(reporting_mappedProps, actions_actions)(Reporting);
/* harmony default export */ const reporting = (ConnectedReportingPage);

;// CONCATENATED MODULE: ./src/components/device-page/states.tsx



class States extends react.Component {
    constructor() {
        super(...arguments);
        this.setStateValue = (name, value) => {
            const { setStateValue, device } = this.props;
            setStateValue(device.friendly_name, name, value);
        };
    }
    render() {
        var _a;
        const { device, deviceStates } = this.props;
        const deviceState = (_a = deviceStates[device.friendly_name]) !== null && _a !== void 0 ? _a : {};
        return react.createElement("pre", null, JSON.stringify(deviceState, null, 4));
    }
}
const states_mappedProps = ["deviceStates"];
const ConnectedDeviceStates = (0,unistore_react/* connect */.$)(states_mappedProps, actions_actions)(States);
/* harmony default export */ const states = (ConnectedDeviceStates);

;// CONCATENATED MODULE: ./src/components/device-page/type-guards.ts
function isBinaryFeature(feature) {
    return feature.type === "binary";
}
function isNumericFeature(feature) {
    return feature.type === "numeric";
}
function isTextualFeature(feature) {
    return feature.type === "text";
}
function isEnumFeature(feature) {
    return feature.type === "enum";
}
function isLightFeature(feature) {
    return feature.type === "light";
}
function isSwitchFeature(feature) {
    return feature.type === "switch";
}
function isCoverFeature(feature) {
    return feature.type === "cover";
}
function isLockFeature(feature) {
    return feature.type === "lock";
}
function isFanFeature(feature) {
    return feature.type === "fan";
}
function isCompositeFeature(feature) {
    return feature.type === "composite" && (feature.name !== "color_xy" && feature.name !== "color_hs");
}
function isColorFeature(feature) {
    return feature.type === "composite" && (feature.name == "color_xy" || feature.name == "color_hs");
}
function isClimateFeature(feature) {
    return feature.type === "climate";
}

// EXTERNAL MODULE: ./node_modules/lodash/groupBy.js
var groupBy = __webpack_require__(7739);
var groupBy_default = /*#__PURE__*/__webpack_require__.n(groupBy);
;// CONCATENATED MODULE: ./src/types.ts
var FeatureAccessMode;
(function (FeatureAccessMode) {
    FeatureAccessMode[FeatureAccessMode["NONE"] = 0] = "NONE";
    FeatureAccessMode[FeatureAccessMode["ACCESS_STATE"] = 1] = "ACCESS_STATE";
    FeatureAccessMode[FeatureAccessMode["ACCESS_WRITE"] = 2] = "ACCESS_WRITE";
    FeatureAccessMode[FeatureAccessMode["ACCESS_READ"] = 4] = "ACCESS_READ";
})(FeatureAccessMode || (FeatureAccessMode = {}));

;// CONCATENATED MODULE: ./src/components/toggle/index.tsx



const ControlButton = (props) => {
    const { value, onClick, name } = props;
    return react.createElement(Button, { className: "btn btn-link", item: value, onClick: onClick },
        react.createElement(DisplayValue, { value: value, name: name }));
};
const Toggle = (props) => {
    const { onChange, value, valueOn, valueOff, minimal, name } = props;
    const onCheckboxChange = (e) => onChange(e.target.checked ? valueOn : valueOff);
    const valueExists = value !== undefined && value !== null;
    const showOnOffButtons = !minimal || (minimal && !valueExists);
    return (react.createElement("div", null,
        showOnOffButtons && react.createElement(ControlButton, { value: valueOff, name: name, onClick: onChange }),
        valueExists ? (react.createElement("div", { className: "form-check form-switch form-check-inline align-middle me-0" },
            react.createElement("input", { className: "form-check-input", type: "checkbox", checked: value === valueOn, onChange: onCheckboxChange }))) : react.createElement("i", { className: "fa fa-question", title: "Current value unknown" }),
        showOnOffButtons && react.createElement(ControlButton, { value: valueOn, name: name, onClick: onChange })));
};
/* harmony default export */ const toggle = (Toggle);

;// CONCATENATED MODULE: ./src/components/features/base.tsx


const BaseViewer = (props) => {
    const { feature: { property, unit, name }, deviceState } = props;
    return react.createElement("div", null,
        react.createElement("strong", null,
            react.createElement(DisplayValue, { value: deviceState[property], name: name })),
        unit ? react.createElement("small", { className: "text-muted ms-1" }, unit) : null);
};
const NoAccessError = ({ feature: { access } }) => react.createElement("div", { className: "alert alert-warning p-0", role: "alert" },
    "Unknown acces ",
    JSON.stringify(access, null, 4));

;// CONCATENATED MODULE: ./src/components/features/binary/binary.tsx




const Binary = (props) => {
    const { feature: { access = FeatureAccessMode.ACCESS_WRITE, endpoint, name, property, value_off: valueOff, value_on: valueOn }, deviceState, onChange, minimal } = props;
    if (access & FeatureAccessMode.ACCESS_WRITE) {
        return react.createElement(toggle, { onChange: (value) => onChange(endpoint, { [property]: value }), value: deviceState[property], valueOn: valueOn, valueOff: valueOff, minimal: minimal, name: name });
    }
    else if (access & FeatureAccessMode.ACCESS_STATE) {
        return react.createElement(BaseViewer, { ...props });
    }
    else {
        return react.createElement(NoAccessError, { ...props });
    }
};
/* harmony default export */ const binary = (Binary);

;// CONCATENATED MODULE: ./src/components/features/climate/climate.tsx


const Climate = (props) => react.createElement(composite, { type: "climate", ...props });
/* harmony default export */ const climate = (Climate);

;// CONCATENATED MODULE: ./src/components/features/cover/cover.tsx


const stepsConfiguration = {
    position: [0, 25, 50, 75, 100].map(item => ({ value: item, name: item + '' })),
    tilt: [0, 25, 50, 75, 100].map(item => ({ value: item, name: item + '' }))
};
const Cover = (props) => react.createElement(composite, { type: "cover", ...props, stepsConfiguration: stepsConfiguration });
/* harmony default export */ const cover = (Cover);

// EXTERNAL MODULE: ./node_modules/color-convert/index.js
var color_convert = __webpack_require__(2085);
;// CONCATENATED MODULE: ./src/components/color-editor/color-editor.tsx



const toRGB = (source, sourceFormat) => {
    switch (sourceFormat) {
        case "color_xy":
            {
                const { x = 0, y = 0 } = source;
                const z = 1.0 - x - y;
                const Y = 1;
                const X = (Y / y) * x;
                const Z = (Y / y) * z;
                return '#' + color_convert.xyz.hex([X * 100.0, Y * 100.0, Z * 100.0]);
            }
        case "color_hs":
            {
                const { hue = 0, saturation = 0 } = source;
                return '#' + color_convert.hsv.hex([hue, saturation, 100]);
            }
        default:
            return '#FFFFFF';
    }
};
const rgbToTargetFormat = (source, targetFormat) => {
    switch (targetFormat) {
        case "color_hs":
            const [hue, saturation, v] = color_convert.hex.hsv(source);
            return { hue, saturation };
        case "color_xy":
            const [X, Y, Z] = color_convert.hex.xyz(source);
            const x = X / (X + Y + Z);
            const y = Y / (X + Y + Z);
            return { x, y };
        default:
            return { hex: source };
    }
};
const pridePallete = ['#FF0018', '#FFA52C', '#FFFF41', '#008018', '#0000F9', '#86007D'];
const ColorEditor = (props) => {
    const { onChange, value = {}, format, steps = pridePallete, minimal, ...rest } = props;
    const [currentColor, setCurrentColor] = (0,react.useState)(toRGB(value, format));
    (0,react.useEffect)(() => {
        setCurrentColor(toRGB(value, format));
    }, [value, format]);
    return react.createElement(react.Fragment, null,
        !minimal && react.createElement("div", { className: "btn-group me-2 float-start" }, steps.map(step => react.createElement(Button, { className: "btn", style: { backgroundColor: step }, key: step, item: step, title: step, onClick: (item) => onChange(rgbToTargetFormat(item, format)) }, "\u00A0\u00A0\u00A0"))),
        react.createElement("input", { type: "color", className: "form-control form-control-color", value: currentColor, style: { minWidth: 40 }, onChange: e => {
                if (e.target.value.toLowerCase() !== currentColor.toLowerCase()) {
                    onChange(rgbToTargetFormat(e.target.value, format));
                }
            }, ...rest }));
};
/* harmony default export */ const color_editor = (ColorEditor);

;// CONCATENATED MODULE: ./src/components/features/composite/color/color.tsx


const Light = (props) => {
    var _a, _b;
    const { deviceState, feature, onChange, minimal } = props;
    const value = {};
    for (const innerFeature of feature.features) {
        value[innerFeature.name] = (_b = (_a = deviceState[feature.property]) === null || _a === void 0 ? void 0 : _a[innerFeature.property]) !== null && _b !== void 0 ? _b : 0;
    }
    return react.createElement(color_editor, { onChange: (color) => onChange(feature.endpoint, { color }), value: value, format: feature.name, minimal: minimal });
};
/* harmony default export */ const color = (Light);

;// CONCATENATED MODULE: ./src/components/enum-editor/enum-editor.tsx



function isPrimitive(step) {
    return step === null || ["number", "string", "undefined"].includes(typeof step);
}
const EnumEditor = (props) => {
    const { onChange, values, value, minimal } = props;
    if (minimal) {
        const onSelectChange = (e) => {
            const selectedValue = values.find(v => isPrimitive(v) ? v == e.target.value : v.value == e.target.value);
            onChange(selectedValue);
        };
        return react.createElement("select", { className: "form-control", onChange: onSelectChange, value: isPrimitive(value) ? value : value.value },
            react.createElement("option", { key: "hidded", hidden: true }, "----"),
            values.map(v => react.createElement("option", { key: isPrimitive(v) ? v : v.name, value: isPrimitive(v) ? v : v.value }, isPrimitive(v) ? v : v.name)));
    }
    return react.createElement("div", { className: "btn-group me-2" }, values.map(v => react.createElement(Button, { className: classnames_default()("btn btn-outline-secondary", { active: isPrimitive(v) ? v === value : v.value == (isPrimitive(value) ? value : value.value) }), onClick: item => onChange(item), key: isPrimitive(v) ? v : v.name, item: isPrimitive(v) ? v : v.value, title: isPrimitive(v) ? v : v.description }, isPrimitive(v) ? v : v.name)));
};
/* harmony default export */ const enum_editor = (EnumEditor);

;// CONCATENATED MODULE: ./src/components/features/enum/enum.tsx




const VERY_BIG_ENUM_SIZE = 4;
const Enum = (props) => {
    const { onChange, feature: { access = FeatureAccessMode.ACCESS_WRITE, name, values, endpoint, property }, deviceState, minimal } = props;
    const thisIsVeryBigEnumeration = values.length > VERY_BIG_ENUM_SIZE;
    if (access & FeatureAccessMode.ACCESS_WRITE) {
        return react.createElement(enum_editor, { onChange: (value) => onChange(endpoint, { [name]: value }), values: values, value: deviceState[property], minimal: minimal || thisIsVeryBigEnumeration });
    }
    else if (access & FeatureAccessMode.ACCESS_STATE) {
        return react.createElement(BaseViewer, { ...props });
    }
    else {
        return react.createElement(NoAccessError, { ...props });
    }
};
/* harmony default export */ const enum_enum = (Enum);

;// CONCATENATED MODULE: ./src/components/features/light/light.tsx



const light_stepsConfiguration = {
    brightness: [0, 25, 50, 75, 100].map(item => ({ value: scale(item, [0, 100], [0, 255]), name: item + '%' })),
    'color_temp': [1000, 2000, 3000, 4000, 5000, 6500].map(kelvin => ({ value: 1000000.0 / kelvin, name: kelvin + 'K' }))
};
const light_Light = (props) => react.createElement(composite, { type: "light", ...props, stepsConfiguration: light_stepsConfiguration });
/* harmony default export */ const light = (light_Light);

;// CONCATENATED MODULE: ./src/components/features/lock/lock.tsx


const Lock = (props) => react.createElement(composite, { type: "lock", ...props });
/* harmony default export */ const lock = (Lock);

;// CONCATENATED MODULE: ./src/components/range-editor/range-editor.tsx




const RangeEditor = (props) => {
    const { onChange, value, min, max, unit, steps, minimal, ...rest } = props;
    const [id, setId] = (0,react.useState)(randomString(5));
    const [currentValue, setCurrentValue] = (0,react.useState)(value);
    (0,react.useEffect)(() => {
        setCurrentValue(value);
    }, [value]);
    const showRange = min !== undefined && max !== undefined;
    return react.createElement("div", { className: "input-group align-items-center" },
        !minimal && steps ? react.createElement(enum_editor, { values: steps, onChange: onChange, value: currentValue }) : null,
        showRange ? react.createElement("input", { id: id, min: min, max: max, step: 1, type: "range", className: "form-range form-control border-0", value: currentValue, onChange: e => setCurrentValue(e.target.valueAsNumber), onTouchEnd: (() => onChange(currentValue)), onMouseUp: (() => onChange(currentValue)), ...rest }) : null,
        (!minimal || !showRange) && react.createElement("input", { type: "number", className: classnames_default()("form-control", { 'ms-1': showRange }), value: currentValue, onChange: e => setCurrentValue(e.target.valueAsNumber), onBlur: () => onChange(currentValue), min: min, max: max, ...rest, style: showRange ? { 'maxWidth': '100px' } : {} }),
        (!minimal && unit) ? react.createElement("span", { className: "input-group-text", style: { 'minWidth': '66px' } }, unit) : null);
};
/* harmony default export */ const range_editor = (RangeEditor);

;// CONCATENATED MODULE: ./src/components/features/numeric/numeric.tsx




const Numeric = (props) => {
    var _a;
    const { feature: { presets, access = FeatureAccessMode.ACCESS_WRITE, endpoint, name, property, unit, value_max: valueMax, value_min: valueMin }, deviceState, steps, onChange, minimal } = props;
    if (access & FeatureAccessMode.ACCESS_WRITE) {
        return react.createElement(range_editor, { onChange: (value) => onChange(endpoint, { [name]: value }), value: (_a = deviceState[property]) !== null && _a !== void 0 ? _a : 0, min: valueMin, max: valueMax, steps: presets && presets.length ? presets : steps, unit: unit, minimal: minimal });
    }
    else if (access & FeatureAccessMode.ACCESS_STATE) {
        return react.createElement(BaseViewer, { ...props });
    }
    else {
        return react.createElement(NoAccessError, { ...props });
    }
};
/* harmony default export */ const numeric = (Numeric);

;// CONCATENATED MODULE: ./src/components/textual-editor/textual-editor.tsx

const TextualEditor = (props) => {
    const { onChange, value, unit, ...rest } = props;
    const [currentValue, setCurrentValue] = (0,react.useState)(value);
    (0,react.useEffect)(() => {
        setCurrentValue(value);
    }, [value]);
    return react.createElement(react.Fragment, null,
        react.createElement("input", { type: "text", className: "form-control", value: currentValue, onChange: e => setCurrentValue(e.target.value), onBlur: () => onChange(currentValue), ...rest }),
        unit ? react.createElement("span", { className: "input-group-text", style: { 'minWidth': '66px' } }, unit) : null);
};
/* harmony default export */ const textual_editor = (TextualEditor);

;// CONCATENATED MODULE: ./src/components/features/textual/textual.tsx




const Textual = (props) => {
    var _a;
    const { feature: { access = FeatureAccessMode.ACCESS_WRITE, endpoint, name, property }, deviceState, onChange } = props;
    if (access & FeatureAccessMode.ACCESS_WRITE) {
        return react.createElement(textual_editor, { onChange: (value) => onChange(endpoint, { [name]: value }), value: (_a = deviceState[property]) !== null && _a !== void 0 ? _a : "" });
    }
    else if (access & FeatureAccessMode.ACCESS_STATE) {
        return react.createElement(BaseViewer, { ...props });
    }
    else {
        return react.createElement(NoAccessError, { ...props });
    }
};
/* harmony default export */ const textual = (Textual);

;// CONCATENATED MODULE: ./src/components/features/switch/switch.tsx


const Switch = (props) => react.createElement(composite, { type: "switch", ...props });
/* harmony default export */ const switch_switch = (Switch);

;// CONCATENATED MODULE: ./src/components/features/fan/fan.tsx


const Fan = (props) => react.createElement(composite, { type: "fan", ...props });
/* harmony default export */ const fan = (Fan);

;// CONCATENATED MODULE: ./src/components/features/composite/Feature.tsx














const Feature = (props) => {
    const { feature, device, deviceState, stepsConfiguration, onRead, onChange, featureWrapperClass: FeatureWrapper, minimal } = props;
    const genericParams = { key: JSON.stringify(feature), device, deviceState, onChange, onRead, featureWrapperClass: FeatureWrapper, minimal };
    const wrapperParams = { key: JSON.stringify(feature), feature, onRead, deviceState };
    if (isBinaryFeature(feature)) {
        return react.createElement(FeatureWrapper, { ...wrapperParams },
            react.createElement(binary, { feature: feature, ...genericParams }));
    }
    else if (isNumericFeature(feature)) {
        return react.createElement(FeatureWrapper, { ...wrapperParams },
            react.createElement(numeric, { feature: feature, ...genericParams, steps: stepsConfiguration === null || stepsConfiguration === void 0 ? void 0 : stepsConfiguration[feature.name] }));
    }
    else if (isTextualFeature(feature)) {
        return react.createElement(FeatureWrapper, { ...wrapperParams },
            react.createElement(textual, { feature: feature, ...genericParams }));
    }
    else if (isEnumFeature(feature)) {
        return react.createElement(FeatureWrapper, { ...wrapperParams },
            react.createElement(enum_enum, { feature: feature, ...genericParams }));
    }
    else if (isLightFeature(feature)) {
        return react.createElement(light, { feature: feature, ...genericParams });
    }
    else if (isSwitchFeature(feature)) {
        return react.createElement(switch_switch, { feature: feature, ...genericParams });
    }
    else if (isCoverFeature(feature)) {
        return react.createElement(cover, { feature: feature, ...genericParams });
    }
    else if (isLockFeature(feature)) {
        return react.createElement(lock, { feature: feature, ...genericParams });
    }
    else if (isColorFeature(feature)) {
        return react.createElement(FeatureWrapper, { ...wrapperParams },
            react.createElement(color, { feature: feature, ...genericParams }));
    }
    else if (isClimateFeature(feature)) {
        return react.createElement(climate, { feature: feature, ...genericParams });
    }
    else if (isFanFeature(feature)) {
        return react.createElement(fan, { feature: feature, ...genericParams });
    }
    else if (isCompositeFeature(feature)) {
        return react.createElement(FeatureWrapper, { ...wrapperParams },
            react.createElement(composite, { type: "composite", feature: feature, ...genericParams }));
    }
    return (react.createElement(FeatureWrapper, { ...wrapperParams },
        react.createElement("pre", null, JSON.stringify(feature, null, 4))));
};

;// CONCATENATED MODULE: ./src/components/features/composite/composite.tsx







class Composite extends react.Component {
    constructor() {
        super(...arguments);
        this.state = {};
        this.onChange = (endpoint, value) => {
            const { onChange, feature } = this.props;
            if (isCompositeFeature(feature)) {
                const { features = [] } = feature;
                const isOnlyOneFeature = features.length == 1;
                this.setState(value, () => {
                    if (isOnlyOneFeature) {
                        this.onCompositeFeatureApply();
                    }
                });
            }
            else {
                onChange(endpoint, value);
            }
        };
        this.onCompositeFeatureApply = () => {
            const { onChange, feature: { endpoint, property } } = this.props;
            onChange(endpoint, property ? { [property]: this.state } : this.state);
        };
        this.onRead = (endpoint, property) => {
            const { onRead, feature } = this.props;
            if (isCompositeFeature(feature)) {
                onRead(endpoint, { [feature.property]: property });
            }
            else {
                onRead(endpoint, property);
            }
        };
    }
    render() {
        const MAGIC_NO_ENDPOINT = 'MAGIC_NO_ENDPOINT';
        const { t, showEndpointLabels = false, feature, device, deviceState, onRead: _onRead, onChange: _onChange, featureWrapperClass, minimal } = this.props;
        const { features = [] } = feature;
        const isThisACompositeFeature = isCompositeFeature(feature);
        const isMoreThanOneFeature = features.length > 1;
        const doGroupingByEndpoint = !minimal;
        let result = [];
        if (doGroupingByEndpoint) {
            const groupedFeatures = groupBy_default()(features, f => { var _a; return (_a = f.endpoint) !== null && _a !== void 0 ? _a : MAGIC_NO_ENDPOINT; });
            if (groupedFeatures[MAGIC_NO_ENDPOINT]) {
                result.push(...groupedFeatures[MAGIC_NO_ENDPOINT].map(f => react.createElement(Feature, { key: f.name + f.endpoint, feature: f, device: device, deviceState: deviceState, onChange: this.onChange, onRead: this.onRead, featureWrapperClass: featureWrapperClass, minimal: minimal })));
                delete groupedFeatures[MAGIC_NO_ENDPOINT];
            }
            for (const epName in groupedFeatures) {
                const featuresGroup = groupedFeatures[epName];
                result.push(react.createElement("div", { key: epName },
                    showEndpointLabels ? `Endpoint: ${epName}` : null,
                    react.createElement("div", { className: "ps-4" }, featuresGroup.map(f => react.createElement(Feature, { key: f.name + f.endpoint, feature: f, device: device, deviceState: deviceState, onChange: this.onChange, onRead: this.onRead, featureWrapperClass: featureWrapperClass, minimal: minimal })))));
            }
        }
        else {
            const renderedFeatures = features.map(f => react.createElement(Feature, { key: JSON.stringify(f), feature: f, device: device, deviceState: deviceState, onChange: this.onChange, onRead: this.onRead, featureWrapperClass: featureWrapperClass, minimal: minimal }));
            result = result.concat(renderedFeatures);
        }
        if (isThisACompositeFeature && isMoreThanOneFeature) {
            result.push(react.createElement("div", { key: feature.name + 'apply' },
                react.createElement(Button, { className: classnames_default()('btn btn-primary float-end', { 'btn-sm': minimal }), onClick: this.onCompositeFeatureApply }, t('common:apply'))));
        }
        return result;
    }
}
/* harmony default export */ const composite = ((0,withTranslation/* withTranslation */.Z)(["composite", "common"])(Composite));

;// CONCATENATED MODULE: ./src/components/features/composite/FeatureWrapper.tsx





const FeatureWrapper = (props) => {
    const { t } = (0,useTranslation/* useTranslation */.$)(['featureDescriptions']);
    const { children, feature, onRead } = props;
    const isColor = isColorFeature(feature);
    const isReadable = (feature.access & FeatureAccessMode.ACCESS_READ) || isColor;
    return react.createElement("div", { className: "row border-bottom py-1 w-100 align-items-center" },
        react.createElement("div", { className: "col-12 col-md-3" },
            react.createElement("label", { className: "col-form-label w-100" },
                react.createElement("div", { className: "d-flex justify-content-between" },
                    react.createElement("strong", { title: JSON.stringify(feature) }, feature.name === 'state' ? feature.property : feature.name),
                    isReadable ? (react.createElement(Button, { item: feature, onClick: (item) => {
                            onRead(feature.endpoint, { [item.property]: "" });
                        }, className: "btn btn-primary btn-sm" },
                        react.createElement("i", { className: "fa fa-sync" }))) : null),
                feature.description ? react.createElement("small", { className: "d-block text-muted" }, t(feature.description)) : null)),
        react.createElement("div", { className: "col-12 col-md-9" }, children));
};

;// CONCATENATED MODULE: ./src/components/device-page/exposes.tsx






function Exposes(props) {
    var _a, _b, _c;
    const { device, deviceStates, setDeviceState, getDeviceState } = props;
    const { t } = (0,useTranslation/* useTranslation */.$)(["exposes"]);
    const deviceState = (_a = deviceStates[device.friendly_name]) !== null && _a !== void 0 ? _a : {};
    if ((_c = (_b = device.definition) === null || _b === void 0 ? void 0 : _b.exposes) === null || _c === void 0 ? void 0 : _c.length) {
        return react.createElement(composite, { showEndpointLabels: true, feature: { features: device.definition.exposes }, type: "composite", device: device, deviceState: deviceState, onChange: (endpoint, value) => {
                setDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value);
            }, onRead: (endpoint, value) => {
                getDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value);
            }, featureWrapperClass: FeatureWrapper });
    }
    else {
        return t('empty_exposes_definition');
    }
}
const exposes_mappedProps = ["deviceStates"];
const ConnectedDeviceExposes = (0,unistore_react/* connect */.$)(exposes_mappedProps, actions_actions)(Exposes);
/* harmony default export */ const exposes = (ConnectedDeviceExposes);

;// CONCATENATED MODULE: ./src/components/device-page/tree.css
// extracted by mini-css-extract-plugin
/* harmony default export */ const tree = ({"tree":"luhncJICdabIiiPpFHxj"});
;// CONCATENATED MODULE: ./src/components/device-page/clusters.tsx



const ClustersComp = (props) => {
    const { label, clusters } = props;
    if (clusters.length) {
        return (react.createElement("li", null,
            react.createElement("span", null, label),
            react.createElement("ul", null, clusters.map(cluster => react.createElement("li", { key: cluster },
                react.createElement("span", null, cluster))))));
    }
    else {
        return null;
    }
};
function Clusters(props) {
    const { t } = (0,useTranslation/* useTranslation */.$)("zigbee");
    const { device } = props;
    return react.createElement("dl", { className: `${tree.tree} row` },
        react.createElement("ul", null,
            react.createElement("li", null,
                react.createElement("span", null, device.ieee_address),
                react.createElement("ul", null, Object.entries(device.endpoints).map(([epName, epData]) => {
                    return (react.createElement("li", { key: epName },
                        react.createElement("span", null,
                            t('endpoint'),
                            " ",
                            react.createElement("strong", null, epName)),
                        react.createElement("ul", null,
                            react.createElement(ClustersComp, { label: t('output_clusters'), clusters: epData.clusters.output }),
                            react.createElement(ClustersComp, { label: t('input_clusters'), clusters: epData.clusters.input }))));
                })))));
}

// EXTERNAL MODULE: ./node_modules/@rjsf/bootstrap-4/dist/bootstrap-4.esm.js + 95 modules
var bootstrap_4_esm = __webpack_require__(7328);
;// CONCATENATED MODULE: ./src/i18n/rjsf-translation-fields.tsx


const DescriptionField = (props) => {
    const { description, id } = props;
    const { t } = (0,useTranslation/* useTranslation */.$)("settingsSchemaTranslations");
    if (description) {
        return react.createElement("div", null,
            react.createElement("div", { className: "mb-3" }, t(id, { defaultValue: description })));
    }
    return react.createElement(react.Fragment, null);
};
const TitleField = ({ title, id }) => {
    const { t } = (0,useTranslation/* useTranslation */.$)("settingsSchemaTranslations");
    return (react.createElement("div", { className: "my-1" },
        react.createElement("h5", null, t(id, { defaultValue: title })),
        react.createElement("hr", { className: "border-0 bg-secondary", style: { height: "1px" } })));
};
/* harmony default export */ const rjsf_translation_fields = ({ TitleField, DescriptionField });

// EXTERNAL MODULE: ./node_modules/lodash/merge.js
var merge = __webpack_require__(3857);
var merge_default = /*#__PURE__*/__webpack_require__.n(merge);
;// CONCATENATED MODULE: ./src/components/device-page/settings.tsx




const genericUiSchema = {
    "ui:order": ["friendly_name", "retain", "retention", "qos", "filtered_attributes", "*"]
};
class DeviceSettings extends react.Component {
    constructor() {
        super(...arguments);
        this.state = {
            newSetting: {
                key: "",
                value: "",
                type: ""
            },
            updatedDeviceConfig: {}
        };
        this.onFormChange = (params) => {
            const { formData } = params;
            this.setState({ updatedDeviceConfig: formData });
        };
        this.updateConfig = async (params) => {
            const { formData } = params;
            const { setDeviceOptions, device } = this.props;
            await setDeviceOptions(device.ieee_address, formData);
            this.setState({ updatedDeviceConfig: {} });
        };
    }
    getGenericDeviceSettingsSchema() {
        var _a, _b;
        const { bridgeInfo: { config_schema: configSchema = {} } } = this.props;
        return ((_b = (_a = configSchema.definitions) === null || _a === void 0 ? void 0 : _a.device) !== null && _b !== void 0 ? _b : { properties: {} });
    }
    getDeviceConfig() {
        const { bridgeInfo: { config }, device } = this.props;
        const { updatedDeviceConfig } = this.state;
        return merge_default()({}, config === null || config === void 0 ? void 0 : config.device_options, config === null || config === void 0 ? void 0 : config.devices[device.ieee_address], updatedDeviceConfig);
    }
    getSchemaAndConfig() {
        const genericDeviceSettingsSchema = this.getGenericDeviceSettingsSchema();
        const deviceConfig = this.getDeviceConfig();
        return { schema: genericDeviceSettingsSchema, data: deviceConfig, uiSchema: genericUiSchema };
    }
    render() {
        const { schema, data, uiSchema } = this.getSchemaAndConfig();
        return react.createElement(bootstrap_4_esm/* default */.ZP, { schema: schema, formData: data, onSubmit: this.updateConfig, onChange: this.onFormChange, uiSchema: uiSchema, fields: rjsf_translation_fields });
    }
}

// EXTERNAL MODULE: ./node_modules/lodash/camelCase.js
var camelCase = __webpack_require__(8929);
var camelCase_default = /*#__PURE__*/__webpack_require__.n(camelCase);
// EXTERNAL MODULE: ./node_modules/lodash/startCase.js
var startCase = __webpack_require__(8029);
var startCase_default = /*#__PURE__*/__webpack_require__.n(startCase);
;// CONCATENATED MODULE: ./src/components/dashboard-page/DashboardFeatureWrapper.tsx





const getTemperatureIcon = (temperature) => {
    let icon = 'fa-thermometer-empty';
    if (temperature >= 30) {
        icon = 'fa-thermometer-full';
    }
    else if (temperature >= 25) {
        icon = 'fa-thermometer-three-quarters';
    }
    else if (temperature >= 20) {
        icon = 'fa-thermometer-half';
    }
    else if (temperature >= 15) {
        icon = 'fa-thermometer-quarter';
    }
    return icon;
};
const typeToClassMap = {
    humidity: ['text-info', 'fa-tint'],
    illuminance: ['fa-sun'],
    pressure: ['fa-cloud-download-alt'],
    co2: ['fa-atom', 'text-warning'],
    voltage: ['fa-bolt', 'text-success'],
    state: ['fa-star-half-alt'],
    brightness: ['fa-sun'],
    occupancy: ['fa-walking'],
    current: ['fa-copyright', 'text-warning'],
    power: ['fa-power-off', 'text-success'],
    energy: ['fa-plug', 'text-info'],
    frequency: ['fa-wave-square'],
    tamper: ['fa-exclamation-circle', 'text-danger'],
    smoke: ['fa-smoking', 'text-danger'],
    radiation_dose_per_hour: ['fa-radiation', 'text-danger'],
    radioactive_events_per_minute: ['fa-radiation-alt', 'text-warning'],
    power_factor: ['fa-industry', 'text-danger'],
    mode: ['fa-user-cog', 'text-warning'],
    sound: ['fa-volume-up', 'text-info'],
    position: ['fa-percent', 'text-info'],
    alarm: ['fa-exclamation-triangle', 'text-danger'],
    color_xy: ['fa-palette'],
    color_hs: ['fa-palette'],
    color_temp: ['fa-sliders-h'],
    illuminance_lux: ['fa-sun'],
    soil_moisture: ['fa-fill-drip'],
    water_leak: ['fa-water'],
};
const getGenericFeatureIcon = (name, value) => {
    var _a;
    let classes = [];
    switch (name) {
        case 'device_temperature':
        case 'temperature':
            classes.push(classnames_default()('text-danger', getTemperatureIcon(value)));
            break;
        case 'contact':
            classes.push(classnames_default()({ 'fa-door-closed text-muted': value, 'fa-door-open text-primary': !value }));
            break;
        case 'occupancy':
            classes.push(classnames_default()({ 'text-warning': value }));
            break;
        case 'water_leak':
            classes.push(classnames_default()({ 'text-primary': value }));
            break;
        default:
            break;
    }
    classes = [...classes, ...((_a = typeToClassMap[name]) !== null && _a !== void 0 ? _a : [])];
    if (!classes.length) {
        classes.push('invisible');
    }
    return classnames_default()(classes);
};
const DashboardFeatureWrapper = (props) => {
    const { children, feature, deviceState = {} } = props;
    const icon = getGenericFeatureIcon(feature.name, deviceState[feature.property]);
    const { t } = (0,useTranslation/* useTranslation */.$)(['featureNames']);
    console.log(feature);
    return react.createElement("div", { className: "d-flex align-items-center" },
        icon && react.createElement("div", { className: "me-1" },
            react.createElement("i", { className: `fa fa-fw ${icon}` })),
        react.createElement("div", { className: "flex-shrink-1 flex-grow-1" },
            t(feature.name === 'state' ? feature.property : feature.name, { defaultValue: startCase_default()(camelCase_default()(feature.name === 'state' ? feature.property : feature.name)) }),
            feature.endpoint ? ` (${feature.endpoint})` : null),
        react.createElement("div", { className: "flex-shrink-0" }, children));
};

;// CONCATENATED MODULE: ./src/components/device-page/scene.tsx









const isValidSceneId = (id, existingScenes = []) => {
    return id >= 0 && id <= 255 && !existingScenes.find(s => s.id == id);
};
function ScenePicker(props) {
    const { t } = (0,useTranslation/* useTranslation */.$)("scene");
    const { onSceneSelected, scenes = [], value } = props;
    const onSelectHandler = (e) => {
        const { value } = e.target;
        const [id, endpoint] = value.split("-");
        onSceneSelected({ id: parseInt(id, 10), endpoint });
    };
    const selectPicker = react.createElement(react.Fragment, null,
        react.createElement("label", { htmlFor: "rr-scene", className: "form-label" }, t('scene_name')),
        react.createElement("select", { onChange: onSelectHandler, id: "rr-scene", className: "form-select" },
            react.createElement("option", { key: "hidden", hidden: true }, t('select_scene')),
            scenes.map(scene => react.createElement("option", { key: `${scene.id}-${scene.endpoint}`, value: `${scene.id}-${scene.endpoint}` }, scene.name))));
    const textPicker = react.createElement(react.Fragment, null,
        react.createElement("label", { htmlFor: "rr-scene", className: "form-label" }, t('scene_id')),
        react.createElement("input", { min: 0, value: value.id, type: "number", className: "form-control", id: "rr-scene", onChange: (e) => onSceneSelected({ id: e.target.valueAsNumber, endpoint: undefined }) }));
    return react.createElement(react.Fragment, null, scenes.length > 0 ? selectPicker : textPicker);
}
function getScenes(target) {
    if (target.endpoints) {
        const scenes = [];
        let endpoint;
        Object.entries(target.endpoints).forEach(([endpoint, value]) => {
            for (let _scene of value.scenes) {
                scenes.push({
                    ..._scene, ...{ endpoint }
                });
            }
        });
        return scenes;
    }
    else if (target.scenes) {
        return target.scenes;
    }
    return [];
}
function RecallRemove(props) {
    const { sceneRecall, sceneRemove, sceneStore, sceneRemoveAll, target } = props;
    const { t } = (0,useTranslation/* useTranslation */.$)("scene");
    const [scene, setScene] = (0,react.useState)({ id: 0, endpoint: undefined });
    const sceneIsntSelected = scene.id === undefined;
    const scenes = getScenes(target);
    const { friendly_name } = target;
    return react.createElement(react.Fragment, null,
        react.createElement("div", { className: "mb-3" },
            react.createElement(ScenePicker, { onSceneSelected: setScene, value: scene, scenes: scenes })),
        react.createElement("div", { className: "d-flex" },
            react.createElement("div", { className: "btn-group ms-auto pe-1" },
                react.createElement("button", { disabled: sceneIsntSelected, onClick: () => sceneRecall(friendly_name, scene.id, scene.endpoint), type: "submit", className: "btn btn-success" }, t('recall')),
                react.createElement(Button, { disabled: sceneIsntSelected, promt: true, onClick: () => sceneRemove(friendly_name, scene.id, scene.endpoint), type: "submit", className: "btn btn-danger" }, t('remove'))),
            react.createElement(Button, { promt: true, onClick: () => sceneRemoveAll(friendly_name, ""), type: "submit", className: "btn btn-danger" }, t('remove_all'))));
}
const whitelistFeatureNames = ['state', 'color_temp', 'color', 'transition', 'brightness'];
const onlyValidFeaturesForScenes = (feature, deviceState = {}) => {
    const { property, name } = feature;
    let { features } = feature;
    if (isLightFeature(feature)) {
        features = features
            .map(f => onlyValidFeaturesForScenes(f, (property ? deviceState[property] : deviceState)))
            .filter(f => f);
        const groupedFeatures = groupBy_default()(features, 'property');
        features = Object.values(groupedFeatures)
            .map(f => f[0]);
    }
    const filteredOutFeature = { ...feature, features };
    if (whitelistFeatureNames.includes(name)) {
        return filteredOutFeature;
    }
    if (Array.isArray(features) && features.length > 0) {
        return filteredOutFeature;
    }
    return false;
};
function AddScene(props) {
    var _a, _b;
    const { target, deviceState, sceneStore, setDeviceState } = props;
    const scenes = getScenes(target);
    const { t } = (0,useTranslation/* useTranslation */.$)("scene");
    const [sceneId, setSceneId] = (0,react.useState)(0);
    const [sceneName, setSceneName] = (0,react.useState)("");
    const defaultSceneName = `Scene ${sceneId}`;
    let filteredFeatures = [];
    if (target.definition) {
        filteredFeatures = ((_b = (_a = target.definition) === null || _a === void 0 ? void 0 : _a.exposes) !== null && _b !== void 0 ? _b : [])
            .map((e) => onlyValidFeaturesForScenes(e, deviceState))
            .filter(f => f);
    }
    return react.createElement(react.Fragment, null,
        react.createElement("div", { className: "mb-3" },
            react.createElement("label", { htmlFor: "add-scene", className: "form-label" }, t('scene_id')),
            react.createElement("input", { id: "add-scene", className: "form-control", min: 0, max: 255, value: sceneId, type: "number", onChange: (e) => setSceneId(e.target.valueAsNumber) }),
            react.createElement("label", { htmlFor: "add-scene-name", className: "form-label" }, t('scene_name')),
            react.createElement("input", { id: "add-scene-name", className: "form-control", value: sceneName, type: "string", onChange: (e) => setSceneName(e.target.value), placeholder: defaultSceneName }),
            react.createElement(composite, { feature: { features: filteredFeatures }, className: "row", type: "composite", device: target, deviceState: deviceState, onChange: (endpoint, value) => {
                    setDeviceState(`${target.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value);
                }, onRead: () => { }, featureWrapperClass: DashboardFeatureWrapper, minimal: true })),
        react.createElement("div", { className: "d-flex" },
            react.createElement("button", { disabled: !isValidSceneId(sceneId, scenes), type: "submit", onClick: () => sceneStore(target.friendly_name, { id: sceneId, name: sceneName || defaultSceneName }), className: "btn btn-primary ms-auto" }, t('store'))));
}
function ScenePage(props) {
    const { sceneStore, sceneRecall, sceneRemove, sceneRemoveAll, setDeviceState, device, deviceState } = props;
    return react.createElement("div", { className: "row" },
        react.createElement("div", { className: "col-12 col-sm-6 col-xxl-6 d-flex" },
            react.createElement("div", { className: "card flex-fill" },
                react.createElement("div", { className: "card-body py-4" },
                    react.createElement(AddScene, { sceneStore: sceneStore, target: device, deviceState: deviceState, setDeviceState: setDeviceState })))),
        react.createElement("div", { className: "col-12 col-sm-6 col-xxl-6 d-flex" },
            react.createElement("div", { className: "card flex-fill" },
                react.createElement("div", { className: "card-body py-4" },
                    react.createElement(RecallRemove, { sceneStore: sceneStore, sceneRecall: sceneRecall, sceneRemove: sceneRemove, sceneRemoveAll: sceneRemoveAll, target: device, deviceState: deviceState })))));
}
const scene_mappedProps = [];
const scene_ConnectedDeviceStates = (0,unistore_react/* connect */.$)(scene_mappedProps, actions_actions)(ScenePage);
/* harmony default export */ const scene = (scene_ConnectedDeviceStates);

// EXTERNAL MODULE: ./node_modules/zigbee-herdsman/dist/zcl/definition/dataType.js
var dataType = __webpack_require__(3485);
// EXTERNAL MODULE: ./node_modules/lodash/escapeRegExp.js
var escapeRegExp = __webpack_require__(3522);
var escapeRegExp_default = /*#__PURE__*/__webpack_require__.n(escapeRegExp);
// EXTERNAL MODULE: ./node_modules/lodash/set.js
var set = __webpack_require__(6968);
var set_default = /*#__PURE__*/__webpack_require__.n(set);
;// CONCATENATED MODULE: ./src/components/logs-page/log-level-config.css
// extracted by mini-css-extract-plugin
/* harmony default export */ const log_level_config = ({"hide-description":"__0nqhZTnKu19nXz65iJ"});
;// CONCATENATED MODULE: ./src/components/logs-page/log-level-config.tsx





function ConfigureLogs(props) {
    const { schema = {}, schemaKey = '', config = {}, configKey = '', onChange } = props;
    const formData = get_default()(config, configKey, {});
    const _schema = get_default()(schema, schemaKey, {});
    const handleChange = (params) => {
        const { formData } = params;
        const payload = {};
        set_default()(payload, configKey, formData);
        onChange(payload);
    };
    return react.createElement(bootstrap_4_esm/* default */.ZP, { schema: _schema, className: log_level_config["hide-description"], formData: formData, onChange: handleChange },
        react.createElement("div", null));
}

;// CONCATENATED MODULE: ./src/components/logs-page/index.tsx







const ALL = 'all';
const TextWrapper = ({ text }) => react.createElement(react.Fragment, null, text);
const Highlighted = ({ text = '', highlight = '' }) => {
    if (!highlight.trim()) {
        return react.createElement(TextWrapper, { text: text });
    }
    const regex = new RegExp(`(${escapeRegExp_default()(highlight)})`, 'gi');
    const parts = text.split(regex);
    return (react.createElement(react.Fragment, null, parts.filter(part => part).map((part, i) => (regex.test(part) ? react.createElement("mark", { key: i }, part) : react.createElement(TextWrapper, { key: i, text: part })))));
};
function LogRow(props) {
    const { logLevel, log, search } = props;
    return react.createElement("div", null,
        logLevel === ALL && react.createElement(react.Fragment, null,
            react.createElement("span", { style: { width: '50px' }, className: classnames_default()("badge", {
                    'bg-danger': log.level === 'error',
                    'bg-warning': log.level === 'warning',
                    'bg-info': log.level === 'info',
                    'bg-secondary': ['error', 'warning', 'info'].includes(log.level) === false,
                }, "text-capitalize") }, log.level),
            "\u00A0"),
        react.createElement("code", null,
            react.createElement(Highlighted, { text: log.message, highlight: search })));
}
const logLevels = [ALL, 'debug', 'info', 'warn', 'error'];
class LogsPage extends react.Component {
    constructor() {
        super(...arguments);
        this.state = { search: '', logLevel: ALL };
    }
    renderSearch() {
        const { clearLogs, bridgeInfo: { config_schema, config }, updateBridgeConfig, t } = this.props;
        const { search } = this.state;
        return react.createElement("div", { className: "card" },
            react.createElement("div", { className: "card-body" },
                react.createElement("div", { className: "row row-cols-lg-auto g-3 align-items-center" },
                    react.createElement("div", { className: "col-12 col-sm-4 col-xxl-4" },
                        react.createElement("label", { htmlFor: "log-level", className: "form-label" }, t('show_only')),
                        react.createElement("select", { id: "log-level", className: "form-select", onChange: e => this.setState({ logLevel: e.target.value }) }, logLevels.map(level => react.createElement("option", { key: level, value: level }, level)))),
                    react.createElement("div", { className: "col-12 col-sm-4 col-xxl-4" },
                        react.createElement("label", { htmlFor: "search-filter", className: "form-label" }, t('filter_by_text')),
                        react.createElement("input", { id: "search-filter", className: "form-control col-10", placeholder: t('common:enter_search_criteria'), value: search, onChange: (e) => this.setState({ search: e.target.value }), type: "text" })),
                    react.createElement("div", { className: "col-12 col-sm-4 col-xxl-4" },
                        react.createElement(ConfigureLogs, { schema: config_schema, schemaKey: 'properties.advanced.properties.log_level', config: config, configKey: 'advanced.log_level', onChange: updateBridgeConfig })),
                    react.createElement("div", { className: "col-12" },
                        react.createElement("label", { htmlFor: "reset" }, "\u00A0"),
                        react.createElement("input", { id: "reset", type: "button", onClick: clearLogs, className: "btn btn-primary form-control", value: t('common:clear') })))));
    }
    render() {
        let { logs } = this.props;
        const { t } = this.props;
        const { search, logLevel } = this.state;
        const _search = new RegExp(escapeRegExp_default()(search), 'gi');
        logs = logs
            .filter(l => (logLevel === ALL || l.level === logLevel) && (!search || _search.test(l.message)))
            .sort();
        return react.createElement(react.Fragment, null,
            this.renderSearch(),
            react.createElement("div", { className: "card" },
                react.createElement("div", { className: "card-body" },
                    logs.length == 0 ? react.createElement("h1", null, t('empty_logs_message')) : null,
                    react.createElement("div", { className: "overflow-auto" }, logs.map((log, idx) => react.createElement(LogRow, { key: idx, log: log, search: search, logLevel: logLevel }))))));
    }
}
const logs_page_mappedProps = ["logs", "bridgeInfo"];
/* harmony default export */ const logs_page = ((0,withTranslation/* withTranslation */.Z)(["logs", "common"])((0,unistore_react/* connect */.$)(logs_page_mappedProps, actions_actions)(LogsPage)));

;// CONCATENATED MODULE: ./src/components/device-page/dev-console.tsx










function AttributeValueEditor(props) {
    var _a;
    const { value, onChange, attribute, definition } = props;
    const typesMap = {
        [dataType["default"].charStr]: 'string',
        [dataType["default"].longCharStr]: 'string',
    };
    const type = (_a = typesMap[definition.type]) !== null && _a !== void 0 ? _a : 'number';
    const onValueChanged = (e) => {
        const val = type === 'number' ? e.target.valueAsNumber : e.target.value;
        onChange(attribute, val);
    };
    return react.createElement("input", { className: "form-control", type: type, value: value, onChange: onValueChanged });
}
const logStartingStrings = [
    'Read result of',
    "Publish 'set' 'read' to",
    "Publish 'set' 'write' to",
    "Wrote "
];
class DevConsole extends react.Component {
    constructor(props) {
        super(props);
        this.canRead = () => {
            const { cluster, attributes, endpoint } = this.state;
            return !!endpoint && attributes.length > 0 && !!cluster;
        };
        this.onEndpointChange = (endpoint) => {
            this.setState({ attributes: [], cluster: "", endpoint });
        };
        this.onClusterChange = (cluster) => {
            this.setState({ attributes: [], cluster });
        };
        this.onAttributeSelect = (attribute, definition) => {
            const { attributes } = this.state;
            if (!attributes.find(info => info.attribute === attribute)) {
                const newAttributes = attributes.concat([{ attribute, definition }]);
                this.setState({ attributes: newAttributes });
            }
        };
        this.onAttributeDelete = (attribute) => {
            const { attributes } = this.state;
            const newAttributes = attributes.filter(info => info.attribute !== attribute);
            this.setState({ attributes: newAttributes });
        };
        this.onReadClick = () => {
            const { readDeviceAttributes, device } = this.props;
            const { cluster, attributes, endpoint } = this.state;
            readDeviceAttributes(device.friendly_name, endpoint, cluster, attributes.map(info => info.attribute), {});
        };
        this.onWriteClick = () => {
            const { writeDeviceAttributes, device } = this.props;
            const { cluster, attributes, endpoint } = this.state;
            writeDeviceAttributes(device.friendly_name, endpoint, cluster, attributes, {});
        };
        this.onAttributeValueChange = (attribute, value) => {
            const { attributes } = this.state;
            const newAttributes = [...attributes];
            const attr = newAttributes.find(info => info.attribute === attribute);
            if (attr) {
                attr.value = value;
            }
            this.setState({ attributes: newAttributes });
        };
        this.setMode = (mode) => {
            this.setState({ mode });
        };
        const { device } = props;
        const defaultEndpoint = Object.keys(device.endpoints)[0];
        this.state = {
            endpoint: defaultEndpoint,
            cluster: "",
            attributes: [],
            mode: "read"
        };
    }
    renderLastResult() {
        const { logs } = this.props;
        const filtered = logs.filter(l => logStartingStrings.some(startString => l.message.startsWith(startString)));
        const lastLogMessage = filtered.length > 0 ? filtered[filtered.length - 1] : null;
        const res = [];
        if (lastLogMessage) {
            res.push(react.createElement(LogRow, { key: "log", log: lastLogMessage, search: "", logLevel: ALL }));
        }
        return res;
    }
    renderSelectedAtrribute() {
        const { attributes } = this.state;
        return attributes.map(({ attribute, value = "", definition }) => react.createElement("div", { key: attribute, className: "row mb-1" },
            react.createElement("div", { className: "col-3" },
                react.createElement("div", { className: "row" },
                    react.createElement("div", { className: "col-6" }, attribute),
                    react.createElement("div", { className: "col-3" },
                        react.createElement(AttributeValueEditor, { value: value, attribute: attribute, definition: definition, onChange: this.onAttributeValueChange })),
                    react.createElement("div", { className: "col-2" },
                        react.createElement(Button, { className: "btn btn-danger btn-sm", item: attribute, onClick: this.onAttributeDelete },
                            react.createElement("i", { className: "fas fa-trash" })))))));
    }
    renderRead() {
        const { cluster, attributes, endpoint } = this.state;
        const noAttributesSelected = attributes.length === 0;
        const noSelectedCluster = cluster === "";
        const { t, device } = this.props;
        const endpoints = getEndpoints(device);
        return react.createElement(react.Fragment, null,
            react.createElement("div", { className: "mb-3 row" },
                react.createElement("div", { className: "col-6 col-sm-3" },
                    react.createElement(EndpointPicker, { label: t('zigbee:endpoint'), values: endpoints, value: endpoint, onChange: this.onEndpointChange })),
                react.createElement("div", { className: "col-6 col-sm-3" },
                    react.createElement(ClusterPicker, { label: t('cluster'), pickerType: PickerType.SINGLE, clusters: Object.keys((cluster_default())), value: cluster, onChange: this.onClusterChange })),
                react.createElement("div", { className: "col-6 col-sm-3" },
                    react.createElement(AttributePicker, { label: t('attribute'), value: "", cluster: cluster, onChange: this.onAttributeSelect }))),
            react.createElement("div", { className: "mb-3 row" }, this.renderSelectedAtrribute()),
            react.createElement("div", { className: "mb-3 row" },
                react.createElement("div", { className: "btn-group col col-3", role: "group" },
                    react.createElement(Button, { disabled: noAttributesSelected || noSelectedCluster, className: "btn btn-success me-2", onClick: this.onReadClick }, t('read')),
                    react.createElement(Button, { disabled: noAttributesSelected || noSelectedCluster, className: "btn btn-danger", onClick: this.onWriteClick }, t('write')))));
    }
    render() {
        return react.createElement("div", null,
            this.renderRead(),
            this.renderLastResult());
    }
}
/* harmony default export */ const dev_console = ((0,withTranslation/* withTranslation */.Z)("common")(DevConsole));

;// CONCATENATED MODULE: ./src/components/device-page/DeviceSpecificSettings.tsx






function DeviceSpecificSettings(props) {
    var _a, _b;
    const { device, bridgeInfo: { config }, setDeviceOptions } = props;
    const { t } = (0,useTranslation/* useTranslation */.$)(["exposes"]);
    const deviceState = config.devices[device.ieee_address];
    if ((_b = (_a = device.definition) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.length) {
        return react.createElement(composite, { showEndpointLabels: true, feature: { features: device.definition.options }, type: "composite", device: device, deviceState: deviceState, onChange: async (endpoint, value) => {
                await setDeviceOptions(device.ieee_address, value);
            }, onRead: (endpoint, value) => { }, featureWrapperClass: FeatureWrapper });
    }
    else {
        return t('empty_exposes_definition');
    }
}
const DeviceSpecificSettings_mappedProps = ["bridgeInfo"];
const ConnectedDeviceSpecificSettings = (0,unistore_react/* connect */.$)(DeviceSpecificSettings_mappedProps, actions_actions)(DeviceSpecificSettings);
/* harmony default export */ const device_page_DeviceSpecificSettings = (ConnectedDeviceSpecificSettings);

;// CONCATENATED MODULE: ./src/components/device-page/index.tsx
















const getDeviceLinks = (dev) => ([
    {
        translationKey: 'about',
        url: `/device/${dev}/info`
    },
    {
        translationKey: 'exposes',
        url: `/device/${dev}/exposes`
    },
    {
        translationKey: 'bind',
        url: `/device/${dev}/bind`
    },
    {
        translationKey: 'reporting',
        url: `/device/${dev}/reporting`
    },
    {
        translationKey: 'settings',
        url: `/device/${dev}/settings`
    },
    {
        translationKey: 'settings_specific',
        url: `/device/${dev}/settings-specific`
    },
    {
        translationKey: 'state',
        url: `/device/${dev}/state`
    },
    {
        translationKey: 'clusters',
        url: `/device/${dev}/clusters`
    },
    {
        translationKey: 'scene',
        url: `/device/${dev}/scene`
    },
    {
        translationKey: 'dev_console',
        url: `/device/${dev}/dev-console`
    },
]);
function ContentRenderer(props) {
    var _a;
    const { match, devices, logs } = props;
    const { readDeviceAttributes, writeDeviceAttributes, setDeviceOptions, bridgeInfo, deviceStates } = props;
    const { tab, dev } = match.params;
    const device = devices[dev];
    const deviceState = (_a = deviceStates[device.friendly_name]) !== null && _a !== void 0 ? _a : {};
    switch (tab) {
        case "info":
            return react.createElement(info, { device: device });
        case "bind":
            return react.createElement(bind, { device: device });
        case "state":
            return react.createElement(states, { device: device });
        case "exposes":
            return react.createElement(exposes, { device: device });
        case "clusters":
            return react.createElement(Clusters, { device: device });
        case "reporting":
            return react.createElement(reporting, { device: device });
        case "settings":
            return react.createElement(DeviceSettings, { device: device, setDeviceOptions: setDeviceOptions, bridgeInfo: bridgeInfo });
        case "settings-specific":
            return react.createElement(device_page_DeviceSpecificSettings, { device: device, setDeviceOptions: setDeviceOptions, bridgeInfo: bridgeInfo });
        case "dev-console":
            return react.createElement(dev_console, { device: device, logs: logs, readDeviceAttributes: readDeviceAttributes, writeDeviceAttributes: writeDeviceAttributes });
        case "scene":
            return react.createElement(scene, { device: device, deviceState: deviceState });
        default:
            return react.createElement(react_router/* Redirect */.l_, { to: `/device/${dev}/info` });
    }
}
function DevicePage(props) {
    const { devices, match, t } = props;
    const { dev } = match.params;
    const device = devices[dev];
    if (!device) {
        return react.createElement("div", { className: "h-100 d-flex justify-content-center align-items-center" }, t('unknown_device'));
    }
    const links = getDeviceLinks(dev);
    return (react.createElement(react.Fragment, null,
        react.createElement("h1", { className: "h3" }, device.friendly_name),
        react.createElement("div", { className: "tab" },
            react.createElement("ul", { className: "nav nav-tabs" }, links.map(link => react.createElement("li", { key: link.translationKey, className: "nav-item" },
                react.createElement(react_router_dom/* NavLink */.OL, { activeClassName: "active", className: `nav-link ${device_page_style["small-nav"]}`, to: link.url }, t(link.translationKey))))),
            react.createElement("div", { className: "tab-content" },
                react.createElement("div", { className: "tab-pane fade show active" },
                    react.createElement(ContentRenderer, { ...props }))))));
}
const devicePageWithRouter = (0,react_router/* withRouter */.EN)(DevicePage);
const device_page_mappedProps = ["devices", "deviceStates", "logs", "bridgeInfo"];
const ConnectedDevicePage = (0,withTranslation/* withTranslation */.Z)("devicePage")((0,unistore_react/* connect */.$)(device_page_mappedProps, actions_actions)(devicePageWithRouter));
/* harmony default export */ const device_page = (ConnectedDevicePage);

;// CONCATENATED MODULE: ./src/components/touchlink-page/index.tsx








class TouchlinkPage extends react.Component {
    constructor() {
        super(...arguments);
        this.onIdentifyClick = (device) => {
            const { touchlinkIdentify } = this.props;
            touchlinkIdentify(device);
        };
        this.onResetClick = (device) => {
            const { touchlinkReset } = this.props;
            touchlinkReset(device);
        };
    }
    renderTouchlinkDevices() {
        const { touchlinkDevices, devices, touchlinkIdentifyInProgress, touchlinkResetInProgress, t } = this.props;
        const touchlinkInProgress = touchlinkIdentifyInProgress || touchlinkResetInProgress;
        return (react.createElement("div", { className: "table-responsive" },
            react.createElement("table", { className: "table align-middle" },
                react.createElement("thead", null,
                    react.createElement("tr", null,
                        react.createElement("th", { scope: "col" }, "#"),
                        react.createElement("th", { scope: "col" }, t('zigbee:ieee_address')),
                        react.createElement("th", { scope: "col" }, t('zigbee:friendly_name')),
                        react.createElement("th", { scope: "col" }, t('zigbee:channel')),
                        react.createElement("th", { scope: "col" }, "\u00A0"))),
                react.createElement("tbody", null, touchlinkDevices.map((touchlinkDevice, idx) => {
                    var _a;
                    return (react.createElement("tr", { key: touchlinkDevice.ieee_address },
                        react.createElement("td", null, idx + 1),
                        react.createElement("td", null, devices[touchlinkDevice.ieee_address] ?
                            (react.createElement(react_router_dom/* Link */.rU, { to: genDeviceDetailsLink(touchlinkDevice.ieee_address) }, touchlinkDevice.ieee_address)) : touchlinkDevice.ieee_address),
                        react.createElement("td", null, (_a = devices[touchlinkDevice.ieee_address]) === null || _a === void 0 ? void 0 : _a.friendly_name),
                        react.createElement("td", null, touchlinkDevice.channel),
                        react.createElement("td", null,
                            react.createElement("div", { className: "btn-group float-right", role: "group", "aria-label": "Basic example" },
                                react.createElement(Button, { disabled: touchlinkInProgress, item: touchlinkDevice, title: t('identify'), className: "btn btn-primary", onClick: this.onIdentifyClick },
                                    react.createElement("i", { className: classnames_default()("fa", { "fa-exclamation-triangle": !touchlinkIdentifyInProgress, "fas fa-circle-notch fa-spin": touchlinkIdentifyInProgress }) })),
                                react.createElement(Button, { disabled: touchlinkInProgress, item: touchlinkDevice, title: t('factory_reset'), className: "btn btn-danger", onClick: this.onResetClick },
                                    react.createElement("i", { className: classnames_default()("fa", { "fa-broom": !touchlinkResetInProgress, "fas fa-circle-notch fa-spin": touchlinkResetInProgress }) }))))));
                })))));
    }
    renderNoDevices() {
        const { touchlinkScan, t } = this.props;
        return (react.createElement(Button, { className: "btn btn-primary mx-auto d-block", onClick: touchlinkScan }, t('scan')));
    }
    render() {
        const { touchlinkDevices, touchlinkScanInProgress, touchlinkScan, t } = this.props;
        return (react.createElement("div", { className: "card" },
            react.createElement("div", { className: "card-header allign-middle" },
                t('detected_devices_message', { count: touchlinkDevices.length }),
                react.createElement(Button, { title: t('rescan'), className: "btn btn-primary btn-sm float-right", onClick: touchlinkScan },
                    react.createElement("i", { className: "fa fa-sync" }))),
            react.createElement("div", { className: "card-body" }, touchlinkScanInProgress ? (react.createElement("div", { className: "d-flex justify-content-center" },
                react.createElement("div", { className: "spinner-border", role: "status" },
                    react.createElement("span", { className: "sr-only" }, t('common:loading'))))) : touchlinkDevices.length === 0 ? this.renderNoDevices() : this.renderTouchlinkDevices())));
    }
}
const touchlink_page_mappedProps = ["touchlinkDevices", "devices", "touchlinkScanInProgress", "touchlinkIdentifyInProgress", "touchlinkResetInProgress"];
/* harmony default export */ const touchlink_page = ((0,withTranslation/* withTranslation */.Z)(["touchlink", "zigbee", "common"])((0,unistore_react/* connect */.$)(touchlink_page_mappedProps, actions_actions)(TouchlinkPage)));

// EXTERNAL MODULE: ./node_modules/lodash/cloneDeep.js
var cloneDeep = __webpack_require__(361);
var cloneDeep_default = /*#__PURE__*/__webpack_require__.n(cloneDeep);
;// CONCATENATED MODULE: ./src/components/settings/uiSchema.json
const uiSchema_namespaceObject = JSON.parse('{"mqtt":{"ui:order":["base_topic","server","user","password","client_id","version","ca","key","cert","reject_unauthorized","*"]},"serial":{"ui:order":["port","adapter","disable_led","*"]},"frontend":{"ui:order":["port","host","*"]}}');
;// CONCATENATED MODULE: ./src/components/settings/index.tsx











const ROOT_KEY_NAME = 'main';
const ingoredFields = ['groups', 'devices', 'device_options', 'ban', 'whitelist', 'map_options'];
const validJsonSchemasAsTabs = ['object', 'array'];
const removePropertiesFromSchema = (names, schema = {}, config = {}) => {
    if (schema.required) {
        schema.required = schema.required.filter(item => names.includes(item));
    }
    for (const name of names) {
        if (schema.properties) {
            delete schema.properties[name];
        }
        delete config[name];
    }
    return { schema, config };
};
const tabs = [
    {
        translationKey: 'settings',
        url: `/settings/settings`
    },
    {
        translationKey: 'tools',
        url: `/settings/tools`
    },
    {
        translationKey: 'about',
        url: `/settings/about`
    },
    {
        translationKey: 'raw',
        url: `/settings/bridge`
    },
    {
        translationKey: 'translate',
        url: '/settings/translate'
    },
    {
        translationKey: 'donate',
        url: '/settings/donate'
    }
];
const rows = [
    react.createElement("div", { key: "nurikk", className: "row pb-2" },
        react.createElement("div", { className: "col" },
            react.createElement("a", { href: "https://www.buymeacoffee.com/nurikk" },
                react.createElement("img", { crossOrigin: "anonymous", src: "https://img.buymeacoffee.com/button-api/?text=Thanks for frontend&emoji=\uD83C\uDF7A&slug=nurikk&button_colour=FFDD00&font_colour=000000&font_family=Arial&outline_colour=000000&coffee_colour=ffffff" })))),
    react.createElement("div", { key: "koenkk", className: "row pb-2" },
        react.createElement("div", { className: "col" },
            react.createElement("a", { href: "https://www.buymeacoffee.com/koenkk" },
                react.createElement("img", { crossOrigin: "anonymous", src: "https://img.buymeacoffee.com/button-api/?text=Thanks for zigbee2mqtt&emoji=\u2615&slug=koenkk&button_colour=FFDD00&font_colour=000000&font_family=Arial&outline_colour=000000&coffee_colour=ffffff" }))))
].sort(() => Math.random() - 0.5);
const isValidKeyToRenderAsTab = (key, value) => (validJsonSchemasAsTabs.includes(value.type) && !ingoredFields.includes(key)) || (value && value.oneOf ? value.oneOf.length > 0 : false);
class SettingsPage extends react.Component {
    constructor() {
        super(...arguments);
        this.state = {
            keyName: ROOT_KEY_NAME
        };
        this.onSettingsSave = (e) => {
            const { formData } = e;
            const { updateBridgeConfig } = this.props;
            const { keyName } = this.state;
            if (keyName === ROOT_KEY_NAME) {
                updateBridgeConfig(formData);
            }
            else {
                updateBridgeConfig({ [keyName]: formData });
            }
        };
    }
    renderCategoriesTabs() {
        const { t } = this.props;
        return (react.createElement("ul", { className: "nav nav-tabs" }, tabs.map(tab => react.createElement("li", { key: tab.url, className: "nav-item" },
            react.createElement(react_router_dom/* NavLink */.OL, { className: "nav-link", activeClassName: "active", to: tab.url }, t(tab.translationKey))))));
    }
    render() {
        return (react.createElement("div", { className: "tab" },
            this.renderCategoriesTabs(),
            react.createElement("div", { className: "tab-content h-100 p-0 p-sm-3" },
                react.createElement("div", { className: "tab-pane fade show active" }, this.renderSwitcher()))));
    }
    renderSwitcher() {
        const { match } = this.props;
        const { tab } = match.params;
        switch (tab) {
            case "tools":
                return this.renderTools();
            case "bridge":
                return this.renderBridgeInfo();
            case "about":
                return this.renderAbout();
            case "settings":
                return this.renderSettings();
            case "donate":
                return this.renderDonate();
            case "translate":
                return this.renderTranslate();
            default:
                return react.createElement(react_router/* Redirect */.l_, { to: `/settings/settings` });
        }
    }
    renderTranslate() {
        const { missingTranslations, i18n } = this.props;
        const currentLanguage = i18n.language.split('-')[0];
        const url = `https://github.com/nurikk/zigbee2mqtt-frontend/edit/dev/src/i18n/locales/${currentLanguage}.json`;
        return react.createElement("div", { className: "p-3" },
            react.createElement("p", null, "This page contains missing translation keys."),
            react.createElement("p", null, "You can navigate to different pages to collect missing translations and come back here again (don't referesh browser page)."),
            react.createElement("p", null, "Usually there is a lot of missing keys in settings and device pages"),
            react.createElement("p", null,
                "Then you can navigate to ",
                react.createElement("a", { target: "_blank", rel: "noopener noreferrer", href: url }, "Github"),
                " and raise a PR with translated missing keys"),
            react.createElement("pre", null, JSON.stringify(missingTranslations, null, 4)));
    }
    renderAbout() {
        var _a, _b, _c, _d, _e, _f;
        const { bridgeInfo, t } = this.props;
        const isZigbee2mqttDevVersion = ((_a = bridgeInfo.version) === null || _a === void 0 ? void 0 : _a.match(/^\d+\.\d+\.\d+$/)) === null;
        const zigbee2mqttVersion = isZigbee2mqttDevVersion ?
            bridgeInfo.version :
            react.createElement("a", { target: "_blank", rel: "noopener noreferrer", href: `https://github.com/Koenkk/zigbee2mqtt/releases/tag/${bridgeInfo.version}` }, bridgeInfo.version);
        const zigbee2mqttCommit = bridgeInfo.commit ?
            react.createElement(react.Fragment, null,
                "commit: ",
                react.createElement("a", { target: "_blank", rel: "noopener noreferrer", href: `https://github.com/Koenkk/zigbee2mqtt/commit/${bridgeInfo.commit}` }, bridgeInfo.commit)) :
            null;
        const rows = [
            { translationKey: 'zigbee2mqtt_version', content: react.createElement(react.Fragment, null,
                    zigbee2mqttVersion,
                    " ",
                    zigbee2mqttCommit) },
            { translationKey: 'coordinator_type', content: react.createElement(react.Fragment, null, (_c = (_b = bridgeInfo.coordinator) === null || _b === void 0 ? void 0 : _b.type) !== null && _c !== void 0 ? _c : t('common:unknown')) },
            { translationKey: 'coordinator_revision', content: react.createElement(react.Fragment, null, (_f = (_e = (_d = bridgeInfo.coordinator) === null || _d === void 0 ? void 0 : _d.meta) === null || _e === void 0 ? void 0 : _e.revision) !== null && _f !== void 0 ? _f : t('common:unknown')) },
            { translationKey: 'frontend_version', content: "0.6.30" },
        ];
        return react.createElement("div", { className: "p-3" }, rows.map(row => react.createElement("dl", { key: row.translationKey, className: "row" },
            react.createElement("dt", { className: "col-sm-3" }, t(row.translationKey)),
            react.createElement("dd", { className: "col-sm-9" }, row.content))));
    }
    renderBridgeInfo() {
        const { bridgeInfo } = this.props;
        return react.createElement("div", { className: "p-3" },
            react.createElement("pre", null, JSON.stringify(bridgeInfo, null, 4)));
    }
    renderTools() {
        const { exportState, restartBridge, t } = this.props;
        return react.createElement("div", { className: "p-3" },
            react.createElement(Button, { className: "btn btn-primary d-block mt-2", onClick: exportState }, t('download_state')),
            react.createElement(Button, { className: "btn btn-danger d-block mt-2", onClick: restartBridge, promt: true }, t('restart_zigbee2mqtt')));
    }
    getSettingsTabs() {
        const { bridgeInfo: { config_schema: configSchema = { properties: {} } }, t } = this.props;
        const tabs = Object.entries(configSchema.properties)
            .filter(([key, value]) => isValidKeyToRenderAsTab(key, value))
            .map(([key, value]) => ({
            name: key,
            title: t(key, { defaultValue: value.title })
        }));
        tabs.unshift({
            name: ROOT_KEY_NAME,
            title: t('main', { defaultValue: "Main" })
        });
        return tabs;
    }
    getSettingsInfo() {
        const { keyName } = this.state;
        const { bridgeInfo: { config_schema: configSchema, config: originalConfig } } = this.props;
        let configAndSchema = removePropertiesFromSchema(ingoredFields, cloneDeep_default()(configSchema), cloneDeep_default()(originalConfig));
        let currentSchema = configAndSchema.schema;
        let currentConfig = configAndSchema.config[keyName];
        if (keyName === ROOT_KEY_NAME) {
            const ignoreTabNames = this.getSettingsTabs().map(tab => tab.name);
            configAndSchema = removePropertiesFromSchema(ignoreTabNames, configAndSchema.schema, configAndSchema.config);
            currentSchema = configAndSchema.schema;
            currentConfig = configAndSchema.config;
        }
        else {
            currentConfig = configAndSchema.config[keyName];
            if (configAndSchema.schema.properties) {
                currentSchema = configAndSchema.schema.properties[keyName];
            }
        }
        return { currentSchema, currentConfig };
    }
    renderSettingsTabs() {
        const { t } = this.props;
        const tabs = this.getSettingsTabs();
        const { keyName } = this.state;
        return react.createElement("div", { className: "nav nav-pills" }, tabs.map(tab => react.createElement("li", { key: tab.name, className: "nav-item" },
            react.createElement("a", { className: classnames_default()("nav-link", { 'bg-primary active': keyName === tab.name }), "aria-current": "page", href: "#", onClick: (e) => { this.setState({ keyName: tab.name }); e.preventDefault(); } }, t(tab.name, { defaultValue: tab.title })))));
    }
    renderSettings() {
        const { keyName } = this.state;
        const { currentSchema, currentConfig } = this.getSettingsInfo();
        return react.createElement("div", { className: "tab" },
            this.renderSettingsTabs(),
            react.createElement("div", { className: "tab-content" },
                react.createElement("div", { className: "tab-pane active" },
                    react.createElement(bootstrap_4_esm/* default */.ZP, { idPrefix: keyName, schema: currentSchema, formData: currentConfig, onSubmit: this.onSettingsSave, uiSchema: uiSchema_namespaceObject[keyName], fields: rjsf_translation_fields }))));
    }
    renderDonate() {
        const { t } = this.props;
        const donateText = t("donation_text", { returnObjects: true, defaultValue: [] });
        return react.createElement("div", { className: "container-fluid" },
            donateText.map(row => react.createElement("p", { key: row }, row)),
            rows);
    }
}
const SettingsPageWithRouter = (0,react_router/* withRouter */.EN)(SettingsPage);
const settings_mappedProps = ["bridgeInfo", "missingTranslations"];
const ConnectedSettingsPage = (0,withTranslation/* withTranslation */.Z)(["settings", "common"])((0,unistore_react/* connect */.$)(settings_mappedProps, actions_actions)(SettingsPageWithRouter));
/* harmony default export */ const settings = (ConnectedSettingsPage);

;// CONCATENATED MODULE: ./src/hooks/useComponentVisible.tsx

function useComponentVisible(initialIsVisible) {
    const [isComponentVisible, setIsComponentVisible] = (0,react.useState)(initialIsVisible);
    const ref = (0,react.useRef)(null);
    const handleHideDropdown = (event) => {
        if (event.key === "Escape") {
            setIsComponentVisible(false);
        }
    };
    const handleClickOutside = (event) => {
        if (ref.current && !ref.current.contains(event.target)) {
            setIsComponentVisible(false);
        }
    };
    (0,react.useEffect)(() => {
        document.addEventListener("keydown", handleHideDropdown, true);
        document.addEventListener("click", handleClickOutside, true);
        return () => {
            document.removeEventListener("keydown", handleHideDropdown, true);
            document.removeEventListener("click", handleClickOutside, true);
        };
    });
    return { ref, isComponentVisible, setIsComponentVisible };
}

;// CONCATENATED MODULE: ./src/components/navbar/style.css
// extracted by mini-css-extract-plugin
/* harmony default export */ const navbar_style = ({"scrollable-menu":"C_SDyOPK0N5DR3_R7vh2"});
;// CONCATENATED MODULE: ./src/hooks/useOnClickOutside.tsx

function useOnClickOutside(ref, handler) {
    (0,react.useEffect)(() => {
        const listener = event => {
            if (!ref.current || ref.current.contains(event.target)) {
                return;
            }
            handler(event);
        };
        document.addEventListener('mousedown', listener);
        document.addEventListener('touchstart', listener);
        return () => {
            document.removeEventListener('mousedown', listener);
            document.removeEventListener('touchstart', listener);
        };
    }, [ref, handler]);
}

// EXTERNAL MODULE: ./node_modules/react-css-theme-switcher/dist/react-css-theme-switcher.esm.js
var react_css_theme_switcher_esm = __webpack_require__(5105);
;// CONCATENATED MODULE: ./src/components/theme-switcher.tsx



const ThemeSwitcher = (props) => {
    const { saveCurrentTheme } = props;
    const { switcher, themes, status, currentTheme } = (0,react_css_theme_switcher_esm/* useThemeSwitcher */.E)();
    const isDarkMode = currentTheme === 'dark';
    if (status === 'loading') {
        return react.createElement("div", null, "Loading styles...");
    }
    const toggleDarkMode = (light) => {
        const theme = light ? themes.light : themes.dark;
        saveCurrentTheme(theme);
        switcher({ theme });
    };
    return (react.createElement(Button, { item: isDarkMode, className: "btn btn-info", onClick: toggleDarkMode }, isDarkMode ? '🌑' : `🌞`));
};

// EXTERNAL MODULE: ./src/i18n/flags/us.png
var us = __webpack_require__(1639);
// EXTERNAL MODULE: ./src/i18n/flags/fr.png
var fr = __webpack_require__(8522);
// EXTERNAL MODULE: ./src/i18n/flags/pl.png
var pl = __webpack_require__(250);
// EXTERNAL MODULE: ./src/i18n/flags/de.png
var de = __webpack_require__(8234);
// EXTERNAL MODULE: ./src/i18n/flags/ru.png
var ru = __webpack_require__(9817);
// EXTERNAL MODULE: ./src/i18n/flags/ptbr.png
var ptbr = __webpack_require__(3510);
// EXTERNAL MODULE: ./src/i18n/flags/es.png
var es = __webpack_require__(8393);
// EXTERNAL MODULE: ./src/i18n/flags/ua.png
var ua = __webpack_require__(9774);
// EXTERNAL MODULE: ./src/i18n/flags/cn.png
var cn = __webpack_require__(634);
// EXTERNAL MODULE: ./src/i18n/flags/nl.png
var nl = __webpack_require__(7358);
// EXTERNAL MODULE: ./src/i18n/flags/it.png
var it = __webpack_require__(33);
// EXTERNAL MODULE: ./src/i18n/flags/tw.png
var tw = __webpack_require__(7822);
// EXTERNAL MODULE: ./src/i18n/flags/kr.png
var kr = __webpack_require__(3686);
// EXTERNAL MODULE: ./src/i18n/flags/missing-locale.png
var missing_locale = __webpack_require__(3876);
;// CONCATENATED MODULE: ./src/i18n/locales/localeNames.json
const localeNames_namespaceObject = JSON.parse('{"de":"Deutsch","en":"English","es":"Español","fr":"Français","nl":"Nederlands","pl":"Polski","ptbr":"Brazilian Portuguese","ru":"Русский","ua":"Українська","chs":"简体中文","it":"Italiano","zh":"繁體中文","ko":"한국어"}');
;// CONCATENATED MODULE: ./src/i18n/LocalePicker.tsx



















const localesMap = {
    en: us, fr: fr, pl: pl, de: de, ru: ru, ptbr: ptbr, es: es, ua: ua, chs: cn, nl: nl, it: it, zh: tw, ko: kr
};
function LocalePicker() {
    var _a;
    const { i18n } = (0,useTranslation/* useTranslation */.$)("localeNames");
    const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);
    const selectAndHide = (lang) => { i18n.changeLanguage(lang); setIsComponentVisible(false); };
    const locales = Object.keys(i18n.options.resources).map((language) => {
        var _a;
        return (react.createElement("a", { key: language, className: "dropdown-item", href: "#", onClick: (e) => {
                selectAndHide(language);
                e.preventDefault();
            } },
            react.createElement("img", { src: (_a = localesMap[language]) !== null && _a !== void 0 ? _a : missing_locale, alt: localeNames_namespaceObject[language], width: "20", className: "align-middle me-1" }),
            react.createElement("span", { className: "align-middle" }, localeNames_namespaceObject[language])));
    });
    const currentLanguage = i18n.language.split('-')[0];
    return (react.createElement("li", { className: "nav-item dropdown" },
        react.createElement("a", { className: classnames_default()("nav-flag dropdown-toggle", { show: isComponentVisible }), href: "#", onClick: (e) => {
                setIsComponentVisible(!isComponentVisible);
                e.preventDefault();
            } },
            react.createElement("img", { src: (_a = localesMap[currentLanguage]) !== null && _a !== void 0 ? _a : missing_locale, alt: localeNames_namespaceObject[currentLanguage] })),
        react.createElement("div", { ref: ref, className: classnames_default()("dropdown-menu dropdown-menu-end", { show: isComponentVisible }) }, locales)));
}

;// CONCATENATED MODULE: ./src/components/navbar/index.tsx












const urls = [
    {
        href: '/',
        key: 'devices',
        exact: true
    },
    {
        href: '/dashboard',
        key: 'dashboard'
    },
    {
        href: '/map',
        key: 'map'
    },
    {
        href: '/settings',
        key: 'settings'
    },
    {
        href: '/groups',
        key: 'groups'
    },
    {
        href: '/ota',
        key: 'ota'
    },
    {
        href: '/touchlink',
        key: 'touchlink'
    },
    {
        href: '/logs',
        key: 'logs'
    },
    {
        href: '/extensions',
        key: 'extensions'
    }
];
const StartStopJoinButton = ({ devices, setPermitJoin, bridgeInfo }) => {
    var _a;
    const { t } = (0,useTranslation/* useTranslation */.$)(['navbar']);
    const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);
    const [selectedRouter, setSelectedRouter] = (0,react.useState)({});
    const { permit_join: permitJoin, permit_join_timeout: permitJoinTimeout } = bridgeInfo;
    const routers = [];
    const selectAndHide = (device) => { setSelectedRouter(device); setIsComponentVisible(false); };
    Object.values(devices).forEach((device) => {
        if (device.type == "Router") {
            routers.push(react.createElement("li", { key: device.friendly_name },
                react.createElement(Button, { item: device, className: "dropdown-item", onClick: selectAndHide }, device.friendly_name)));
        }
    });
    const onBtnClick = () => {
        setPermitJoin(!permitJoin, selectedRouter);
    };
    const permitJoinTimer = react.createElement(react.Fragment, null, permitJoinTimeout ? react.createElement("div", { className: "d-inline-block ms-1", style: { width: '30px', maxWidth: '30px' } },
        " ",
        permitJoinTimeout) : null);
    const buttonLabel = react.createElement(react.Fragment, null,
        permitJoin ? t("disable_join") : t("permit_join"),
        " (", (_a = selectedRouter === null || selectedRouter === void 0 ? void 0 : selectedRouter.friendly_name) !== null && _a !== void 0 ? _a : t("all"),
        ")",
        permitJoinTimer);
    return (react.createElement("div", { className: "btn-group text-nowrap me-1" },
        react.createElement("button", { onClick: onBtnClick, type: "button", className: "btn btn-outline-secondary" }, buttonLabel),
        routers.length ? (react.createElement(react.Fragment, null,
            react.createElement(Button, { type: "button", onClick: setIsComponentVisible, item: !isComponentVisible, className: "btn btn-outline-secondary dropdown-toggle dropdown-toggle-split", "data-toggle": "dropdown", "aria-expanded": "false" },
                react.createElement("span", { className: "visually-hidden" }, t('toggle_dropdown'))),
            react.createElement("ul", { ref: ref, className: classnames_default()('dropdown-menu', navbar_style["scrollable-menu"], { show: isComponentVisible }) },
                react.createElement("li", { key: 'all' },
                    react.createElement(Button, { className: "dropdown-item", onClick: selectAndHide }, t('all'))),
                routers))) : null));
};
const NavBar = (props) => {
    const { devices, setPermitJoin, bridgeInfo, restartBridge, setTheme, t, i18n } = props;
    const ref = (0,react.useRef)();
    const [navbarIsVisible, setnavbarIsVisible] = (0,react.useState)(false);
    useOnClickOutside(ref, () => {
        setnavbarIsVisible(false);
    });
    return (react.createElement("nav", { className: "navbar navbar-expand-md navbar-light" },
        react.createElement("div", { ref: ref, className: "container-fluid" },
            react.createElement(react_router_dom/* Link */.rU, { onClick: () => setnavbarIsVisible(false), to: "/" }, "Zigbee2MQTT"),
            react.createElement("button", { onClick: () => { setnavbarIsVisible(!navbarIsVisible); }, className: "navbar-toggler", type: "button" },
                react.createElement("span", { className: "navbar-toggler-icon" })),
            react.createElement("div", { className: classnames_default()("navbar-collapse collapse", { show: navbarIsVisible }) },
                react.createElement("ul", { className: "navbar-nav" },
                    urls.map(url => react.createElement("li", { key: url.href, className: "nav-item" },
                        react.createElement(react_router_dom/* NavLink */.OL, { onClick: () => setnavbarIsVisible(false), exact: url.exact, className: "nav-link", to: url.href, activeClassName: "active" }, t(url.key)))),
                    react.createElement(LocalePicker, null)),
                react.createElement(StartStopJoinButton, { devices: devices, setPermitJoin: setPermitJoin, bridgeInfo: bridgeInfo }),
                react.createElement(ThemeSwitcher, { saveCurrentTheme: setTheme })),
            bridgeInfo.restart_required ? react.createElement(Button, { onClick: restartBridge, promt: true, className: "btn btn-danger me-1" }, t('restart')) : null)));
};
const navbar_mappedProps = ["bridgeInfo", "devices"];
const ConnectedNavBar = (0,withTranslation/* withTranslation */.Z)("navbar")((0,unistore_react/* connect */.$)(navbar_mappedProps, actions_actions)(NavBar));
/* harmony default export */ const navbar = (ConnectedNavBar);

;// CONCATENATED MODULE: ./src/hooks/useInputChange.ts

const useInputChange = (initialState) => {
    const [input, setInput] = (0,react.useState)(initialState);
    const handleInputChange = (e) => setInput({
        ...input,
        [e.currentTarget.name]: e.currentTarget.value
    });
    return [input, handleInputChange];
};

;// CONCATENATED MODULE: ./src/components/groups/RenameForm.tsx





function RenameGroupForm(props) {
    const { name, onRename } = props;
    const { isOpen, toggle } = hooks_useModal(false);
    const [renameGroupForm, handleInputChange] = useInputChange({ friendlyName: name });
    return (react.createElement(react.Fragment, null,
        react.createElement(modal_Modal, { isOpen: isOpen },
            react.createElement(ModalHeader, null,
                react.createElement("h3", null, "Rename group"),
                react.createElement("small", null, name)),
            react.createElement(ModalBody, null,
                react.createElement("div", { className: "mb-3" },
                    react.createElement("label", { className: "form-label" }, "Friendly name"),
                    react.createElement("input", { name: "friendlyName", onChange: handleInputChange, type: "text", className: "form-control", value: renameGroupForm['friendlyName'] }))),
            react.createElement(ModalFooter, null,
                react.createElement("button", { type: "button", className: "btn btn-secondary", onClick: toggle }, "Close"),
                react.createElement("button", { type: "button", className: "btn btn-primary", onClick: () => { onRename(name, renameGroupForm['friendlyName']); toggle(); } }, "Save changes"))),
        react.createElement(Button, { className: "btn btn-primary", onClick: toggle, title: "Rename group" },
            react.createElement("i", { className: "fa fa-edit" }))));
}

;// CONCATENATED MODULE: ./src/components/groups/index.tsx







class GroupsPage extends react.Component {
    constructor() {
        super(...arguments);
        this.state = {
            newGroupName: '',
            newGroupId: undefined
        };
        this.changeHandler = (event) => {
            const { name, value } = event.target;
            this.setState({ [name]: value });
        };
        this.onGroupCreateSubmit = () => {
            const { newGroupName, newGroupId } = this.state;
            const { createGroup } = this.props;
            createGroup(newGroupName, newGroupId);
        };
        this.removeGroup = (friendlyName) => {
            const { removeGroup } = this.props;
            removeGroup(friendlyName);
        };
        this.renameGroup = (oldName, newName) => {
            const { renameGroup } = this.props;
            renameGroup(oldName, newName);
        };
    }
    renderGroupCreationForm() {
        const { t } = this.props;
        const { newGroupName, newGroupId } = this.state;
        return (react.createElement("div", { className: "card" },
            react.createElement("div", { className: "card-body" },
                react.createElement("div", { className: "input-group" },
                    react.createElement("label", { htmlFor: "newGroupName", className: "sr-only" }, t('new_group_name')),
                    react.createElement("input", { onChange: this.changeHandler, value: newGroupName, required: true, type: "text", name: "newGroupName", className: "form-control", id: "newGroupName", placeholder: t('new_group_name_placeholder') }),
                    react.createElement("label", { htmlFor: "newGroupName", className: "sr-only" }, t('new_group_id')),
                    react.createElement("input", { onChange: this.changeHandler, value: newGroupId === undefined ? '' : newGroupId, type: "number", name: "newGroupId", className: "form-control", id: "newGroupId", placeholder: t('new_group_id_placeholder') }),
                    react.createElement(Button, { onClick: this.onGroupCreateSubmit, className: "btn btn-primary form-control" }, t('create_group'))))));
    }
    renderGroups() {
        const { groups, t } = this.props;
        const { setStateValue, setDeviceState, getDeviceState } = this.props;
        return react.createElement("div", { className: "card" },
            react.createElement("div", { className: "card-body" },
                react.createElement("table", { className: "table" },
                    react.createElement("thead", null,
                        react.createElement("tr", null,
                            react.createElement("th", { scope: "col" }, t('group_id')),
                            react.createElement("th", { scope: "col" }, t('group_name')),
                            react.createElement("th", { scope: "col" }, t('group_members')),
                            react.createElement("th", { scope: "col" }, t('group_scenes')),
                            react.createElement("th", { scope: "col" }, "\u00A0"))),
                    react.createElement("tbody", null, groups.map(group => (react.createElement("tr", { key: group.id },
                        react.createElement("td", null,
                            react.createElement(react_router_dom/* Link */.rU, { to: `/group/${group.id}` }, group.id)),
                        react.createElement("td", null,
                            react.createElement(react_router_dom/* Link */.rU, { to: `/group/${group.id}` }, group.friendly_name)),
                        react.createElement("td", null, group.members.length),
                        react.createElement("td", null, group.scenes.length),
                        react.createElement("td", null,
                            react.createElement("div", { className: "btn-group float-right btn-group-sm", role: "group" },
                                react.createElement(RenameGroupForm, { name: group.friendly_name, onRename: this.renameGroup }),
                                react.createElement(Button, { promt: true, title: t('remove_group'), item: group.friendly_name, onClick: this.removeGroup, className: "btn btn-danger" },
                                    react.createElement("i", { className: "fa fa-trash" }))))))).reverse()))));
    }
    render() {
        return react.createElement(react.Fragment, null,
            this.renderGroupCreationForm(),
            this.renderGroups());
    }
}
const groups_mappedProps = ["groups", "devices", "deviceStates", "bridgeInfo"];
const ConnectedGroupsPage = (0,withTranslation/* withTranslation */.Z)("groups")((0,unistore_react/* connect */.$)(groups_mappedProps, actions_actions)(GroupsPage));
/* harmony default export */ const groups = (ConnectedGroupsPage);

// EXTERNAL MODULE: ./node_modules/lodash/orderBy.js
var orderBy = __webpack_require__(5472);
var orderBy_default = /*#__PURE__*/__webpack_require__.n(orderBy);
;// CONCATENATED MODULE: ./src/components/zigbee/ActionTH.tsx


class ActionTH extends react.Component {
    constructor() {
        super(...arguments);
        this.onClick = (event) => {
            event.preventDefault();
            event.stopPropagation();
            const { column, onClick } = this.props;
            onClick && onClick(column);
        };
    }
    renderArrow() {
        const { currentDirection, current, column } = this.props;
        if (isEqual_default()(current, column)) {
            if (currentDirection == "asc") {
                return react.createElement("i", { className: `fa fa-sort-amount-down-alt` });
            }
            return react.createElement("i", { className: `fa fa-sort-amount-down` });
        }
        return react.createElement("i", { className: `fa fa-sort-amount-down invisible` });
    }
    render() {
        const { children, onClick, current, column, currentDirection, ...rest } = this.props;
        return (react.createElement("th", { ...rest },
            react.createElement("span", { className: "btn btn-link", onClick: this.onClick }, children),
            this.renderArrow()));
    }
}

;// CONCATENATED MODULE: ./src/components/zigbee/style.css
// extracted by mini-css-extract-plugin
/* harmony default export */ const zigbee_style = ({"action-column":"Sz_HOVlUGXEGcBgHiQOy","device-pic":"OjEk_at86Lnxdb_Jq9Cj","device-image":"PmWChHpc4nd1o4IBxsM6"});
;// CONCATENATED MODULE: ./src/components/zigbee/TableHeader.tsx




const TableHeader = (props) => {
    const { sortColumn, sortDirection, onSortChange, lastSeenType } = props;
    const { t } = (0,useTranslation/* useTranslation */.$)(['zigbee']);
    return (react.createElement("thead", null,
        react.createElement("tr", { className: "text-nowrap" },
            react.createElement("th", null, "#"),
            react.createElement("th", null, t('pic')),
            react.createElement(ActionTH, { className: zigbee_style["action-column"], column: "device.friendly_name", currentDirection: sortDirection, current: sortColumn, onClick: onSortChange }, t('friendly_name')),
            react.createElement(ActionTH, { className: zigbee_style["action-column"], column: "device.ieee_address", currentDirection: sortDirection, current: sortColumn, onClick: onSortChange }, t('ieee_address')),
            react.createElement(ActionTH, { className: zigbee_style["action-column"], column: "device.definition.vendor", currentDirection: sortDirection, current: sortColumn, onClick: onSortChange }, t('manufacturer')),
            react.createElement(ActionTH, { className: zigbee_style["action-column"], column: "device.definition.model", currentDirection: sortDirection, current: sortColumn, onClick: onSortChange }, t('model')),
            react.createElement(ActionTH, { className: zigbee_style["action-column"], column: "state.linkquality", currentDirection: sortDirection, current: sortColumn, onClick: onSortChange }, t('lqi')),
            lastSeenType !== "disable" && react.createElement(ActionTH, { className: zigbee_style["action-column"], column: "lastSeen", currentDirection: sortDirection, current: sortColumn, onClick: onSortChange }, t('last_seen')),
            react.createElement(ActionTH, { className: zigbee_style["action-column"], column: "state.battery", currentDirection: sortDirection, current: sortColumn, onClick: onSortChange }, t('power')),
            react.createElement("th", null, "\u00A0"))));
};

;// CONCATENATED MODULE: ./src/components/zigbee/TableRow.tsx










const TableRow = (props) => {
    var _a, _b, _c;
    const { device, deviceState = {}, id, lastSeenType } = props;
    return react.createElement("tr", { key: device.friendly_name, title: ((_a = deviceState.update) === null || _a === void 0 ? void 0 : _a.state) == "available" ? 'Avaliable OTA update' : (_b = device.definition) === null || _b === void 0 ? void 0 : _b.description },
        react.createElement("td", { className: "font-weight-bold" }, id + 1),
        react.createElement("td", { className: zigbee_style["device-pic"] },
            react.createElement(device_image, { className: zigbee_style["device-image"], device: device, deviceStatus: deviceState })),
        react.createElement("td", null,
            react.createElement(react_router_dom/* Link */.rU, { to: genDeviceDetailsLink(device.ieee_address) }, device.friendly_name)),
        react.createElement("td", null,
            device.ieee_address,
            " (",
            toHex(device.network_address, 4),
            ")"),
        react.createElement("td", { className: "text-truncate text-nowrap position-relative" },
            react.createElement(VendorLink, { device: device })),
        react.createElement("td", { title: (_c = device === null || device === void 0 ? void 0 : device.definition) === null || _c === void 0 ? void 0 : _c.description },
            react.createElement(ModelLink, { device: device })),
        react.createElement("td", null,
            react.createElement(DisplayValue, { value: deviceState === null || deviceState === void 0 ? void 0 : deviceState.linkquality, name: "linkquality" })),
        lastSeenType !== "disable" && react.createElement("td", null,
            react.createElement(LastSeen, { state: deviceState, lastSeenType: lastSeenType })),
        react.createElement("td", { className: "text-left" },
            react.createElement(power_source, { source: device.power_source, battery: deviceState === null || deviceState === void 0 ? void 0 : deviceState.battery, batteryLow: deviceState.battery_low })),
        react.createElement("td", null,
            react.createElement(device_control_DeviceControlGroup, { device: device, state: deviceState })));
};

;// CONCATENATED MODULE: ./src/components/zigbee/index.tsx











const storeKey = "ZigbeeTableState";
const longLoadingTimeout = 15 * 1000;
class ZigbeeTable extends react.Component {
    constructor(props) {
        super(props);
        this.saveState = () => {
            const { sortDirection, sortColumn } = this.state;
            const storeData = {
                sortDirection,
                sortColumn
            };
            try {
                localStorage.setItem(storeKey, JSON.stringify(storeData));
            }
            catch (e) {
                new notyf_es/* Notyf */.Iq().error(e.toString());
            }
        };
        this.handleLongLoading = () => {
            const { devices } = this.props;
            if (Object.keys(devices).length == 0) {
                const error = react.createElement(react.Fragment, null,
                    react.createElement("strong", null, "Loading devices takes too long time."),
                    react.createElement("div", null,
                        "Consider reading ",
                        react.createElement("a", { href: "https://www.zigbee2mqtt.io/information/frontend.html" }, "documentation")));
                this.setState({ error });
            }
        };
        this.onSortChange = (column, sortDir) => {
            const { sortColumn } = this.state;
            let { sortDirection } = this.state;
            if (isEqual_default()(sortColumn, column)) {
                if (sortDir) {
                    sortDirection = sortDir;
                }
                else if (sortDirection == "asc") {
                    sortDirection = "desc";
                }
                else {
                    sortDirection = "asc";
                }
            }
            this.setState({ sortColumn: column, sortDirection }, this.saveState);
        };
        this.state = {
            sortDirection: "desc",
            sortColumn: "device.network_address",
            currentTime: Date.now(),
            search: ""
        };
    }
    restoreState() {
        const { sortColumn, sortDirection } = this.state;
        const storedState = localStorage.getItem(storeKey);
        if (storedState) {
            try {
                const restored = JSON.parse(storedState);
                this.setState(restored);
            }
            catch (e) {
                new notyf_es/* Notyf */.Iq().error(e.toString());
            }
        }
        else {
            this.onSortChange(sortColumn, sortDirection);
        }
    }
    componentDidMount() {
        setTimeout(this.handleLongLoading, longLoadingTimeout);
        this.restoreState();
    }
    renderError() {
        const { error } = this.state;
        return (react.createElement("div", { className: "h-100 d-flex justify-content-center align-items-center" },
            react.createElement("div", { className: "d-flex align-items-center" }, error)));
    }
    render() {
        const { error } = this.state;
        const { devices } = this.props;
        if (Object.keys(devices).length) {
            return this.renderDevicesTable();
        }
        if (error) {
            return this.renderError();
        }
        return (react.createElement("div", { className: "h-100 d-flex justify-content-center align-items-center" },
            react.createElement(spinner, null)));
    }
    getDevicesToRender() {
        const { sortColumn, sortDirection, search } = this.state;
        const { devices, deviceStates, bridgeInfo } = this.props;
        const tableData = [];
        const lastSeenType = getLastSeenType(bridgeInfo === null || bridgeInfo === void 0 ? void 0 : bridgeInfo.config.advanced);
        const searchQuery = search.toLowerCase();
        Object.values(devices).filter((device) => {
            var _a, _b, _c;
            return ((_a = device.friendly_name) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(searchQuery))
                || device.ieee_address.toLowerCase().includes(searchQuery)
                || ((_b = device.definition) === null || _b === void 0 ? void 0 : _b.model.toLowerCase().includes(searchQuery))
                || ((_c = device.definition) === null || _c === void 0 ? void 0 : _c.vendor.toLowerCase().includes(searchQuery));
        }).forEach((device) => {
            var _a;
            if (device.type !== "Coordinator") {
                const state = (_a = deviceStates[device.friendly_name]) !== null && _a !== void 0 ? _a : {};
                tableData.push({
                    device,
                    state,
                    lastSeen: lastSeen(state, lastSeenType)
                });
            }
        });
        return orderBy_default()(tableData, sortColumn, [sortDirection]);
    }
    renderDevicesTable() {
        const { bridgeInfo, t } = this.props;
        const devices = this.getDevicesToRender();
        const { sortColumn, sortDirection, search } = this.state;
        const lastSeenType = getLastSeenType(bridgeInfo.config.advanced);
        return (react.createElement(react.Fragment, null,
            react.createElement("div", { className: "card" },
                react.createElement("div", { className: "col-12" },
                    react.createElement("input", { id: "search-filter", className: "form-control col-10", placeholder: t('common:enter_search_criteria'), value: search, onChange: (e) => this.setState({ search: e.target.value }), type: "text" }))),
            react.createElement("div", { className: "card" },
                react.createElement("div", { className: "table-responsive mt-1" },
                    react.createElement("table", { className: "table align-middle" },
                        react.createElement(TableHeader, { lastSeenType: lastSeenType, sortColumn: sortColumn, sortDirection: sortDirection, onSortChange: this.onSortChange }),
                        react.createElement("tbody", null, devices.map(({ device, state }, index) => react.createElement(TableRow, { key: device.friendly_name, device: device, deviceState: state, id: index, lastSeenType: lastSeenType }))))))));
    }
}
const zigbee_mappedProps = ["devices", "deviceStates", "bridgeInfo"];
const ConnectedZigbeePage = (0,withTranslation/* withTranslation */.Z)(["zigbee", "common"])((0,unistore_react/* connect */.$)(zigbee_mappedProps, actions_actions)(ZigbeeTable));
/* harmony default export */ const zigbee = (ConnectedZigbeePage);

;// CONCATENATED MODULE: ./src/components/ota-page/index.tsx








const StateCell = (props) => {
    var _a;
    const { t } = (0,useTranslation/* useTranslation */.$)("ota");
    const { device, state, checkOTA, updateOTA } = props;
    switch ((_a = state === null || state === void 0 ? void 0 : state.update) === null || _a === void 0 ? void 0 : _a.state) {
        case "updating":
            return (react.createElement(react.Fragment, null,
                react.createElement("div", { className: "progress" },
                    react.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", style: { width: `${state.update.progress}%` } },
                        state.update.progress,
                        "%")),
                react.createElement("div", null, t('remaining_time', { remaining: toHHMMSS(state.update.remaining) }))));
        case "available":
            return react.createElement(Button, { className: "btn btn-danger btn-sm", onClick: updateOTA, item: device.friendly_name, promt: true }, t("update"));
        default:
            return react.createElement(Button, { className: "btn btn-primary btn-sm", onClick: checkOTA, item: device.friendly_name }, t('check'));
    }
};
const OtaRow = (props) => {
    var _a;
    const { device, state, ...rest } = props;
    return react.createElement("tr", null,
        react.createElement("td", null,
            react.createElement(react_router_dom/* Link */.rU, { to: genDeviceDetailsLink(device.ieee_address) }, device.friendly_name)),
        react.createElement("td", { className: "text-truncate text-nowrap position-relative" },
            react.createElement(VendorLink, { device: device })),
        react.createElement("td", { title: (_a = device === null || device === void 0 ? void 0 : device.definition) === null || _a === void 0 ? void 0 : _a.description },
            react.createElement(ModelLink, { device: device })),
        react.createElement("td", null, device.date_code),
        react.createElement("td", null,
            react.createElement(OTALink, { device: device })),
        react.createElement("td", null,
            react.createElement(StateCell, { device: device, state: state, ...rest })));
};
class OtaPage extends react.Component {
    constructor() {
        super(...arguments);
        this.checkAllOTA = () => {
            const { checkOTA } = this.props;
            const otaDevices = this.getAllOtaDevices();
            otaDevices.forEach(device => checkOTA(device.friendly_name));
        };
    }
    getAllOtaDevices() {
        const { devices } = this.props;
        return Object.values(devices).filter(device => { var _a; return (_a = device === null || device === void 0 ? void 0 : device.definition) === null || _a === void 0 ? void 0 : _a.supports_ota; });
    }
    render() {
        const { deviceStates, checkOTA, updateOTA, t } = this.props;
        const otaApi = { checkOTA, updateOTA };
        const otaDevices = this.getAllOtaDevices();
        return react.createElement("div", { className: "card" },
            react.createElement("div", { className: "card-body table-responsive" },
                react.createElement("table", { className: "table" },
                    react.createElement("thead", null,
                        react.createElement("tr", null,
                            react.createElement("th", { scope: "col" }, t("zigbee:friendly_name")),
                            react.createElement("th", null, t("zigbee:manufacturer")),
                            react.createElement("th", null, t("zigbee:model")),
                            react.createElement("th", null, t("zigbee:firmware_build_date")),
                            react.createElement("th", null, t("zigbee:firmware_version")),
                            react.createElement("th", null,
                                react.createElement(Button, { className: "btn btn-danger btn-sm", onClick: this.checkAllOTA, promt: true }, t('check_all'))))),
                    react.createElement("tbody", null,
                        otaDevices.length === 0 ? react.createElement("tr", null,
                            react.createElement("td", { colSpan: 6 }, t('empty_ota_message'))) : null,
                        otaDevices.map(device => (react.createElement(OtaRow, { key: device.ieee_address, device: device, state: deviceStates[device.friendly_name], ...otaApi })))))));
    }
}
const ota_page_mappedProps = ["devices", "deviceStates"];
/* harmony default export */ const ota_page = ((0,withTranslation/* withTranslation */.Z)(["ota", "zigbee", "common"])((0,unistore_react/* connect */.$)(ota_page_mappedProps, actions_actions)(OtaPage)));

;// CONCATENATED MODULE: ./src/components/ErrorBoundary.tsx



class ErrorBoundary extends react.Component {
    constructor() {
        super(...arguments);
        this.state = {};
        this.donwloadState = (e) => {
            download(src_store.getState(), 'initialState.json');
            e.preventDefault();
        };
    }
    static getDerivedStateFromError(error) {
        return { error };
    }
    render() {
        const { error } = this.state;
        if (error) {
            const githubUrlParams = {
                template: 'bug_report.yaml',
                stacktracke: [
                    `**Current url**: ${window.location.toString()}`,
                    `**Previous url**: ${document.referrer}`,
                    "\n",
                    `**Error type**: ${error === null || error === void 0 ? void 0 : error.name}`,
                    `**Error message**: ${error === null || error === void 0 ? void 0 : error.message}`,
                    "\n\n",
                    error === null || error === void 0 ? void 0 : error.stack
                ].join("\n")
            };
            const githubUrl = `https://github.com/nurikk/zigbee2mqtt-frontend/issues/new?${new URLSearchParams(githubUrlParams).toString()}`;
            return react.createElement("div", { className: "container" },
                react.createElement("h1", { className: "text-danger" }, "Hello, you've found a bug. Congratulations!"),
                react.createElement("ol", null,
                    react.createElement("li", { className: "fs-1 lh-lg" }, "Calm down"),
                    react.createElement("li", { className: "fs-1 lh-lg" },
                        react.createElement("a", { className: "link-primary animation-blinking", href: "#", onClick: this.donwloadState }, "Click here, and save this file")),
                    react.createElement("li", { className: "fs-1 lh-lg" },
                        react.createElement("a", { target: "_blank", rel: "noopener noreferrer", href: githubUrl }, "Raise a github issue"),
                        ", attach ",
                        react.createElement("b", null, "previously"),
                        " downloaded file"),
                    react.createElement("li", { className: "fs-1 lh-lg" }, "Take a screenshot of this page and attach to the issue"),
                    react.createElement("li", { className: "fs-1 lh-lg" }, "In the github issue write detailed description for the issue, how this happened? Steps to reproduce")),
                react.createElement("div", null,
                    react.createElement("div", null, error.name),
                    react.createElement("div", null, error.message),
                    react.createElement("pre", null, error.stack)));
        }
        return this.props.children;
    }
    componentDidUpdate(prevProps) {
        const { location: { pathname } } = this.props;
        const { location: { pathname: prevPathname } } = prevProps;
        if (prevPathname !== pathname) {
            this.setState({ error: undefined });
        }
    }
}

;// CONCATENATED MODULE: ./src/components/dashboard-page/DeviceFooter.tsx



const footerFeatures = [
    "linkquality"
];
const DeviceFooter = ({ device, deviceState, lastSeenType }) => {
    const { linkquality } = deviceState;
    const { exposes } = device.definition;
    const rederedFeatures = [];
    exposes
        .filter(e => footerFeatures.includes(e.name))
        .forEach(e => {
        switch (e.name) {
            case "linkquality":
                linkquality && rederedFeatures.push(react.createElement("span", { key: "linkquality", className: "me-1" },
                    react.createElement("i", { className: "fa fa-signal fa-fw" }),
                    " ",
                    linkquality,
                    " LQI"));
                break;
            default:
                break;
        }
    });
    rederedFeatures.push(react.createElement(power_source, { key: "power", source: device.power_source, battery: deviceState.battery }));
    return (react.createElement("footer", { className: "card-footer pt-0" },
        react.createElement("div", { className: "row justify-content-between flex-nowrap" },
            react.createElement("div", { title: "last update", className: "col text-truncate" },
                react.createElement(LastSeen, { state: deviceState, lastSeenType: lastSeenType })),
            react.createElement("div", { className: "col col-auto text-truncate" }, rederedFeatures))));
};
/* harmony default export */ const dashboard_page_DeviceFooter = (DeviceFooter);

;// CONCATENATED MODULE: ./src/components/dashboard-page/DashboardDevice.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const DashboardDevice = ({"deviceImage":"U0gl5eYLxFhDOxLEcl6g"});
;// CONCATENATED MODULE: ./src/components/dashboard-page/DashboardDevice.tsx








const DashboardDevice_DashboardDevice = ({ onChange, onRead, device, deviceState, lastSeenType, feature: { features }, featureWrapperClass, controls }) => {
    return (react.createElement("div", { className: "col-xl-3 col-lg-4 col-sm-6 col-12 d-flex" },
        react.createElement("div", { className: `flex-fill card flex-shrink-1` },
            react.createElement("div", { className: "card-header pb-0 d-flex justify-content-between" },
                react.createElement(react_router_dom/* Link */.rU, { to: genDeviceDetailsLink(device.ieee_address) },
                    react.createElement(device_image, { device: device, className: classnames_default()(DashboardDevice.deviceImage, 'me-2 d-inline') }),
                    device.friendly_name),
                controls),
            react.createElement("div", { className: `card-body align-items-center row` },
                react.createElement(composite, { feature: { features }, className: "row", type: "composite", device: device, deviceState: deviceState, onChange: onChange, onRead: onRead, featureWrapperClass: featureWrapperClass, minimal: true })),
            react.createElement(dashboard_page_DeviceFooter, { device: device, deviceState: deviceState, lastSeenType: lastSeenType }))));
};
/* harmony default export */ const dashboard_page_DashboardDevice = (DashboardDevice_DashboardDevice);

;// CONCATENATED MODULE: ./src/components/groups/DeviceGroupRow.tsx







function filterDeviceByFeatures(devices, deviceStates, filterFn) {
    return Object.values(devices)
        .filter(device => device.supported)
        .map(device => { var _a; return ({ device, deviceState: (_a = deviceStates[device.friendly_name]) !== null && _a !== void 0 ? _a : {} }); })
        .map(({ device, deviceState }) => {
        var _a, _b;
        const _features = ((_b = (_a = device.definition) === null || _a === void 0 ? void 0 : _a.exposes) !== null && _b !== void 0 ? _b : []);
        const filteredFeatures = _features
            .map((e) => filterFn(e, deviceState))
            .filter(f => f);
        return { device, deviceState, filteredFeatures };
    })
        .filter(({ filteredFeatures }) => filteredFeatures.length > 0)
        .sort((a, b) => a.device.friendly_name.localeCompare(b.device.friendly_name));
}
function DeviceGroupRow(props) {
    var _a, _b, _c, _d;
    const { t } = (0,useTranslation/* useTranslation */.$)('devicePage');
    const { removeDeviceFromGroup, groupAddress, devices, deviceStates, bridgeInfo } = props;
    const device = (_a = devices[groupAddress.ieee_address]) !== null && _a !== void 0 ? _a : { ieee_address: groupAddress.ieee_address, friendly_name: t('unknown_device') };
    const deviceState = (_b = deviceStates[device.friendly_name]) !== null && _b !== void 0 ? _b : {};
    const lastSeenType = getLastSeenType(bridgeInfo.config.advanced);
    const { setDeviceState, getDeviceState } = props;
    let filteredFeatures = [];
    if (device.definition) {
        filteredFeatures = ((_d = (_c = device.definition) === null || _c === void 0 ? void 0 : _c.exposes) !== null && _d !== void 0 ? _d : [])
            .map((e) => onlyValidFeaturesForScenes(e, deviceState))
            .filter(f => f);
    }
    return react.createElement(dashboard_page_DashboardDevice, { key: device.ieee_address, feature: { features: filteredFeatures }, device: device, deviceState: deviceState, onChange: (endpoint, value) => setDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value), onRead: (endpoint, value) => getDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value), featureWrapperClass: DashboardFeatureWrapper, lastSeenType: lastSeenType, controls: react.createElement(Button, { promt: true, item: device.friendly_name, onClick: removeDeviceFromGroup, className: "btn btn-danger btn-sm float-right" },
            react.createElement("i", { className: "fa fa-trash" })) });
}

;// CONCATENATED MODULE: ./src/components/dashboard-page/index.tsx










const genericRendererIgnoredNames = ['linkquality', 'battery', 'battery_low',
    'illuminance_lux', 'color_temp_startup', 'voltage',
    'strength', 'color_options', 'warning', 'position', 'operation_mode', 'operation_mode2'];
const dashboard_page_whitelistFeatureNames = ['state', 'brightness', 'color_temp', 'mode', 'sound', 'occupancy', 'tamper', 'alarm'];
const whitelistFeatureTypes = ['light'];
const nullish = ['', null, undefined];
const onlyValidFeaturesForDashboard = (feature, deviceState = {}) => {
    const { access, property, name, type } = feature;
    let { features } = feature;
    if (isLightFeature(feature) || isClimateFeature(feature)) {
        features = features.map(f => onlyValidFeaturesForDashboard(f, (property ? deviceState[property] : deviceState))).filter(f => f);
        const groupedFeatures = groupBy_default()(features, 'property');
        features = Object.values(groupedFeatures).map(f => f[0]);
    }
    const filteredOutFeature = { ...feature, features };
    if (dashboard_page_whitelistFeatureNames.includes(name)) {
        return filteredOutFeature;
    }
    if (whitelistFeatureTypes.includes(type)) {
        return filteredOutFeature;
    }
    if (access && !(access & FeatureAccessMode.ACCESS_STATE && !nullish.includes(deviceState[property]))) {
        return false;
    }
    if (name == 'voltage' && deviceState.battery == undefined) {
        return filteredOutFeature;
    }
    if (genericRendererIgnoredNames.includes(name)) {
        return false;
    }
    if (access & FeatureAccessMode.ACCESS_STATE && isOnlyOneBitIsSet(access)) {
        return filteredOutFeature;
    }
    if (Array.isArray(features) && features.length > 0) {
        return filteredOutFeature;
    }
    return false;
};
const Dashboard = (props) => {
    const { setDeviceState, getDeviceState, deviceStates, bridgeInfo } = props;
    const lastSeenType = getLastSeenType(bridgeInfo.config.advanced);
    return (react.createElement("div", { className: "row" }, filterDeviceByFeatures(props.devices, deviceStates, onlyValidFeaturesForDashboard).map(({ device, deviceState, filteredFeatures }) => {
        return (react.createElement(dashboard_page_DashboardDevice, { key: device.ieee_address, feature: { features: filteredFeatures }, device: device, deviceState: deviceState, onChange: (endpoint, value) => setDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value), onRead: (endpoint, value) => getDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value), featureWrapperClass: DashboardFeatureWrapper, lastSeenType: lastSeenType }));
    })));
};
const dashboard_page_mappedProps = ['devices', 'deviceStates', 'bridgeInfo'];
/* harmony default export */ const dashboard_page = ((0,unistore_react/* connect */.$)(dashboard_page_mappedProps, actions_actions)(Dashboard));

// EXTERNAL MODULE: ./node_modules/react-ace/lib/index.js
var lib = __webpack_require__(4981);
// EXTERNAL MODULE: ./node_modules/ace-builds/src-noconflict/mode-javascript.js
var mode_javascript = __webpack_require__(6395);
// EXTERNAL MODULE: ./node_modules/ace-builds/src-noconflict/theme-github.js
var theme_github = __webpack_require__(4203);
// EXTERNAL MODULE: ./node_modules/ace-builds/src-noconflict/theme-dracula.js
var theme_dracula = __webpack_require__(7787);
// EXTERNAL MODULE: ./src/components/extensions-editor/example-extension.js.txt
var example_extension_js = __webpack_require__(2796);
;// CONCATENATED MODULE: ./src/components/extensions-editor/CreateNewExtension.tsx






function CreateNewExtension(props) {
    const ts = Date.now() + '';
    const { updateExtensionCode, onCreated } = props;
    const { t } = (0,useTranslation/* useTranslation */.$)(["extensions", "common"]);
    const { isOpen, toggle } = hooks_useModal(false);
    const [extensionName, setExtensionName] = (0,react.useState)(`example-user-extension${ts}.js`);
    const templatedCode = example_extension_js.replace(/_TS_/g, ts);
    const onConfirmHandler = () => {
        updateExtensionCode({ name: extensionName, code: templatedCode });
        onCreated({ name: extensionName, code: templatedCode });
        toggle();
    };
    return (react.createElement(react.Fragment, null,
        react.createElement(Button, { onClick: toggle, className: "btn btn-success me-2" },
            react.createElement("i", { className: "fa fa-plus" })),
        react.createElement(modal_Modal, { isOpen: isOpen },
            react.createElement(ModalHeader, null, t('create_new_extension')),
            react.createElement(ModalBody, null,
                react.createElement("label", { htmlFor: "exampleFormControlInput1", className: "form-label" }, t('extension_name_propmt')),
                react.createElement("input", { id: "exampleFormControlInput1", className: "form-control", type: "text", name: "", value: extensionName, onChange: (e) => setExtensionName(e.target.value) })),
            react.createElement(ModalFooter, null,
                react.createElement("button", { type: "button", className: "btn btn-secondary", onClick: toggle }, t('common:close')),
                react.createElement("button", { type: "button", className: "btn btn-primary", onClick: onConfirmHandler }, t('common:ok'))))));
}

;// CONCATENATED MODULE: ./src/components/extensions-editor/index.tsx










class ExtensionsEditorPage extends react.Component {
    constructor() {
        super(...arguments);
        this.state = {};
        this.loadExtension = (e) => {
            const { value } = e.target;
            this.setState({ currentExtension: value });
        };
        this.onExtensionCodeChange = (code) => {
            const { updateExtensionCode } = this.props;
            const { currentExtension } = this.state;
            currentExtension && updateExtensionCode({ name: currentExtension, code });
        };
        this.onSaveClick = () => {
            const { saveExtensionCode } = this.props;
            saveExtensionCode(this.getCurrentExtension());
        };
        this.removeExtension = () => {
            const { removeExtension } = this.props;
            removeExtension(this.getCurrentExtension());
        };
    }
    getCurrentExtension() {
        const { currentExtension } = this.state;
        const { extensions } = this.props;
        return extensions.find(e => e.name === currentExtension);
    }
    renderControls() {
        const { currentExtension } = this.state;
        const { extensions, t, updateExtensionCode } = this.props;
        return react.createElement("div", { className: "row mb-2" },
            react.createElement("div", { className: "col-6" },
                react.createElement("select", { value: currentExtension, className: "form-control", onChange: this.loadExtension },
                    react.createElement("option", { key: "hidden", hidden: true }, t('select_extension_to_edit')),
                    extensions.map(({ name }) => react.createElement("option", { key: name, value: name }, name)))),
            react.createElement("div", { className: "col-6" },
                react.createElement(CreateNewExtension, { updateExtensionCode: updateExtensionCode, onCreated: (extension) => this.setState({ currentExtension: extension.name }) }),
                react.createElement(Button, { promt: true, disabled: !currentExtension, onClick: this.removeExtension, className: "btn btn-danger me-2" },
                    react.createElement("i", { className: "fa fa-trash" })),
                react.createElement(Button, { disabled: !currentExtension, onClick: this.onSaveClick, className: "btn btn-primary" }, t('common:save'))));
    }
    renderEditor() {
        var _a, _b;
        const { currentExtension } = this.state;
        const { extensions, theme } = this.props;
        const code = (_b = (_a = extensions.find(e => e.name === currentExtension)) === null || _a === void 0 ? void 0 : _a.code) !== null && _b !== void 0 ? _b : "";
        const editorTheme = theme === "light" ? "github" : "dracula";
        return react.createElement(lib/* default */.ZP, { setOptions: { useWorker: false }, mode: "javascript", onChange: this.onExtensionCodeChange, name: "UNIQUE_ID_OF_DIV", editorProps: { $blockScrolling: true }, value: code, width: "100%", maxLines: Infinity, theme: editorTheme, showPrintMargin: false });
    }
    render() {
        return react.createElement("div", { className: "card h-100" },
            react.createElement("div", { className: "card-body h-100" },
                this.renderControls(),
                this.renderEditor()));
    }
}
const extensions_editor_mappedProps = ["extensions", "theme"];
/* harmony default export */ const extensions_editor = ((0,withTranslation/* withTranslation */.Z)("extensions")((0,unistore_react/* connect */.$)(extensions_editor_mappedProps, actions_actions)(ExtensionsEditorPage)));

;// CONCATENATED MODULE: ./src/components/groups/AddDeviceToGroup.tsx






function AddDeviceToGroup(props) {
    const [state, setState] = (0,react.useState)({});
    const { addDeviceToGroup, group, devices } = props;
    const { device, endpoint } = state;
    const deviceObj = devices[device];
    const endpoints = getEndpoints(deviceObj);
    const { t } = (0,useTranslation/* useTranslation */.$)(["groups", "zigbee"]);
    const onSubmit = () => {
        addDeviceToGroup(endpoint ? `${device}/${endpoint}` : device, group.friendly_name);
    };
    const onDeviceSelect = (device) => {
        const endpoints = getEndpoints(device);
        setState({ device: device.ieee_address, endpoint: endpoints[0] });
    };
    const onEpChange = (endpoint) => {
        setState({ endpoint });
    };
    return react.createElement(react.Fragment, null,
        react.createElement("div", { className: "mb-3" },
            react.createElement(DevicePicker, { label: t('zigbee:device'), value: device, devices: devices, onChange: onDeviceSelect }),
            react.createElement(EndpointPicker, { label: t('zigbee:endpoint'), values: endpoints, value: endpoint, onChange: onEpChange })),
        react.createElement("div", { className: "d-flex" },
            react.createElement("div", { className: "ms-auto" },
                react.createElement(Button, { type: "button", onClick: onSubmit, className: "btn btn-primary" }, t('add_to_group')))));
}

;// CONCATENATED MODULE: ./src/components/groups/DeviceGroup.tsx


function DeviceGroup(props) {
    const { group, removeDeviceFromGroup, devices, deviceStates, bridgeInfo } = props;
    const { setStateValue, setDeviceState, getDeviceState } = props;
    const onRemove = (deviceFriendlyName) => {
        removeDeviceFromGroup(group.friendly_name, deviceFriendlyName);
    };
    return react.createElement("div", { className: "row" }, group.members.map((groupMemebershipInfo, idx) => react.createElement(DeviceGroupRow, { key: groupMemebershipInfo.ieee_address, removeDeviceFromGroup: onRemove, devices: devices, groupAddress: groupMemebershipInfo, deviceStates: deviceStates, bridgeInfo: bridgeInfo, ...{ setStateValue, setDeviceState, getDeviceState } })));
}

;// CONCATENATED MODULE: ./src/components/groups/GroupPage.tsx








function GroupPage(props) {
    const { devices, deviceStates, bridgeInfo, groups } = props;
    const { match } = props;
    const groupId = parseInt(match.params.groupId, 10);
    const group = groups.find(g => g.id === groupId) || {
        id: groupId,
        friendly_name: "Unknow group",
        members: [],
        scenes: []
    };
    const { setStateValue, setDeviceState, getDeviceState } = props;
    const { addDeviceToGroup, removeDeviceFromGroup } = props;
    const { sceneStore, sceneRemoveAll, sceneRecall, sceneRemove } = props;
    const { t } = (0,useTranslation/* useTranslation */.$)(['groups']);
    return react.createElement("div", null,
        react.createElement("h5", null,
            t('group_name'),
            ": ",
            group.friendly_name,
            " (#",
            group.id,
            ")"),
        react.createElement("div", { className: "row" },
            react.createElement("div", { className: "col-12 col-sm-4 col-xxl-4 d-flex" },
                react.createElement("div", { className: "card w-100" },
                    react.createElement("div", { className: "card-body" },
                        react.createElement("div", { className: "form-group" },
                            react.createElement(AddDeviceToGroup, { addDeviceToGroup: addDeviceToGroup, devices: devices, group: group }))))),
            react.createElement("div", { className: "col-12 col-sm-4 col-xxl-4 d-flex" },
                react.createElement("div", { className: "card w-100" },
                    react.createElement("div", { className: "card-body" },
                        react.createElement("div", { className: "form-group" },
                            react.createElement(RecallRemove, { target: group, sceneStore: sceneStore, sceneRecall: sceneRecall, sceneRemove: sceneRemove, sceneRemoveAll: sceneRemoveAll, deviceState: {} }))))),
            react.createElement("div", { className: "col-12 col-sm-4 col-xxl-4 d-flex" },
                react.createElement("div", { className: "card w-100" },
                    react.createElement("div", { className: "card-body" },
                        react.createElement("div", { className: "form-group" },
                            react.createElement(AddScene, { sceneStore: sceneStore, target: group, deviceState: {}, setDeviceState: (dev, value) => { return Promise.resolve(); } })))))),
        react.createElement(DeviceGroup, { group: group, devices: devices, deviceStates: deviceStates, bridgeInfo: bridgeInfo, removeDeviceFromGroup: (groupFriendlyName, deviceFriendlyName) => {
                removeDeviceFromGroup(deviceFriendlyName, groupFriendlyName);
            }, ...{ setStateValue, setDeviceState, getDeviceState } }));
}
const GroupPageWithRouter = (0,react_router/* withRouter */.EN)(GroupPage);
const GroupPage_mappedProps = ["groups", "devices", "deviceStates", "bridgeInfo"];
const ConnectedGroupPage = (0,unistore_react/* connect */.$)(GroupPage_mappedProps, actions_actions)(GroupPageWithRouter);
/* harmony default export */ const groups_GroupPage = (ConnectedGroupPage);

;// CONCATENATED MODULE: ./src/components/state-notifier/StateNotifier.tsx





const StateNotifier = (props) => {
    const { bridgeState } = props;
    const { isOpen, toggle } = hooks_useModal(bridgeState !== "online");
    return (react.createElement(modal_Modal, { isOpen: isOpen },
        react.createElement(ModalHeader, null, "Zigbee2MQTT"),
        react.createElement(ModalBody, null,
            react.createElement("div", null,
                "Hello, Zigbee2MQTT in status ",
                react.createElement("span", { className: "text-danger" }, bridgeState),
                "."),
            react.createElement("div", null, "Please wait....")),
        react.createElement(ModalFooter, null,
            react.createElement("button", { type: "button", className: "btn btn-secondary", onClick: toggle }, "Close"))));
};
const StateNotifier_mappedProps = ["bridgeState"];
const ConnectedStateNotifier = (0,unistore_react/* connect */.$)(StateNotifier_mappedProps, actions_actions)(StateNotifier);
/* harmony default export */ const state_notifier_StateNotifier = (ConnectedStateNotifier);

// EXTERNAL MODULE: ./node_modules/i18next/dist/esm/i18next.js + 6 modules
var i18next = __webpack_require__(589);
// EXTERNAL MODULE: ./node_modules/react-i18next/dist/es/context.js
var context = __webpack_require__(8718);
// EXTERNAL MODULE: ./node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js
var i18nextBrowserLanguageDetector = __webpack_require__(6071);
;// CONCATENATED MODULE: ./src/i18n/locales/en.json
const en_namespaceObject = JSON.parse('{"common":{"action":"Action","actions":"Actions","apply":"Apply","attribute":"Attribute","bind":"Bind","check_all":"Check all","clear":"Clear","close":"Close","cluster":"Cluster","clusters":"Clusters","confirmation":"Confirmation prompt","delete":"Delete","destination":"Destination","devices":"Devices","dialog_confirmation_prompt":"Are you sure?","disable":"Disable","enter_search_criteria":"Enter search criteria","groups":"Groups","loading":"Loading...","none":"None","ok":"Ok","read":"Read","save":"Save","select_device":"Select device","select_endpoint":"Select endpoint","source_endpoint":"Source endpoint","the_only_endpoint":"The only endpoint","unbind":"Unbind","write":"Write"},"devicePage":{"about":"About","bind":"Bind","clusters":"Clusters","dev_console":"Dev console","exposes":"Exposes","reporting":"Reporting","settings":"Settings","settings_specific":"Settings (specific)","state":"State","scene":"Scene","unknown_device":"Unknown device"},"exposes":{"action":"Action","auto_off":"Auto off","away_mode":"Away mode","away_preset_days":"Away preset days","away_preset_temperature":"Away preset temperature","backlight_mode":"Backlight mode","battery":"Battery","battery_low":"Battery low","boost_time":"Boost time","brightness":"Brightness","calibration":"Calibration","carbon_monoxide":"Carbon monoxide","color_hs":"Color (HS)","color_temp":"Color temperature","color_temp_startup":"Startup color temp","color_xy":"Color (XY)","comfort_temperature":"Comfort temperature","consumer_connected":"Consumer connected","consumer_overload":"Consumer overload","contact":"Contact","current":"Current","current_heating_setpoint":"Current heating setpoint","eco_temperature":"Eco temperature","effect":"Effect","empty_exposes_definition":"Empty exposes definition","energy":"Energy","force":"Force","humidity":"Humidity","illuminance":"Illuminance","illuminance_lux":"Illuminance","led_disabled_night":"Led disabled night","linkquality":"Linkquality","local_temperature":"Local temperature","local_temperature_calibration":"Local temperature calibration","max_temperature":"Max temperature","min_temperature":"Min temperature","motor_reversal":"Motor reversal","moving":"Moving","occupancy":"Occupancy","operation_mode":"Operation mode","options":"Options","position":"Position","power":"Power","power_on_behavior":"Power on behavior","power_outage_memory":"Power outage memory","preset":"Preset","pressure":"Pressure","sensivity":"Sensivity","smoke":"Smoke","state":"State","strength":"Strength","system_mode":"System mode","tamper":"Tamper","temperature":"Temperature","voltage":"Voltage","water_leak":"Water leak","week":"Week"},"extensions":{"create_new_extension":"Create new extension","extension_name_propmt":"Enter new extension name","select_extension_to_edit":"Select extension to edit"},"featureNames":{"action":"Action","angle_x":"Angle X","angle_y":"Angle Y","angle_z":"Angle Z","brightness":"Brightness","co2":"CO2","color_temp":"Color Temp","color_xy":"Color Xy","contact":"Contact","humidity":"Humidity","illuminance":"Illuminance","occupancy":"Occupancy","pressure":"Pressure","soil_moisture":"Soil Moisture","state":"State","temperature":"Temperature","tamper":"Tamper"},"groups":{"add_to_group":"Add to group","create_group":"Create group","new_group_id":"New group id","new_group_id_placeholder":"Specify group id if necessary","new_group_name":"New group name","new_group_name_placeholder":"example: my_bedroom_lights","remove_group":"Remove group","group_id":"Group ID","group_name":"Group Name","group_members":"Group members","group_scenes":"Group scenes"},"logs":{"empty_logs_message":"Nothing to display","filter_by_text":"Filter by text","show_only":"Show only"},"map":{"help_coordinator_link_description":"Solid lines are the link to the Coordinator","help_end_device_description":"Green means End Device","help_is_coordinator":"is Coordinator","help_lqi_description":"Link quality is between 0 - 255 (higher is better), values with / represents multiple types of links","help_router_description":"Blue means Router","help_router_links_description":"Dashed lines are the link with Routes","hide":"Click on me to hide","load":"Load map","loading":"Depending on the size of your network this can take somewhere between 10 seconds and 2 minutes."},"navbar":{"all":"All","dashboard":"Dashboard","devices":"Devices","disable_join":"Disable join","extensions":"Extensions","groups":"Groups","logs":"Logs","map":"Map","ota":"OTA","permit_join":"Permit join","restart":"Restart","settings":"Settings","toggle_dropdown":"Toggle dropdown","touchlink":"Touchlink"},"ota":{"check":"Check for new updates","check_all":"Check all","empty_ota_message":"You don\'t have any devices that support OTA","remaining_time":"Remaining time {{- remaining}}","update":"Update device firmware"},"settings":{"about":"About","advanced":"Advanced","blocklist":"Blocklist","coordinator_revision":"Coordinator revision","coordinator_type":"Coordinator type","donate":"Donate","donation_text":["Hello, %username%, here you can thank us for hardworking","Don\'t hesitate to say something nice as well ;)"],"download_state":"Download state","experimental":"Experimental","external_converters":"External converters","frontend":"Frontend","frontend_version":"Frontend version","main":"Main","mqtt":"MQTT","ota":"OTA updates","passlist":"Passlist","raw":"Raw","restart_zigbee2mqtt":"Restart Zigbee2MQTT","serial":"Serial","settings":"Settings","tools":"Tools","zigbee2mqtt_version":"Zigbee2MQTT version","translate":"Translate"},"settingsSchemaTranslations":{"advanced-title":"Advanced","advanced_availability_blacklist__title":"Availability blacklist (deprecated, use availability_blocklist)","advanced_availability_blocklist__description":"Prevent devices from being checked for availability","advanced_availability_blocklist__title":"Availability Blocklist","advanced_availability_passlist__description":"Only enable availability check for certain devices","advanced_availability_passlist__title":"Availability passlist","advanced_availability_whitelist__title":"Availability whitelist (deprecated, use passlist)","advanced_ext_pan_id__description":"Zigbee extended pan ID, changing requires repairing all devices!","advanced_ext_pan_id__title":"Ext Pan ID","advanced_log_output__description":"Output location of the log, leave empty to supress logging","advanced_log_output__title":"Log output","advanced_log_syslog-title":"syslog","blocklist__description":"Block devices from the network (by ieeeAddr)","blocklist__title":"Blocklist","experimental-title":"Experimental","external_converters__description":"You can define external converters to e.g. add support for a DiY device","external_converters__title":"External converters","frontend-title":"Frontend","mqtt-title":"MQTT","ota-title":"OTA updates","passlist__description":"Allow only certain devices to join the network (by ieeeAddr). Note that all devices not on the passlist will be removed from the network!","passlist__title":"Passlist","root__description":"Allow only certain devices to join the network (by ieeeAddr). Note that all devices not on the passlist will be removed from the network!","root_availability_blacklist__title":"Availability blacklist (deprecated, use availability_blocklist)","root_availability_blocklist__description":"Prevent devices from being checked for availability","root_availability_blocklist__title":"Availability Blocklist","root_availability_passlist__description":"Only enable availability check for certain devices","root_availability_passlist__title":"Availability passlist","root_availability_whitelist__title":"Availability whitelist (deprecated, use passlist)","root_debounce_ignore__description":"Protects unique payload values of specified payload properties from overriding within debounce time","root_debounce_ignore__title":"Ignore debounce","root_ext_pan_id__description":"Zigbee extended pan ID, changing requires repairing all devices!","root_ext_pan_id__title":"Ext Pan ID","root_filtered_attributes__description":"Allows to prevent certain attributes from being published","root_filtered_attributes__title":"Filtered attributes","root_filtered_optimistic__description":"Filter attributes from optimistic publish payload when calling /set. (This has no effect if optimistic is set to false).","root_filtered_optimistic__title":"Filtered optimistic attributes","root_log_output__description":"Output location of the log, leave empty to supress logging","root_log_output__title":"Log output","root_log_syslog-title":"syslog","serial-title":"Serial"},"touchlink":{"detected_devices_message":"Detected {{count}} touchlink devices.","rescan":"Scan again","scan":"Scan"},"values":{"clear":"Clear","closed":"Closed","false":"False","not_supported":"Not supported","occupied":"Occupied","open":"Open","supported":"Supported","true":"True","empty_string":"Empty string(\\"\\")","leaking":"Leaking","tampered":"Tampered"},"zigbee":{"actions":"Actions","attribute":"Attribute","battery":"Battery","block_join":"Block from joining again","cluster":"Cluster","dc_source":"DC Source","description":"Description","device_type":"Device type","endpoint":"Endpoint","firmware_build_date":"Firmware build date","firmware_version":"Firmware version","force_remove":"Force remove","friendly_name":"Friendly name","ieee_address":"IEEE Address","input_clusters":"Input clusters","interview_completed":"Interview completed","interview_failed":"Interview failed","interviewing":"Interviewing","last_seen":"Last seen","lqi":"LQI","mains_single_phase":"Mains (single phase)","manufacturer":"Manufacturer","max_rep_interval":"max rep interval","min_rep_change":"Min rep change","min_rep_interval":"Min rep interval","model":"Model","network_address":"Network address","none":"None","output_clusters":"Output clusters","pic":"Pic","power":"Power","power_level":"power level","reconfigure":"Reconfigure","remove_device":"Remove device","rename_device":"Rename device","select_attribute":"Select attribute","select_cluster":"Select cluster","support_status":"Support status","unsupported":"Unsupported","updating_firmware":"Updating firmware","update_Home_assistant_entity_id":"Update Home Assistant entity ID","zigbee_manufacturer":"Zigbee Manufacturer","zigbee_model":"Zigbee Model","device":"Device"},"scene":{"scene_id":"Scene ID","recall":"Recall","store":"Store","remove":"Remove","remove_all":"Remove all","add":"Add","select_scene":"Select Scene","scene_name":"Scene Name"}}');
;// CONCATENATED MODULE: ./src/i18n/locales/fr.json
const locales_fr_namespaceObject = JSON.parse('{"common":{"action":"Action","actions":"Actions","apply":"Appliquer","attribute":"Attribut","bind":"Lier","check_all":"Cocher tout","clear":"Vider","close":"Fermer","cluster":"Cluster","clusters":"Clusters","confirmation":"Confirmation","delete":"Effacer","destination":"Destination","devices":"Périphériques","dialog_confirmation_prompt":"Êtes-vous sûr ?","disable":"Désactiver","enter_search_criteria":"Entrez le critère de recherche","groups":"Groupes","loading":"Chargement...","none":"Aucun(e)","ok":"Ok","read":"Lecture","save":"Sauver","select_device":"Choix Périph","select_endpoint":"Choix endpoint","source_endpoint":"Endpoint Source","the_only_endpoint":"Le seul endpoint","unbind":"Délier","write":"Ecriture"},"devicePage":{"about":"À propos","bind":"Lien","clusters":"Clusters","dev_console":"Console dev","exposes":"Expose","reporting":"Rapports","settings":"Paramètres","settings_specific":"Paramètres (Spécifiques)","state":"Etat","scene":"Scène","unknown_device":"Périphérique inconnu"},"exposes":{"action":"Action","auto_off":"Arrêt automatique","away_mode":"Mode absent","away_preset_days":"Préréglage jours d\'absence","away_preset_temperature":"Préréglage température d\'absence","backlight_mode":"Mode Rétroéclairage","battery":"Batterie","battery_low":"Batterie faible","boost_time":"Temp de boost","brightness":"Luminosité","calibration":"Calibration","carbon_monoxide":"Monoxyde de carbone","color_hs":"Couleur (HS)","color_temp":"Temp Couleur","color_temp_startup":"Temp Couleur à l\'allumage","color_xy":"Couleur (XY)","comfort_temperature":"Température de confort","consumer_connected":"Consommateur connecté","consumer_overload":"Consommateur surchargé","contact":"Contact","current":"Courant","current_heating_setpoint":"Consigne chauffage actuelle","eco_temperature":"Température éco","effect":"Effet","empty_exposes_definition":"Vider définition d\'expositions","energy":"Energie","force":"Force","humidity":"Humidité","illuminance":"Éclairement","illuminance_lux":"Éclairement","led_disabled_night":"Désactivation LED en nuit","linkquality":"Qualité du lien","local_temperature":"Température locale","local_temperature_calibration":"Calibration température locale","max_temperature":"Température max","min_temperature":"Température min","motor_reversal":"Inversion moteur","moving":"Déplacement","occupancy":"Occupation","operation_mode":"Mode d\'opération","options":"Options","position":"Position","power":"Puissance","power_on_behavior":"Comportement d\'allumage","power_outage_memory":"Mémoire Panne de courant","preset":"Préréglage","pressure":"Pression","sensivity":"Sensibilité","smoke":"Fumée","state":"Etat","strength":"Force","system_mode":"Mode du système","tamper":"Sabotage","temperature":"Temperature","voltage":"Voltage","water_leak":"Fuite d\'eau","week":"Semaine"},"extensions":{"create_new_extension":"Créer une nouvelle extension","extension_name_propmt":"Entrez le nom de l\'extension","select_extension_to_edit":"Choisir l\'extension à modifier"},"featureNames":{"action":"Action","angle_x":"Angle X","angle_y":"Angle Y","angle_z":"Angle Z","brightness":"Luminosité","color_temp":"Temp Couleur","color_xy":"Couleur Xy","contact":"Contact","humidity":"Humidité","illuminance":"Éclairement","occupancy":"Occupation","pressure":"Pression","soil_moisture":"Humidité Sol","state":"État","temperature":"Température","tamper":"Sabotage","current_heating_setpoint":"Consigne de chauffe actuelle","local_temperature":"Température Locale","system_mode":"Mode du Système","local_temperature_calibration":"Calibration Température Locale","away_mode":"Mode Absence","position":"Position","preset":"Préréglage"},"featureDescriptions":{"On/off state of this light":"Etat Allumé/Eteint de cette lumière","Brightness of this light":"Luminosité de cette lumière","Triggers an effect on the light (e.g. make light blink for a few seconds)":"Exécute un effet sur la lumière (ex : faire clignotter quelques secondes)","Controls the behavior when the device is powered on":"Contrôle le comportement lorsque le périphérique est allumé","Controls the behaviour when the device is powered on":"Contrôle le comportement lorsque le périphérique est allumé","Link quality (signal strength)":"Qualité du lien (force du signal)","Remaining battery in %":"Batterie restante en %","Triggered action (e.g. a button click)":"Action déclenchée (ex : un clic bouton)","Measured temperature value":"Valeur de température mesurée","Measured relative humidity":"Valeur d\'humidité relative mesurée","The measured atmospheric pressure":"Valeur de pression atmosphérique mesurée","Voltage of the battery in millivolts":"Voltage de la batterie en millivolts","Indicates if the contact is closed (= true) or open (= false)":"Indique si le contact est fermé (= vrai) ou ouvert (= faux)","Indicates whether the device detected occupancy":"Indique si le périphérique a détecté une occupation","Measured illuminance in lux":"Valeur d\'éclairement mesurée en lux","Indicates if the battery of this device is almost empty":"Indique si la batterie du périphérique est presque vide","Indicates whether the device is tampered":"Indique si le périphérique a été saboté","Color temperature of this light":"Température de couleur de cette lumière","Color of this light in the CIE 1931 color space (x/y)":"Couleur de cette lumière dans l\'espace couleur CIE 1931 (x/y)","Enables/disables physical input on the device":"Active/Désactive le verrouillage du périphérique","Enables/disables window detection on the device":"Active/Désactive la détection de fenêtre du périphérique","Position":"Position","Temperature setpoint":"Consigne Température","Current temperature measured on the device":"Température Actuelle mesurée sur le périphérique","Mode of this device":"Mode du périphérique","Offset to be used in the local_temperature":"Décalage à appliquer sur la local_temperature","Away mode":"Mode absence","Mode of this device (similar to system_mode)":"Mode du périphérique (similaire à system_mode)","Enable/disable auto lock":"Active/Désactive auto-verrouillage","Enable/disable away mode":"Active/Désactive mode absent","Away preset days":"Jours d\'absence pré-définis","Boost time":"Durée de Boost","Comfort temperature":"Température Confort","Eco temperature":"Température Eco","Force the valve position":"Forcer la position de la valve","Maximum temperature":"Température Max","Minimum temperature":"Température Min","Week format user for schedule":"Format semaine du calendrier","Away preset temperature":"Température Absent pré-définie","On/off state of the switch":"Etat Allumé/Eteint de l\'interrupteur"},"groups":{"add_to_group":"Ajouter au groupe","create_group":"Créer groupe","new_group_id":"Nouvel ID groupe","new_group_id_placeholder":"Spécifiez l\'ID groupe si nécessaire","new_group_name":"Nouveau nom de groupe","new_group_name_placeholder":"exemple: mes_lumières_chambre","remove_group":"Supprimer groupe"},"logs":{"empty_logs_message":"Rien à afficher","filter_by_text":"Filtrer sur le texte","show_only":"Niveau"},"map":{"help_coordinator_link_description":"Les lignes pleines sont les liens avec le Coordinateur","help_end_device_description":"Les Périphérique Terminaux sont en vert","help_is_coordinator":"est le Coordinateur","help_lqi_description":"La qualité de lien est entre 0 - 255 (plus c\'est haut mieux c\'est), les valeurs avec un / représentent plusieurs types de liens","help_router_description":"Les Routeurs sont en bleu","help_router_links_description":"Les lignes en pointillés sont les liens avec les Routeurs","hide":"Cliquez-moi pour me cacher","load":"Charger le schéma","loading":"En fonction de la taille de votre réseau, ceci peut prendre entre 10 secondes et 2 minutes."},"navbar":{"all":"Tout","dashboard":"Tableau de bord","devices":"Périphériques","disable_join":"Désactiver Appairage","extensions":"Extensions","groups":"Groupes","logs":"Journaux","map":"Schéma","ota":"MàJ OTA","permit_join":"Activer Appairage","restart":"Redémarrer","settings":"Paramètres","toggle_dropdown":"Bascule menu","touchlink":"Touchlink"},"ota":{"check":"Vérifier nouvelles MàJ","check_all":"Vérifier tout","empty_ota_message":"Vous n\'avez aucun périphérique supportant les MàJ OTA","remaining_time":"Temps restant {{- remaining}}","update":"MàJ firmware des périphériques"},"settings":{"about":"À propos","advanced":"Avancé","blocklist":"Liste de blocage","coordinator_revision":"Révision du Coordinateur","coordinator_type":"Type de Coordinateur","donate":"Don","donation_text":["Salut, %username%, vous pouvez ici nous remercier pour notre dur labeur","N\'hésitez pas à nous laisser un petit mot gentil ;)"],"download_state":"Téléchargement de l\'état","experimental":"Expérimental","external_converters":"Convertisseurs Externes","frontend":"Interface","frontend_version":"Version Interface","main":"Principal","mqtt":"MQTT","ota":"MàJ OTA","passlist":"Autorisés","raw":"Brut","restart_zigbee2mqtt":"Redémarrer Zigbee2MQTT","serial":"Port Série","settings":"Paramètres","tools":"Outils","zigbee2mqtt_version":"Version Zigbee2MQTT","translate":"Traduire"},"settingsSchemaTranslations":{"advanced-title":"Avancé","advanced_availability_blacklist__title":"Liste noire disponibilité (déprécié, utilisez Liste blocage disponibilité)","advanced_availability_blocklist__description":"Empèche que certains périphériques soient vérifiés pour la disponibilité","advanced_availability_blocklist__title":"Liste blocage disponibilité","advanced_availability_passlist__description":"Activer la disponibilité seulement sur certains périphériques","advanced_availability_passlist__title":"Liste autorisation disponibilité","advanced_availability_whitelist__title":"Liste blanche disponibilité (déprécié, utilisez Liste autorisation disponibilité)","advanced_ext_pan_id__description":"ID pan étendu zigbee, tout changement imposera un ré-appairage de tous les périphériques!","advanced_ext_pan_id__title":"ID Pan étendu","advanced_log_output__description":"Localisation des journaux de sorties, laissez vide pour supprimer la journalisation","advanced_log_output__title":"Journaux de Sortie","advanced_log_syslog-title":"syslog","blocklist__description":"Bloquer les périphériques sur le réseau (par adresse IEEE)","blocklist__title":"Liste blocage","experimental-title":"Expérimental","external_converters__description":"Vous pouvez définir des convertisseurs externes pour par exemple ajouter un support pour un périphérique fait maison","external_converters__title":"Convertisseurs externes","frontend-title":"Interface","mqtt-title":"MQTT","ota-title":"MàJ OTA","passlist__description":"Autorise seulement certains périphériques à joindre le réseau (par adresse ieee). Notez que tous les périphériques qui ne sont pas dans cette liste seront retirés du réseau !","passlist__title":"Liste autorisation","root-title":"Port Série","root__description":"Autoriser seulement certains périphériques à joindre le réseau (par adresse IEEE). Notez que tous les périphériques absents de la liste seront retirés du réseau!","root__title":"Liste Autorisation","root_availability_blacklist__title":"Liste noire disponibilité (déprécié, utilisez Liste blocage disponibilité)","root_availability_blocklist__description":"Empèche que certains périphériques soient vérifiés pour la disponibilité","root_availability_blocklist__title":"Liste blocage disponibilité","root_availability_passlist__description":"Activer la disponibilité seulement sur certains périphériques","root_availability_passlist__title":"Liste autorisation disponibilité","root_availability_whitelist__title":"Liste blanche disponibilité (déprécié, utilisez Liste autorisation disponibilité)","root_debounce_ignore__description":"Protège les valeurs des propriétés spécifiées d\'être remplacées pendant le temps d\'anti-rebond","root_debounce_ignore__title":"Ignorer anti-rebond","root_ext_pan_id__description":"ID pan étendu zigbee, tout changement imposera un ré-appairage de tous les périphériques!","root_ext_pan_id__title":"ID Pan étendu","root_filtered_attributes__description":"Permet d\'empêcher la publication de certains attributs","root_filtered_attributes__title":"Attributs filtrés","root_log_output__description":"Localisation des journaux de sorties, laissez vide pour supprimer la journalisation","root_log_output__title":"Journaux de Sortie","root_log_syslog-title":"syslog","serial-title":"Port Série","root_filtered_optimistic__title":"Attibuts optimistes filtrés","root_filtered_optimistic__description":"Attributs filtrés de la publication optimiste lors de l\'appel de /set. (Aucun effet si optimiste est à faux)."},"touchlink":{"detected_devices_message":"{{count}} périphériques Touchlink détectés.","rescan":"Rescanner","scan":"Scanner"},"values":{"clear":"RàS","closed":"Fermé","occupied":"Occupé","open":"Ouvert","true":"Vrai","leaking":"Fuite","tampered":"Saboté","supported":"Supporté","not_supported":"Non supporté","false":"Faux","empty_string":"Chaîne vide (\\"\\")"},"zigbee":{"actions":"Actions","attribute":"Attribut","battery":"Batterie","block_join":"Bloquer tout nouvel appairage","cluster":"Cluster","dc_source":"Source DC","description":"Description","device_type":"Type de Périph","device":"Périphérique","endpoint":"Endpoint","firmware_build_date":"Date Firmware","firmware_version":"Version Firmware","force_remove":"Forcer la suppression","friendly_name":"Nom Simplifié","ieee_address":"Adresse IEEE","input_clusters":"Clusters Entrants","interview_completed":"Interview terminé","interview_failed":"Echec de l\'Interview","interviewing":"Interview en cours","last_seen":"Vu il y a","lqi":"LQI","mains_single_phase":"Réseau (phase simple)","manufacturer":"Constructeur","max_rep_interval":"Interval max réponse","min_rep_change":"Changement min réponse","min_rep_interval":"Interval min réponse","model":"Modèle","network_address":"Adresse réseau","none":"Aucun(e)","output_clusters":"Clusters Sortants","pic":"Img","power":"Alim","power_level":"Niveau de charge","reconfigure":"Reconfigurer","remove_device":"Supprimer le périph","rename_device":"Renommer le périph","select_attribute":"Choisir Attribut","select_cluster":"Choisir Cluster","support_status":"Supporté","unsupported":"Non Supporté","updating_firmware":"Firmware en cours de MàJ","update_Home_assistant_entity_id":"MàJ de l\'ID d\'entité Home Assistant","zigbee_model":"Modèle Zigbee","zigbee_manufacturer":"Constructeur Zigbee"},"scene":{"scene_id":"ID Scène","recall":"Rappeler","select_scene":"Choisir Scène","store":"Stocker","remove":"Supprimer","remove_all":"Supprimer tout","add":"Ajouter"}}');
;// CONCATENATED MODULE: ./src/i18n/locales/pl.json
const locales_pl_namespaceObject = JSON.parse('{"common":{"action":"Akcja","check_all":"Sprawdź wszystkie","clear":"Wyczyść","close":"Zamknij","delete":"Usuń","dialog_confirmation_prompt":"Czy jesteś pewien?","enter_search_criteria":"Wprowadź kryteria wyszukiwania","confirmation":"potwierdzenie","ok":"ok","source_endpoint":"źródłowy_endpoint","select_endpoint":"wybierz_endpoint","the_only_endpoint":"tylko_endpoint","select_device":"wybierz_urządzenie","groups":"grupy","devices":"urządzenia","apply":"zatwierdź","destination":"kierunek","clusters":"klastry","bind":"powiąż","unbind":"rozwiąż","loading":"Ładowanie...","save":"Zapisz"},"devicePage":{"about":"O urządzeniu","bind":"Powiązania","clusters":"Klaster","dev_console":"Konsola","exposes":"Eksponowane","reporting":"Raportowanie","settings":"Ustawienia","scene":"scena","settings_specific":"Ustawienia (specyficzne)","state":"Stan"},"extensions":{"extension_name_propmt":"Wprowadź nazwę nowego rozszerzenia","select_extension_to_edit":"Wybierz rozszerzenie do edycji"},"featureNames":{"brightness":"Poziom Jasności","color_temp":"Temperatura Barwowa","color_xy":"Kolor Xy","contact":"Kontakt","humidity":"Wilgotność","illuminance":"Natężenie światła","occupancy":"Obecność","pressure":"Ciśnienie","soil_moisture":"Wilgotność Gleby","state":"Stan","water_leak":"Wyciek Wody","position":"Pozycja","current_heating_setpoint":"Aktualna wartość zadana ogrzewania","local_temperature":"Temperatura Lokalna","system_mode":"Tryb Pracy","local_temperature_calibration":"Lokalna kalibracja temperatury","away_mode":"Tryb Z dala od domu","preset":"Preset","temperature":"Temperatura","power":"Moc","current":"Natężenie","voltage":"Napięcie","energy":"Energia"},"groups":{"add_to_group":"Dodaj do grupy","create_group":"Utwórz grupę","new_group_id":"ID nowej grupy","new_group_id_placeholder":"Podaj ID grupy jeśli potrzebujesz","new_group_name":"Nazwa nowej grupy","new_group_name_placeholder":"przykład: lampy_sypialnia","remove_group":"Usuń grupę"},"logs":{"empty_logs_message":"Brak logów do wyświetlenia","filter_by_text":"Filtruj po tekście","show_only":"Pokaż tylko"},"map":{"help_coordinator_link_description":"Linie ciągłe to połączenia z koordynatorem","help_end_device_description":"zielony to urządzenia końcowe","help_is_coordinator":"to koordynator","help_lqi_description":"Jakość połączenia to wartość 0 - 255 (im wyższa tym lepiej), wartości oddzielone / odnoszą się do różnych typów połączeń.","help_router_description":"niebieski to rutery","help_router_links_description":"Linie przerywane to połączenia z ruterami","hide":"Kliknij tutaj by ukryć","load":"Załaduj mapę","loading":"Ładowanie mapy może zająć od 10 sekund do 2 minut, w zależności od rozmiaru Twojej sieci."},"navbar":{"all":"Wszystkie","dashboard":"Pulpit","devices":"Urządzenia","disable_join":"Zabroń dołączania","extensions":"Rozszerzenia","groups":"Grupy","logs":"Logi","map":"Mapa","ota":"OTA","permit_join":"Zezwól na dołączanie","restart":"Restart","settings":"Ustawienia","toggle_dropdown":"Przełącz listę","touchlink":"Touchlink"},"ota":{"check":"Spradź dostępność aktualizacji","check_all":"Sprawdź wszystkie","empty_ota_message":"Nie posiadasz urządzeń wspierających OTA","remaining_time":"Pozostały czas: {{- remaining}}","update":"Zaktualizuj oprogramowanie układowe"},"settings":{"about":"O programie","advanced":"Zaawansowane","blocklist":"Lista zablokowanych","coordinator_revision":"Wersja oprogramowania koordynatora","coordinator_type":"Typ koordynatora","donate":"Wsparcie","donation_text":["Cześć %username%, tutaj możesz podziękować nam za ciężką pracę.","Byłoby miło gdybyś zostawił też jakieś dobre słowo ;)"],"download_state":"Pobierz stan","experimental":"Eksperymentalne","external_converters":"Konwertery zewnętrzne","frontend":"Aplikacja interfejsu użytkownika","frontend_version":"Wersja aplikacji interfejsu użytkownika","main":"Główne","translate":"Tłumaczenie","mqtt":"MQTT","ota":"Aktualizacje OTA","passlist":"Lista dopuszczonych","raw":"Wygenerowana konfiguracja","restart_zigbee2mqtt":"Zrestartuj Zigbee2MQTT","serial":"Port szeregowy","settings":"Ustawienia","tools":"Narzędzia","zigbee2mqtt_version":"Wersja Zigbee2MQTT"},"settingsSchemaTranslations":{"root-title":"Port szeregowy","root__description":"Pozwól tylko wybranym urządzeniom (identyfikowanym przez adres ieeeAddr) do sieci. Zwróc uwagę na fakt, że wszystkie urządzenia spoza tej listy zostaną usunięte z obecnej sieci!","root__title":"Lista dopuszczonych","root_availability_blacklist__title":"Czarna lista sprawdzania dostępności (ustawienie wycofywane, użyj listy blokad sprawdzania dostępności)","root_availability_blocklist__description":"Zablokuj sprawdzanie dostępności urządzeń z tej listy","root_availability_blocklist__title":"Lista blokad sprawdzania dostępności","root_availability_passlist__description":"Włącz sprawdzanie obecności tylko dla urządzeń z tej listy","root_availability_passlist__title":"Lista sprawdzania dostępności","root_availability_whitelist__title":"Bilała lista sprawdzania dostępności (ustawienie wycofywane, użyj listy sprawdzania obecności)","root_ext_pan_id__description":"Parametr Zigbee rozszerzonego identyfikatora sieci, zmiana wymaga ponownego sparowania wszystkich urządzeń!","root_ext_pan_id__title":"Ext Pan ID","root_log_output__description":"Położenie wyjściowego pliku logu, pozostaw puste by wyłączyć rejestrowanie logu zdarzeń","root_log_output__title":"Wyjście logowania","root_filtered_attributes__title":"Filtrowane opublikowane atrybuty","root_filtered_attributes__description":"Filtrowanie atrybutów z publikowanej zawartości.","root_debounce_ignore__title":"Ignorowanie odbicia","root_debounce_ignore__description":"Chroni unikalne wartości określonych właściwości payload przed nadpisaniem w czasie odbicia","root_filtered_optimistic__title":"Przefiltrowane atrybuty optimistic","root_filtered_optimistic__description":"Filtruj atrybuty z optimistic publish payload podczas wywoływania /set. (Nie ma to żadnego efektu jeśli optimistic jest ustawione na false)...","advanced-title":"Zaawansowane","advanced_availability_blacklist__title":"Czarna lista dostępności (przestarzała, użyj availability_blocklist)","advanced_availability_blocklist__title":"Lista blokad dostępności","advanced_availability_blocklist__description":"Uniemożliwienie sprawdzania dostępności urządzeń","advanced_availability_passlist__title":"Passlista dostępności","advanced_availability_passlist__description":"Włącz sprawdzanie dostępności tylko dla niektórych urządzeń","advanced_availability_whitelist__title":"Whitelista dostępności (przestarzała, użyj passlisty)","advanced_ext_pan_id__title":"Ext Pan ID","advanced_ext_pan_id__description":"Zigbee extended pan ID, zmiana wymaga naprawy wszystkich urządzeń!","advanced_log_output__title":"Wyjście logów","advanced_log_output__description":"Wyjściowa lokalizacja logu, pozostaw puste aby wyłączyć logowanie","advanced_log_syslog-title":"logi systemowe","blocklist__title":"Lista blokad","blocklist__description":"Blokowanie urządzeń z sieci (według ieeeAddr)","experimental-title":"Eksperymentalne","external_converters__title":"Konwertery zewnętrzne","external_converters__description":"Możesz zdefiniować zewnętrzne konwertery, aby np. dodać obsługę urządzenia DiY","frontend-title":"Frontend","mqtt-title":"MQTT","ota-title":"Aktualizacje OTA","passlist__title":"Passlista","passlist__description":"Zezwól tylko niektórym urządzeniom na dołączenie do sieci (według ieeeAddr). Uwaga, wszystkie urządzenia nie znajdujące się na passliście zostaną usunięte z sieci!","serial-title":"Serial","root_log_syslog-title":"Log systemowy"},"scene":{"scene_id":"id_sceny","store":"store","recall":"odwołaj","remove":"usuń","remove_all":"usuń_wszystko","select_scene":"wybierz_scene"},"touchlink":{"detected_devices_message":"Wykryte urządzenia touchlink: {{count}}. ","rescan":"Skanuj ponownie","scan":"Skanuj"},"values":{"Clear":"Brak","Closed":"Zamknięte","Occupied":"Wykryto Obecność","Open":"Otwarte","tampered":"Naruszenie","supported":"Obsługiwane","not_supported":"Nie Obsługiwane","leaking":"Wyciek","false":"Fałsz","true":"Prawda"},"featureDescriptions":{"Remaining battery in %":"Pozostały stan baterii w %","Measured temperature value":"Zmierzona wartość temperatury","Measured relative humidity":"Zmierzona wilgotność względna","Voltage of the battery in millivolts":"Napięcie akumulatora w miliwoltach","Link quality (signal strength)":"Jakość połączenia (siła sygnału)"},"zigbee":{"block_join":"Zablokuj ponowne dołączanie","device_type":"Typ urządzenia","endpoint":"Punkt końcowy","description":"opis","cluster":"klaster","attribute":"atrybut","min_rep_interval":"min_rep_interval","max_rep_interval":"max_rep_interval","min_rep_change":"min_rep_change","actions":"akcje","select_cluster":"wybierz_klaster","none":"brak","select_attribute":"wybierz_atrybut","output_clusters":"wyjściowe_klastry","input_clusters":"wejściowe_klastry","zigbee_manufacturer":"zigbee_manufacturer(kod)","firmware_build_date":"Data firmware","firmware_version":"Wersja firmware","force_remove":"Wymuś usunięcie","friendly_name":"Przyjazna nazwa","ieee_address":"Adres IEEE","interview_completed":"Wywiad zakończony","last_seen":"Ostatnio widziane","lqi":"LQI","manufacturer":"Producent","model":"Model","network_address":"Adres sieciowy","pic":"Foto","power":"Zasilanie","reconfigure":"Przekonfiguruj","remove_device":"Usuń urządzenie","rename_device":"Zmień nazwę urządzenia","support_status":"Support status","unsupported":"Niewspierane","update_Home_assistant_entity_id":"Zaktualizuj ID encji Home Assistanta","zigbee_model":"Model Zigbee"}}');
;// CONCATENATED MODULE: ./src/i18n/locales/de.json
const locales_de_namespaceObject = JSON.parse('{"common":{"action":"Aktion","actions":"Aktionen","apply":"Anwenden","attribute":"Attribute","bind":"verbinden","check_all":"Alle prüfen","clear":"Löschen","close":"Schliessen","cluster":"Cluster","clusters":"Clusters","confirmation":"Bestätigen","delete":"Löschen","destination":"Ziel","devices":"Devices","dialog_confirmation_prompt":"Bist Du sicher?","disable":"Abschalten","enter_search_criteria":"Suchwort","groups":"Gruppen","loading":"Laden...","none":"Nichts","ok":"ok","read":"Lesen","save":"Speichern","select_device":"Wähle Device","select_endpoint":"Wähle Endpunkt","source_endpoint":"Quellen Endpunkt","the_only_endpoint":"Der einzige Endpunkt","unbind":"trennen","unknown":"Unbekannt","write":"Schreiben"},"devicePage":{"about":"Über","bind":"Bindungen","clusters":"Clusters","dev_console":"Dev Konsole","exposes":"Details","reporting":"Berichten","scene":"Szene","settings":"Einstellungen","settings_specific":"Einstellungen (spezifisch)","state":"Status","unknown_device":"unbekanntes Device"},"exposes":{"action":"Aktion","auto_off":"Automatisch abschalten","away_mode":"Abwesenheitsmodus","away_preset_days":"Abwesenheitszeit (in Tagen)","away_preset_temperature":"Temperatur bei Abwesenheit","backlight_mode":"Rücklicht Modus","battery":"Batterie","battery_low":"Batterie schwach","boost_time":"Boost Dauer","brightness":"Helligkeit","calibration":"Kalibrierung","carbon_monoxide":"Kohlenmonoxid","co2":"Kohlendioxid","color_hs":"Farbe hue/saturation","color_temp":"Farbtemperatur","color_temp_startup":"Farbtemperatur nach Einschalten","color_xy":"Farbe (XY)","comfort_temperature":"Komfort Temperature","consumer_connected":"Verbraucher angeschlossen","consumer_overload":"Verbraucherüberlastung","contact":"Kontakt","current":"Aktuell","current_heating_setpoint":"Aktuelle Solltemperatur","device_temperature":"Gerätetemperatur","eco_temperature":"Ökologische Temperatur","effect":"Effekt","empty_exposes_definition":"Exposes nicht definiert","energy":"Verbrauch","force":"Erzwungene Ventilposition","humidity":"Luftfeuchtigkeit","illuminance":"Beleuchtungsstärke","illuminance_lux":"Beleuchtungsstärke in Lux","led_disabled_night":"LED Nachts ausschalten","linkquality":"Linkqualität","local_temperature":"Raumtemperatur","local_temperature_calibration":"Kalibrierung Raumtemperatur","max_temperature":"Maximale Temperatur","min_temperature":"Minimale Temperatur","motion":"Bewegung","motion_direction":"Bewegungsrichtung","motor_reversal":"Richtung umkehren","motion_speed":"Bewegungsgeschwindigkeit","moving":"Bewegung","occupancy":"Belegung","operation_mode":"Betriebsmodus","options":"Optionen","position":"Position","power":"Leistung","power_on_behavior":"Zustand nach Stromausfall","power_outage_memory":"Zustand nach Stromausfall","presence":"Anwesenheit","preset":"Voreinstellung","Pressure":"Luftdruck","sensivity":"Empfindlichkeit","smoke":"Rauch","state":"Status","strength":"Stärke","system_mode":"Heizmodus","tamper":"Manipulation","temperature":"Temperatur","voltage":"Stromspannung","water_leak":"Wasserleck","week":"Woche"},"extensions":{"extension_name_propmt":"Name der neuen Erweiterung","select_extension_to_edit":"Wähle Erweiterung zum Bearbeiten","create_new_extension":"Neue Erweiterung erstellen"},"featureNames":{"action":"Aktion","action_angle":"Bewegung Winkel","action_from_side":"Bewegung von Seite","action_side":"Aktive Seite","action_to_side":"Bewegung zur Seite","alarm":"Alarm","angle_x":"Ausrichtung X","angle_y":"Ausrichtung Y","angle_z":"Ausrichtung Z","auto_lock":"Automatische Sperre","away_mode":"Abwesenheitsmodus","brightness":"Helligkeit","calibration_time":"Kalibrierungszeit","carbon_monoxide":"Kohlenmonoxid","child_lock":"Kindersicherung","co2":"Kohlendioxid","color_hs":"Farbe Hs","color_temp":"Farbtemperatur","color_temp_startup":"Start Farbtemperatur","color_xy":"Farbe Xy","consumer_connected":"Verbraucher angeschlossen","contact":"Kontakt","current":"Aktuell","current_heating_setpoint":"Aktuelle Solltemperatur","current_level_startup":"Aktuelles Startlevel","device_temperature":"Gerätetemperatur","energy":"Energie","humidity":"Feuchtigkeit","illuminance":"Beleuchtungsstärke","level_config":"Level Konfiguration","local_temperature":"Lokale Temperatur","local_temperature_calibration":"Kalibrierung lokale Temperatur","motion":"Bewegung","motion_direction":"Bewegungsrichtung","motion_speed":"Bewegungsgeschwindigkeit","motor_speed":"Motorgeschwindigkeit","moving":"Bewegung","occupancy":"Belegung","on_off_transition_time":"Ein Aus Übergangszeit","options":"Optionen","position":"Position","power":"Leistung","presence":"Anwesenheit","preset":"Vorgabe","pressure":"Luftdruck","smoke":"Rauch","smoke_density":"Stärke der Rauchentwicklung","soil_moisture":"Bodenfeuchtigkeit","state":"Status","state_l1":"Status L 1","state_l2":"Status L 2","state_l3":"Status L 3","state_l4":"Status L 4","system_mode":"System Mode","tamper":"Manipulation","temperature":"Temperatur","valve_detection":"Ventil Erkennung","voltage":"Volt","water_leak":"Wasserleck","window_detection":"Fenster Erkennung"},"featureDescriptions":{"Auto off after specific time.":"Automatische Abschaltung nach bestimmter Zeit.","Away mode":"Abwesenheitsmodus","Away preset days":"Abwesenheit in Tagen","Away preset temperature":"Definierte Temperatur für den Abwesenheitsmodus","Boost time":"Boost Zeit","Brightness of this light":"Helligkeit des Leuchtmittels","Calibrates the humidity value (absolute offset), takes into effect on next report of device.":"Kalibriert den Luftfeuchtewert (absoluter Offset), wird beim nächsten Bericht des Gerätes wirksam.","Calibrates the illuminance value (percentual offset), takes into effect on next report of device.":"Kalibriert den Helligkeitswert (prozentualer Offset), wird beim nächsten Bericht des Geräts wirksam.","Calibrates the illuminance_lux value (percentual offset), takes into effect on next report of device.":"Kalibriert den Helligkeitswert (LUX) (prozentualer Offset), wird beim nächsten Bericht des Geräts wirksam.","Calibrates the pressure value (absolute offset), takes into effect on next report of device.":"Kalibriert den Luftdruckwert (absoluter Offset), wird beim nächsten Bericht des Geräts wirksam.","Calibrates the temperature value (absolute offset), takes into effect on next report of device.":"Kalibriert den Temperaturwert (absoluter Offset), wird beim nächsten Bericht des Geräts wirksam.","Calibration time":"Zeit zum Kalibrieren","Color of this light expressed as hue/saturation":"Farbe des Leuchtmittels übersetzt in hue/saturation","Color of this light in the CIE 1931 color space (x/y)":"Farbe des Leuchtmittels im CIE 1931 Farbraum (x/y)","Color temperature after cold power on of this light":"Farbtemperatur nach Trennung vom Stromnetz","Color temperature of this light":"Farbtemperatur des Leuchtmittels","Comfort temperature":"Komfort Temperatur","Controls the behaviour when the device is powered on":"Überprüft das Verhalten beim Einschalten des Device.","Current temperature measured on the device":"Aktuelle Temperatur am Thermostat","direction of movement from the point of view of the radar":"Zeigt die Richtung der Bewegung aus sicht des Sensors an.","Eco temperature":"Öko-Temperatur","Enable/disable auto lock":"Aktivieren/Deaktivieren  auto lock","Enable/disable away mode":"Aktivieren/Deaktivieren des Abwesenheitsmodus","Enables/disables physical input on the device":"Aktivieren/Deaktivieren der direkten Bedienung des Device","Enables/disables window detection on the device":"Aktivieren/Deaktivieren der Fensterstatus Erkennung","Enabling prevents both relais being on at the same time":"Aktivierung schützt davor, beide Relais gleichzeitig zu aktivieren","Force the valve position":"Erzwingt die eingestellte Ventilposition","Indicates if CO (carbon monoxide) is detected":"Kohlenmonoxid entdeckt","Indicates if the battery of this device is almost empty":"Warnung, wenn Batterie schwach","Indicates if the contact is closed (= true) or open (= false)":"Kontakt geschlossen (= true) oder offen (= false)","Indicates whether the device detected a water leak":"Zeigt, ob ein Wasseraustritt erkannt wurde","Indicates whether the device detected occupancy":"Ermittelt, ob eine Bewegung erkannt wurde","Indicates whether the device detected presence":"Zeigt, ob eine Anwesenheit erkannt wurde.","Indicates whether the device detected smoke":"Raucherkennung","Indicates whether the device is tampered":"Zeigt, ob das Gerät manipuliert wurde","Instantaneous measured electrical current":"Aktuell gemessener Ampere-Bedarf","Instantaneous measured power":"Momentan gemessene Leistung","Link quality (signal strength)":"Link Qualität (Signalstärke)","Maximum temperature":"Maximale Temperatur","Measured electrical potential value":"Gemessene Stromstärke in Volt ankommend","Measured illuminance in lux":"Gemessene Helligkeit in Lux","Measured relative humidity":"Messung der relativen Luftfeuchtigkeit","Measured temperature value":"Gemessene Temperatur","Minimum temperature":"Minimale Temperatur","Mode of this device (similar to system_mode)":"Modus des Thermostats (identisch zu system_mode)","Mode of this device":"Modus des Thermostats","Motor speed":"Motor Geschwindigkeit","moving inside the range of the sensor":"Zeigt, ob eine BEwegung innerhalb des Radar-Radius erkannt wurde.","Number of digits after decimal point for humidity, takes into effect on next report of device.":"Anzahl der Nachkomma-Stellen für Luftfeuchtigkeit, Änderung wirksam beim nächsten Device-Report.","Number of digits after decimal point for illuminance, takes into effect on next report of device.":"Anzahl der Nachkomma-Stellen für Helligkeit, Änderung wirksam beim nächsten Device-Report.","Number of digits after decimal point for illuminance_lux, takes into effect on next report of device.":"Anzahl der Nachkomma-Stellen für Helligkeit in Lux, Änderung wirksam beim nächsten Device-Report.","Number of digits after decimal point for pressure, takes into effect on next report of device.":"Anzahl der Nachkomma-Stellen für Luftdruck, Änderung wirksam beim nächsten Device-Report.","Number of digits after decimal point for temperature, takes into effect on next report of device.":"Anzahl der Nachkomma-Stellen für Temperatur, Änderung wirksam beim nächsten Device-Report.","Offset to be used in the local_temperature":"Kallibrierung der Raumtemperatur am Thermostat","On/off state of the switch":"On/off Status des Schalters","On/off state of this light":"On/off Status des Leuchtmittels","Position of this cover":"Position des Vorhangs","Position":"Position","presets for sensivity for presence and movement":"Standardeinstellungen für die Sensibilität des Radar-Sensors (Bewegung und Anwesenheit).","Raw measured illuminance":"Gemessener Helligkeits-Rohwert","Recover state after power outage":"Eingestellter Zustand nach Stromabfall","Remaining battery in %":"Aktueller Batteriestatus in %","Sends a message the last time occupancy was detected. When setting this for example to [10, 60] a `{\\"no_occupancy_since\\": 10}` will be send after 10 seconds and a `{\\"no_occupancy_since\\": 60}` after 60 seconds.":"Sendet eine Nachricht, wann das letzte Mal eine Belegung erkannt wurde. Wenn dies beispielsweise auf [10, 60] eingestellt wird, wird nach 10 Sekunden ein `{\\"no_occupancy_since\\": 10}` gesendet und nach 60 Sekunden ein `{\\"no_occupancy_since\\": 60}`.","Set to false to disable the legacy integration (highly recommended), will change structure of the published payload (default true).":"Auf \\"false\\" gesetzt, um die Legacy-Integration zu deaktivieren (dringend empfohlen), ändert die Struktur der veröffentlichten payloads (Standardwert \\"true\\"). ","sensitivity of the radar":"Einstellen der Radar-Sensibilität","Side of the cube":"Würfelseite","Speed of movement":"Zeigt die Geschwindigkeit der Bewegung an.","Sum of consumed energy":"Seit Anfang verbrauchter Strom in kW/h","Temperature setpoint":"Temperatur Sollwert","The measured atmospheric pressure":"Gemessner Luftdruck","Time in seconds after which occupancy is cleared after detecting it (default 90 seconds).":"Zeit in Sekunden, nach der die Belegung zurück gesetzt wird, nachdem sie erkannt wurde (Standard 90 Sekunden).","Triggered action (e.g. a button click)":"Ausgelöstes Ereignis (z.B. ein Aktivieren eines Tasters)","Triggers an effect on the light (e.g. make light blink for a few seconds)":"Startet einen Effekt des Leuchtmittels (z.B. Blinken für ein paar Sekunden)","Voltage of the battery in millivolts":"Ladung der Batterie in Millivolt","Week format user for schedule":"Aufteilung der Wochentage für Heizprogramme"},"groups":{"add_to_group":"Zur Gruppe hinzufügen","create_group":"Gruppe erstellen","group_id":"Gruppen ID","group_name":"Gruppen Name","group_members":"Gruppen Mitglieder","group_scenes":"Gruppen Szenen","new_group_id":"Neue Gruppen-ID","new_group_id_placeholder":"Wenn benötigt, Gruppen-ID festlegen.","new_group_name":"Neuer Gruppenname","new_group_name_placeholder":"Beispiel: my_bedroom_lights","remove_group":"Gruppe entfernen"},"logs":{"empty_logs_message":"Nichts anzuzeigen","filter_by_text":"Filtere nach","show_only":"Log-Typ"},"map":{"help_coordinator_link_description":"Durchgehende Linien führen zum Coordinator","help_end_device_description":"Grün bedeutet: Endgerät","help_is_coordinator":"Koordinator","help_lqi_description":"Link Qualität zwischen 0 - 255 (höher ist besser), Angaben mit / bedeuten verschiedene Link-Typen.","help_router_description":"Blau bedeutet: Router","help_router_links_description":"Gestrichelte Linien führen zu Routern","hide":"Zum Verbergen klicken","load":"Karte laden","loading":"Abhängig von der Größe des Netzwerks kann es zwischen 10 Sekunden und 2 Minuten dauern."},"navbar":{"all":"Alle","dashboard":"Dashboard","devices":"Geräte","disable_join":"Anlernen deaktivieren","extensions":"Erweiterungen","groups":"Gruppen","logs":"Logs","map":"Karte","ota":"OTA","permit_join":"Anlernen aktivieren","restart":"Neustart","settings":"Einstellungen","toggle_dropdown":"Dropdown Auswahl","touchlink":"Touchlink"},"ota":{"check":"Prüfe auf neue Updates","check_all":"Alle überprüfen","empty_ota_message":"Keine OTA-fähigen Geräte vorhanden","remaining_time":"verbleibende Zeit {{- remaining}}","update":"Update Geräte Firmware"},"scene":{"add":"Hinzufügen","remove_all":"Alle entfernen","scene_id":"Szenen ID","scene_name":"Szenen Name","store":"Speichern","recall":"Abrufen","remove":"Entfernen","select_scene":"Szene auswählen"},"settings":{"about":"Über","advanced":"Erweitert","availability":"Erreichbar","blocklist":"Geblockte Geräte","coordinator_revision":"Coordinator Version","coordinator_type":"Coordinator Typ","donate":"Spende","donation_text":["Hallo, %username%, hier kannst Du unsere harte Arbeit unterstützen.","Ein netter, begleitender Kommentar würde uns ebenso freuen. ;)"],"download_state":"Download Status","experimental":"Experimentell","external_converters":"Externe Konverter","frontend":"Frontend","frontend_version":"Frontend Version","main":"Main","mqtt":"MQTT","ota":"OTA updates","passlist":"Passlist","raw":"Raw","restart_zigbee2mqtt":"Zigbee2MQTT neustarten","serial":"Serial","settings":"Einstellungen","tools":"Tools","zigbee2mqtt_version":"Zigbee2MQTT Version","translate":"Übersetzen"},"settingsSchemaTranslations":{"root-title":"Serial","root__description":"Erlaubt nur bestimmten Geräten, dem Netzwerk beizutreten (anhand der ieeeAddr). Beachte: Alle Geräte, die nicht in dar passlist sind, werden vom Netzwerk entfernt!","root__title":"Passlist","root_availability_blacklist__title":"Aktuelle Blacklist (veraltet, nutze availability_blocklist)","root_availability_blocklist__description":"Klammert Geräte bei dem Verfügbarkeits-Check aus.","root_availability_blocklist__title":"Aktuelle Blockliste","root_availability_passlist__description":"Ermögliche Anwesenheits-Check nur für gelistete Geräte","root_availability_passlist__title":"Aktuelle passlist","root_availability_whitelist__title":"Aktuelle whitelist (veraltet, nutze passlist)","root_ext_pan_id__description":"Zigbee erweiterte PAN ID, Änderung benötigt neues Anlernen aller Geräte!","root_ext_pan_id__title":"Erweiterte PAN ID","root_log_output__description":"Ablageort für das Log, leer lassen um das Logging zu unterbinden","root_log_output__title":"Log Ausgabe","root_log_syslog-title":"System-Log","advanced-title":"Erweitert","advanced_availability_blacklist__title":"Aktuelle Blacklist (veraltet, nutze availability_blocklist)","advanced_availability_blocklist__title":"Aktuelle Blockliste","advanced_availability_blocklist__description":"Klammert Geräte bei dem Verfügbarkeits-Check aus.","advanced_availability_passlist__title":"Aktuelle passlist","advanced_availability_passlist__description":"Ermögliche Anwesenheits-Check nur für gelistete Geräte","advanced_availability_whitelist__title":"Aktuelle whitelist (veraltet, nutze passlist)","advanced_ext_pan_id__title":"Erweiterte Pan ID","advanced_ext_pan_id__description":"Zigbee erweiterte PAN ID, Änderung benötigt neues Anlernen aller Geräte!","advanced_log_output__title":"Log Ausgabe","advanced_log_output__description":"Ablageort für das Log, leer lassen um das Logging zu unterbinden","advanced_log_syslog-title":"System-Log","blocklist__title":"Blocklist","blocklist__description":"Blockt devices vom Netzwerk (anhand der ieeeAddr)","experimental-title":"Experimentell","external_converters__title":"Externe Konverter","external_converters__description":"Festlegen von eigenen, externen Konvertern z. B. zum Einbinden eigener Zigbee-Devices","frontend-title":"Frontend","mqtt-title":"MQTT","ota-title":"OTA updates","passlist__title":"Passlist","passlist__description":"Erlaubt nur bestimmten Geräten, dem Netzwerk beizutreten (anhand der ieeeAddr). Beachte: Alle Geräte, die nicht in dar passlist sind, werden vom Netzwerk entfernt!","serial-title":"Seriell","root_filtered_attributes__title":"Gefilterte, veröffentliche Attibute","root_filtered_attributes__description":"Filter attribute vom veröffentlichten payload.","root_debounce_ignore__title":"Ignoriere doppelte Meldungen","root_debounce_ignore__description":"Schützt einzelne payload Werte von spezifizierten payload Eigenschaften vor Überschreibung während der Entprellzeit","root_filtered_optimistic__title":"Filtered optimistic attributes","root_filtered_optimistic__description":"Filtern von Attributen bei \\"optimistic publish payload\\" bei abruf oder setzen. (Diese Funktion ist abgeschaltet, wenn \\"optimistic\\" deaktiviert ist.)."},"touchlink":{"detected_devices_message":" {{count}} Touchlink Geräte entdeckt.","rescan":"Scan wiederholen","scan":"Scannen"},"values":{"Clear":"Inaktiv","clear":"nicht erkannt","Closed":"Geschlossen","closed":"Geschlossen","empty_string":"String ohne Inhalt","fall":"Fallen","false":"Nein","leaking":"Feuchtigkeit entdeckt","not_supported":"nicht unterstützt","null":"Null","Occupied":"Aktiv","occupied":"Aktiv","Open":"Offen","open":"offen","shake":"geschüttelt","slide":"schieben","supported":"unterstützt","tampered":"manipuliert","tap":"getippt","true":"Ja","wakeup":"aufgeweckt"},"zigbee":{"battery":"Batterie","block_join":"Blockieren vom Anlernen","cluster":"Cluster","description":"Beschreibung","dc_source":"Gleichstromquelle","device":"Gerät","device_type":"Geräte Typ","endpoint":"Endpunkt","firmware_build_date":"Firmware Datum","firmware_version":"Firmware Version","force_remove":"Erzwinge Entfernen","friendly_name":"Gerätename","ieee_address":"IEEE Addresse","interview_completed":"Interview erfolgreich","interview_failed":"Interview fehlgeschlagen","interviewing":"Interviewen","last_seen":"Zuletzt gesehen","lqi":"LQI","mains_single_phase":"Netz (einphasig)","manufacturer":"Hersteller","model":"Modell","network_address":"Netzwerk Adresse","pic":"Bild","power":"Spannungsversorgung","power_level":"Leistungspegel","reconfigure":"Neu konfigurieren","remove_device":"Gerät entfernen","rename_device":"Gerät umbenennen","support_status":"Unterstützungsstatus","unsupported":"Nicht unterstützt","updating_firmware":"Firmware aktualisieren","update_Home_assistant_entity_id":"Update Home Assistant System ID","zigbee_model":"Zigbee Modell","zigbee_manufacturer":"Zigbee Hersteller","attribute":"Attribute","min_rep_interval":"Minimaler Report Intervall","max_rep_interval":"Maximaler Report Intervall","min_rep_change":"Minimale Report Änderungen","actions":"Aktionen","select_cluster":"Wähle Cluster","none":"Nichts","select_attribute":"Wähle Attribut","output_clusters":"Ausgabe Cluster","input_clusters":"Eingabe Cluster"}}');
;// CONCATENATED MODULE: ./src/i18n/locales/ru.json
const locales_ru_namespaceObject = JSON.parse('{"common":{"action":"Действие","actions":"Действия","apply":"Применить","attribute":"Атрибут","bind":"Связать","check_all":"Выбрать все","clear":"Очистить","close":"Закрыть","cluster":"Кластер","clusters":"Кластеры","confirmation":"Запрос подтверждения","delete":"Удалить","destination":"Целевая конечная точка","devices":"Устройства","dialog_confirmation_prompt":"Вы уверены?","disable":"Отключать","enter_search_criteria":"Введите параметры поиска","groups":"Группы","loading":"Загружается...","none":"Нет","ok":"OK","read":"Считать","save":"Сохранить","select_device":"Выберите устройство","select_endpoint":"Выберите конечную точку","source_endpoint":"Исходная конечная точка","the_only_endpoint":"Единственная конечная точка","unbind":"Отвязать","unknown":"Неизвестно","write":"Записать"},"devicePage":{"about":"Об устройстве","bind":"Связь","clusters":"Кластеры","dev_console":"Консоль разработчика","exposes":"Экспонирует","reporting":"Отчеты","scene":"Сцена","settings":"Настройки","settings_specific":"Настройки (особые)","state":"Состояние","unknown_device":"Неизвестное устройство"},"exposes":{"action":"Действие","auto_off":"Автоотключение","away_mode":"Режим отсутствия","away_preset_days":"Предустановка дней отсутствия","away_preset_temperature":"Предустановка температуры отсутствия","backlight_mode":"Режим подсветки","battery":"Батарейка","battery_low":"Батарейка разряжена","boost_time":"Время усиленной работы","brightness":"Яркость","calibration":"Калибровка","carbon_monoxide":"Угарный газ","co2":"Углекислый газ","color_hs":"Цвет (HS)","color_temp":"Цветовая температура","color_temp_startup":"Цветовая температура при старте","color_xy":"Цвет (XY)","comfort_temperature":"Комфортная температура","consumer_connected":"Потребитель подключен","consumer_overload":"Перегрузка потребителя","contact":"Контакт","current":"Ток","current_heating_setpoint":"Текущая заданная точка нагрева","device_temperature":"Температура устройства","eco_temperature":"Экономная температура","effect":"Эффект","empty_exposes_definition":"Обличает опредиление","energy":"Энергия","force":"Принудительно","humidity":"Влажность","illuminance":"Освещенность","illuminance_lux":"Освещенность","led_disabled_night":"Ночной режим индикатора","linkquality":"Качество связи","local_temperature":"Местная температура","local_temperature_calibration":"Калибровка местной температуры","max_temperature":"Макс. температура","min_temperature":"Мин. температура","motion":"Движение","motion_direction":"Направление движения","motion_speed":"Скорость движения","motor_reversal":"Обратный ход двигателя","moving":"Перемещение","occupancy":"Занятость","operation_mode":"Режим работы","options":"Опции","position":"Позиция","power":"Питание","power_on_behavior":"Мощность при поведении","power_outage_memory":"Память при отключении питания","preset":"Предустановка","presence":"Пресутствие","pressure":"Давление","sensivity":"Чувствительность","smoke":"Дым","state":"Состояние","strength":"Сила","system_mode":"Системный режим","tamper":"Вмешательство","temperature":"Температура","voltage":"Напряжение","water_leak":"Протечка","week":"Неделя"},"extensions":{"create_new_extension":"Создать новое расширение","extension_name_propmt":"Введите имя нового расширения","select_extension_to_edit":"Выберите расширение для редактирования"},"featureNames":{"action":"Действие","action_angle":"Угол действия","action_from_side":"Действие со стороны","action_side":"Сторона действия","action_to_side":"Действие на сторону","alarm":"Тревога","angle_x":"Угол X","angle_y":"Угол Y","angle_z":"Угол Z","away_mode":"Режим отъезда","brightness":"Яркость","calibration_time":"Время калибровки","carbon_monoxide":"Угарный газ","co2":"Углекислый газ","color_hs":"Цвет Hs","color_temp":"Цветовая температура","color_temp_startup":"Начальная цветовая температура","color_xy":"Цвет XY","consumer_connected":"Потребитель подключен","contact":"Контакт","current":"Ток","current_heating_setpoint":"Установленная температура","current_level_startup":"Установленный уровень запуска","device_temperature":"Температура прибора","energy":"Энергия","humidity":"Влажность","illuminance":"Освещенность","level_config":"Конфигурация уровня","local_temperature":"Фактическая температура","local_temperature_calibration":"Калибровка температуры","motor_speed":"Скорость двигателя","moving":"Движение","occupancy":"Занятость","on_off_transition_time":"Вкл./Выкл. время перехода","options":"Настройки","position":"Положение","preset":"Пресеты","pressure":"Давление","power":"Потребление энергии","smoke":"Дым","smoke_density":"Плотность дыма","soil_moisture":"Влажность почвы","state":"Состояние","system_mode":"Режим системы","tamper":"Вмешательство","temperature":"Температура","voltage":"Напряжение","water_leak":"Утечка воды"},"featureDescriptions":{"Auto off after specific time.":"Автоматическое выключение через определенное время","Away mode":"Режим отсутствия","Away preset days":"Предустановленные дни отсутствия","Away preset temperature":"Предустановленная температура отсутсвия","Boost time":"Время ускорения","Brightness of this light":"Яркость источника света","Calibrates the humidity value (absolute offset), takes into effect on next report of device.":"Калибрует значение влажности (абсолютное смещение), вступает в силу при следующем отчете устройства.","Calibrates the illuminance value (percentual offset), takes into effect on next report of device.":"Калибрует значение освещенности (процентное смещение), вступает в силу при следующем отчете устройства.","Calibrates the illuminance_lux value (percentual offset), takes into effect on next report of device.":"Калибрует значение освещения в люксах (процентное смещение), вступает в силу при следующем отчете устройства.","Calibrates the pressure value (absolute offset), takes into effect on next report of device.":"Калибрует значение давления (абсолютное смещение), вступает в силу при следующем отчете устройства.","Calibrates the temperature value (absolute offset), takes into effect on next report of device.":"Калибрует значение температуры (абсолютное смещение), вступает в силу при следующем отчете устройства.","Calibration time":"Время калибровки","Color of this light expressed as hue/saturation":"Цвет источника света, выраженный как оттенок/насыщенность","Color of this light in the CIE 1931 color space (x/y)":"Цвет источника света в цветовом пространстве CIE 1931 (x/y)","Color temperature after cold power on of this light":"Цветовая температура после отключения электричества","Color temperature of this light":"Цветовая температура источника цвета","Comfort temperature":"Комфортная температура","Controls the behaviour when the device is powered on":"Управляет поведением устройства при включении","Current temperature measured on the device":"Текущая температура, измеренная на устройством","Direction of movement from the point of view of the radar":"Направление движения с точки зрения радара","Eco temperature":"Еко температура","Enable/disable auto lock":"Вкл./Выкл. автоматической блокировки","Enable/disable away mode":"Вкл./Выкл. режима отсутствия","Enables/disables physical input on the device":"Вкл./Выкл. физический ввод на устройстве","Enables/disables window detection on the device":"Вкл./Выкл. определения окон на устройстве","Enabling prevents both relais being on at the same time":"Включение предотвращает одновременное включение обоих реле","Force the valve position":"Форсировать положение клапана","Indicates if CO (carbon monoxide) is detected":"Указывает, обнаружен ли СО (оксид углерода)","Indicates if the battery of this device is almost empty":"Указывает на то, что аккумулятор этого устройства почти разряжен","Indicates if the contact is closed (= true) or open (= false)":"Указывает, закрыт ли контакт (= true) или открыт (= false)","Indicates whether the device detected a water leak":"Указывает, обнаружена ли устройством протечка воды","Indicates whether the device detected occupancy":"Указывает, обнаружило ли устройство занятость","Indicates whether the device detected presence":"Указывает, обнаружило ли устройство присутствие","Indicates whether the device detected smoke":"Указывает, обнаружило ли устройство дым","Indicates whether the device is tampered":"Указывает, обнаружило ли устройство вмешательство","Instantaneous measured electrical current":"Мгновенный измеренный электрический ток","Instantaneous measured power":"Мгновенная измеренная мощность","Link quality (signal strength)":"Качество связи (мощность сигнала)","Maximum temperature":"Максимальная температура","Measured electrical potential value":"Измеренное значение электрического потенциала","Measured illuminance in lux":"Измеренная освещенность в люксах","Measured relative humidity":"Измеренная относительная влажность","Measured temperature value":"Измеренное значение температуры","Minimum temperature":"Минимальная температура","Mode of this device":"Режим этого устройства","Mode of this device (similar to system_mode)":"Режим этого устройства (аналог system_mode)","Moving inside the range of the sensor":"Перемещение в пределах диапазона датчика","Motor speed":"Скорость двигателя","Number of digits after decimal point for humidity, takes into effect on next report of device.":"Количество цифр после десятичной точки для влажности, вступает в силу при следующем отчете устройства.","Number of digits after decimal point for illuminance, takes into effect on next report of device.":"Количество цифр после десятичной точки для освещенности, вступает в силу при следующем отчете устройства.","Number of digits after decimal point for illuminance_lux, takes into effect on next report of device.":"Количество знаков после запятой для освещенности в люксах, вступает в силу при следующем отчете устройства.","Number of digits after decimal point for pressure, takes into effect on next report of device.":"Количество цифр после десятичной точки для давления, вступает в силу при следующем отчете устройства.","Number of digits after decimal point for temperature, takes into effect on next report of device.":"Количество цифр после десятичной точки для температуры, вступает в силу при следующем отчете устройства.","Offset to be used in the local_temperature":"Смещение, которое будет использоваться в локальной температуре","On/off state of the switch":"Состояние Вкл./Выкл. переключателя","On/off state of this light":"Состояние Вкл./Выкл. освещения","Position":"Положение","Position of this cover":"Положение шторы (занавески)","Presets for sensivity for presence and movement":"Предустановки чувствительности к присутствию и движению","Raw measured illuminance":"Необработанная измеренная освещенность","Recover state after power outage":"Восстановить состояние после отключения электроэнергии","Remaining battery in %":"Оставшийся заряд батареи в процентах","Sends a message the last time occupancy was detected. When setting this for example to [10, 60] a `{\\"no_occupancy_since\\": 10}` will be send after 10 seconds and a `{\\"no_occupancy_since\\": 60}` after 60 seconds.":"Отправляет сообщение о последнем обнаружении занятости. При установке, например, на [10, 60], `{\\"no_occupancy_since\\": 10}` будет отправлено через 10 секунд, а `{\\"no_occupancy_since\\": 60}` через 60 секунд.","Sensitivity of the radar":"Чувствительность радара","Set to false to disable the legacy integration (highly recommended), will change structure of the published payload (default true).":"Установите значение false, чтобы отключить устаревшую интеграцию (настоятельно рекомендуется), изменит структуру опубликованной полезной нагрузки (по умолчанию true).","Side of the cube":"Сторона куба","Speed of movement":"Скорость движения","Sum of consumed energy":"Сумма потребленной энергии","Temperature setpoint":"Уставка температуры","The measured atmospheric pressure":"Измеренное атмосферное давление","Time in seconds after which occupancy is cleared after detecting it (default 90 seconds).":"Время в секундах, по истечении которого занятость очищается после ее обнаружения (по умолчанию 90 секунд).","Triggered action (e.g. a button click)":"Инициированное действие (например, нажатие кнопки)","Triggers an effect on the light (e.g. make light blink for a few seconds)":"Запускает эффект на свет (например, заставляет свет мигать в течение нескольких секунд)","Voltage of the battery in millivolts":"Напряжение аккумулятора в милливольтах","Week format user for schedule":"Недельный формат пользователя для расписания"},"groups":{"add_to_group":"Добавить в группу","create_group":"Создать группу","group_id":"Идентификатор группы","group_name":"Название группы","group_members":"Члены группы","group_scenes":"Групповые сцены","new_group_id":"Новый идентификатор группы","new_group_id_placeholder":"Укажите идентификатор группы, если требуется","new_group_name":"Имя новой группы","new_group_name_placeholder":"Пример: my_bedroom_lights","remove_group":"Удалить группу"},"logs":{"empty_logs_message":"Нет информации для отображения","filter_by_text":"Фильтровать по тексту","show_only":"Только показать"},"map":{"help_coordinator_link_description":"Сплошные линии - связи с Координатором","help_end_device_description":"Зеленый означает Конечное устройство","help_is_coordinator":"это Координатор","help_lqi_description":"Качество связи в диапазоне 0 - 255 (больше - лучше). Значения с / означают несколько типов соединений","help_router_description":"Голубой означает Роутер","help_router_links_description":"Пунктирные лини - связи с Роутерами","hide":"Нажмите, чтобы скрыть","load":"Загрузить карту","loading":"В зависимости от размера вашей сети, это может занять от 10 секунд до 2 минут."},"navbar":{"all":"Все","dashboard":"Приборная панель","devices":"Устройства","disable_join":"Запретить подключения","extensions":"Расширения","groups":"Группы","logs":"Логи","map":"Карта","ota":"ОТА","permit_join":"Разрешить подключения","restart":"Перезапустить","settings":"Настройки","toggle_dropdown":"Toggle dropdown","touchlink":"Touchlink"},"ota":{"check":"Проверить на наличие новых обновлений","check_all":"Проверить все","empty_ota_message":"У вас нет устройств, поддерживающих обновление по воздуху (OTA)","remaining_time":"Оставшееся время {{- remaining}}","update":"Обновить прошивку устройства"},"scene":{"add":"Добавить","recall":"Вызвать","remove":"Удалить","remove_all":"Удалить все","scene_id":"Идентификатор сцены","scene_name":"Название сцены","select_scene":"Выбор сцены","store":"Сохранить"},"settings":{"about":"О программе","advanced":"Расширенные","availability":"Доступность","blocklist":"Черный список","coordinator_revision":"Версия координатора","coordinator_type":"Тип координатора","donate":"Пожертвования","donation_text":["Здравствуйте, %username%! Тут вы можете поблагодарить нас за нашу проделанную работу","Не стесняйтесь добавить приятные пожелания в комментариях ;)"],"download_state":"Скачать состояния","experimental":"Экспериментальные","external_converters":"Внешние конвертеры","frontend":"Веб интерфейс","frontend_version":"Версия веб интерфейса","main":"Главные","mqtt":"MQTT","ota":"Обновления по воздуху (OTA)","passlist":"Белый список","raw":"Исходные данные","restart_zigbee2mqtt":"Перезапустить Zigbee2MQTT","serial":"Последовательный интерфейс","settings":"Настройки","tools":"Инструменты","translate":"Перевод","zigbee2mqtt_version":"Версия Zigbee2MQTT"},"settingsSchemaTranslations":{"root-title":"Serial","root__description":"Позволять подключаться к сети только определенным устройствам (проверка по ieeeAddr). Обратите внимание, что все устройства, не включенные в список, будут удалены из сети!","root__title":"Белый список","root_availability_blacklist__title":"Черный список проверки доступности (устарело, используйте availability_blocklist)","root_availability_blocklist__description":"Исключить устройства из проверки на доступность","root_availability_blocklist__title":"Черный список проверки доступности","root_availability_passlist__description":"Включить проверку доступности только для определенных устройств","root_availability_passlist__title":"Белый список проверки доступности","root_availability_whitelist__title":"Белый список проверки доступности (устарело, используйте passlist)","root_debounce_ignore__description":"Позволяет публиковать указанные атрибуты без использования задержки фильтрации повторяющихся пакетов","root_debounce_ignore__title":"Игнорировать фильтр повторных пакетов","root_ext_pan_id__description":"Расширенный идентификатор сети Zigbee. Изменение потребует перепривязки всех устройств!","root_ext_pan_id__title":"Расш. идентификатор сети (Ext Pan ID)","root_filtered_attributes__description":"Позволяет отключить публикацию указанных атрибутов","root_filtered_attributes__title":"Фильтр атрибутов","root_log_output__description":"Папка, в которой будут формировать лог файлы. Оставьте поле пустым для отключения лог файлов.","root_log_output__title":"Папка для логов","root_log_syslog-title":"syslog"},"touchlink":{"detected_devices_message":"Найдено устройств, поддерживающих быстрое подключение (touchlink): {{count}}.","rescan":"Повторить поиск","scan":"Искать"},"values":{"clear":"Не обнаружено","closed":"Закрыт","empty_string":"Пустая строчка","false":"Выкл","leaking":"Утечка","not_supported":"Не поддерживается","null":"Ноль","occupied":"Занято","open":"Открыт","supported":"Поддерживается","tampered":"Сломано","true":"Вкл"},"zigbee":{"actions":"Действие","attribute":"Атрибут","battery":"Батарея","block_join":"Блокировать дальнейшие попытки подключения","cluster":"Кластер","description":"Описание","device":"Устройство","device_type":"Тип устройства","endpoint":"Конечная точка","firmware_build_date":"Дата создания прошивки","firmware_version":"Версия прошивки","force_remove":"Удалить принудительно","friendly_name":"Пользовательское имя","ieee_address":"Адрес IEEE","input_clusters":"Кластеры ввода","interview_completed":"Запрос информации об устройстве завершен","last_seen":"Последние данные","lqi":"Качество сигнала","manufacturer":"Производитель","max_rep_interval":"макс. интервал отчетов","min_rep_change":"Мин. интервал отчетов при изменении","min_rep_interval":"Мин. интервал отчетов","model":"Модель","network_address":"Сетевой адрес","none":"Ничего","output_clusters":"Кластеры вывода","pic":"Рис.","power":"Мощность","power_level":"Уровень мощности","reconfigure":"Перенастроить","remove_device":"Удалить устройство","rename_device":"Переименовать устройство","select_attribute":"Выберите атрибут","select_cluster":"Выберите кластер","support_status":"Статус поддержки","unsupported":"Не поддерживается","update_Home_assistant_entity_id":"Обновить идентификатор объекта Home Assistant","zigbee_manufacturer":"Производитель Zigbee","zigbee_model":"Модель Zigbee"}}');
;// CONCATENATED MODULE: ./src/i18n/locales/ptbr.json
const locales_ptbr_namespaceObject = JSON.parse('{"common":{"action":"Ação","actions":"Ações","apply":"Aplicar","attribute":"Atributo","bind":"Vincular","check_all":"Verificar todos","clear":"Limpar","close":"Fechar","cluster":"Cluster","clusters":"Clusters","confirmation":"Confirmação","delete":"Deletar","destination":"Destino","devices":"Dispositivos","dialog_confirmation_prompt":"Tem certeza?","disable":"Desabilitar","enter_search_criteria":"Entre com critério de pesquisa","groups":"Grupos","loading":"Carregando...","none":"Nenhum","ok":"Ok","read":"Ler","save":"Salvar","select_device":"Selecionar dispositivo","select_endpoint":"Selecionar endpoint","source_endpoint":"Endpoint Origem","unbind":"Desvincular","write":"Escrever"},"devicePage":{"about":"Sobre","bind":"Vincular","clusters":"Clusters","dev_console":"Console desenvolvimento","exposes":"Expõe","reporting":"Comunicação","settings":"Configurações","settings_specific":"Configurações (Específicas)","state":"Estado","unknown_device":"Dispositivo desconhecido"},"exposes":{"action":"Ação","auto_off":"Auto desligar","away_mode":"Modo ausente","away_preset_days":"Dias ausentes predefinidos","away_preset_temperature":"Temperatura predefinida ausente","backlight_mode":"Modo de luz de fundo","battery":"Bateria","battery_low":"Bateria fraca","boost_time":"Tempo de impulso","brightness":"Brukhi","calibration":"Calibração","carbon_monoxide":"Monóxido de carbono","color_hs":"Cor (HS)","color_temp":"Temperatura cor","color_temp_startup":"Temperatura cor inicial","color_xy":"Cor (XY)","comfort_temperature":"Temperature de conforto","consumer_connected":"Consumidor conectado","consumer_overload":"Sobrecarga de consumidor","contact":"Contato","current":"Corrente","current_heating_setpoint":"Ponto de ajuste de aquecimento atual","eco_temperature":"Temperatura Eco","effect":"Efeito","energy":"Energia","force":"Força","humidity":"Umidade","illuminance":"Iluminância","illuminance_lux":"Iluminância Lux","led_disabled_night":"Led desativado noite","linkquality":"Qualidade do link","local_temperature":"Temperatura Local","local_temperature_calibration":"Calibração de temperatura local","max_temperature":"Temperatura Max","min_temperature":"Temperatura Min","motor_reversal":"Inversão do motor","moving":"Movendo","occupancy":"Ocupação","operation_mode":"Modo de operação","options":"Opções","position":"Posição","power":"Potência","power_on_behavior":"Comportamento ligado","power_outage_memory":"Memória de queda de energia","preset":"Predefinição","pressure":"Pressão","sensivity":"Sensibilidade","smoke":"Fumaça","state":"Estado","strength":"Força","system_mode":"Modo do Sistema","tamper":"Adulteração","temperature":"Temperatura","voltage":"Voltagem","water_leak":"Vazamento de água","week":"Semana"},"extensions":{"create_new_extension":"Criar nova extensão","extension_name_propmt":"Insira o nome da nova extensão","select_extension_to_edit":"Selecione a extensão para editar"},"featureNames":{"action":"Ação","angle_x":"Ângulo X","angle_y":"Ângulo Y","angle_z":"Ângulo Z","brightness":"Brilho","color_temp":"Temperatura Cor","color_xy":"Cor Xy","contact":"Contato","humidity":"Umidade","illuminance":"Iluminância","occupancy":"Ocupação","pressure":"Pressão","soil_moisture":"Umidade do Solo","state":"Estado","temperature":"Temperatura"},"groups":{"add_to_group":"Adicionar ao grupo","create_group":"Criar grupo","new_group_id":"ID do novo grupo","new_group_id_placeholder":"Especifique o ID do grupo caso necessário","new_group_name":"Nome do novo grupo","new_group_name_placeholder":"exemplo: minhas_luzes_quarto","remove_group":"Remover grupo"},"logs":{"empty_logs_message":"Não há logs para exibir","filter_by_text":"Filtrar por texto","show_only":"Apenas mostrar"},"map":{"help_coordinator_link_description":"Linhas sólidas são o link para o Coordenador","help_end_device_description":"Verde significa dispositivo de ponta (endpoint)","help_is_coordinator":"é o Coordenador","help_lqi_description":"A qualidade do link está entre 0 - 255 (Maior é melhor), valores com / representam tipos múltiplos de link","help_router_description":"Azul significa roteador (Router)","help_router_links_description":"Linhas pontilhadas são o link para os Roteadores","hide":"Clique em mim para esconder","load":"Carregar mapa","loading":"Dependendo do tamanho da sua rede, isso pode levar entre 10 segundos e 2 minutos."},"navbar":{"all":"Todos","dashboard":"Dashboard","devices":"Dispositivos","disable_join":"Desabilitar pareamento","extensions":"Extensões","groups":"Grupos","logs":"Logs","map":"Mapa","ota":"OTA","permit_join":"Permitir pareamento","restart":"Reiniciar","settings":"Configurações","toggle_dropdown":"Alternar dropdown","touchlink":"Touchlink"},"ota":{"check":"Verificar novas atualizações","check_all":"Verificar todos","empty_ota_message":"Você não possui dispositivos que suportam OTA","remaining_time":"Tempo restante {{- remaining}}","update":"Atualizar firmware de dispositivo"},"settings":{"about":"Sobre","advanced":"Avançado","blocklist":"Lista de bloqueio","coordinator_revision":"Revisão do Coordenador","coordinator_type":"Tipo de Coordenador","donate":"Doação","donation_text":["Olá, %username%, aqui você pode nos agradecer pelo nosso trabalho","Não hesite em nos dizer algumas palavras legais ;)"],"download_state":"Estado do Download","experimental":"Experimental","external_converters":"Conversores Externos","frontend":"Frontend","frontend_version":"Versão do Frontend","main":"Principal","mqtt":"MQTT","ota":"Atualizações OTA","passlist":"Lista de aprovação","raw":"Puro","restart_zigbee2mqtt":"Reiniciar Zigbee2MQTT","serial":"Serial","settings":"Configurações","tools":"Ferramentas","zigbee2mqtt_version":"Versão Zigbee2MQTT"},"settingsSchemaTranslations":{"root-title":"Serial","root__description":"Permitir que apenas alguns dispositivos entrem na rede (pelo ieeeAddr). Fique atento, todos os dispositivos que não estão na lista de aprovação serão removidos da rede!","root__title":"Lista de aprovação","root_availability_blacklist__title":"Lista negra de disponibilidade (descontinuada, use Lista de bloqueio de disponibilidade)","root_availability_blocklist__description":"Impedir que a disponibilidade dos dispositivos seja verificada","root_availability_blocklist__title":"Lista de bloqueio de disponibilidade ","root_availability_passlist__description":"Ative a verificação de disponibilidade apenas para determinados dispositivos","root_availability_passlist__title":"Lista de aprovação de disponibilidade","root_availability_whitelist__title":"Lista branca de disponibilidade (descontinuada, use Lista de aprovação de disponibilidade)","root_debounce_ignore__description":"Previne que valores únicos de payload das propriedades do payload especificadas sejam sobrescritas dentro do tempo de debounce","root_debounce_ignore__title":"Ignorar debounce","root_ext_pan_id__description":"Pan ID Zigbee estendido, mudar requer reparear todos os dispositivos!","root_ext_pan_id__title":"Pan ID estendido","root_filtered_attributes__description":"Permite evitar que certos atributos sejam publicados","root_filtered_attributes__title":"Atributos filtrdos","root_log_output__description":"Local de saída de log, deixe em branco para desativar o log","root_log_output__title":"Saída de Log","root_log_syslog-title":"syslog"},"touchlink":{"detected_devices_message":"Detectados {{count}} dispositivos touchlink.","rescan":"Escanear novamente","scan":"Escanear"},"values":{"clear":"Limpo","closed":"Fechado","occupied":"Ocupado","open":"Aberto","true":"Verdadeiro"},"zigbee":{"attribute":"Atributo","block_join":"Bloquear re-integração na rede","cluster":"Cluster","description":"Descrição","device_type":"Tipo de dispositivo","endpoint":"Endpoint","firmware_build_date":"Data de compilação de Firmware","firmware_version":"Versão de firmware","force_remove":"Forçar remoção","friendly_name":"Friendly name","ieee_address":"Endereço IEEE","input_clusters":"Clusters de entrada","interview_completed":"Pareamento completo","last_seen":"Última vez visto","lqi":"LQI","manufacturer":"Fabricante","max_rep_interval":"max intervalo rep","min_rep_change":"Min mudança rep","min_rep_interval":"Min intervalo rep","model":"Modelo","network_address":"Endereço de rede","output_clusters":"Clusters de saída","pic":"Pic","power":"Potência","reconfigure":"Reconfigurar","remove_device":"Remover dispositivo","rename_device":"Renomear dispositivo","select_attribute":"Select atributo","select_cluster":"Selecionar cluster","support_status":"Status de suporte","unsupported":"Não suportado","update_Home_assistant_entity_id":"Atualizar ID de entidade no Home Assistant","zigbee_model":"Modelo Zigbee"}}');
;// CONCATENATED MODULE: ./src/i18n/locales/es.json
const locales_es_namespaceObject = JSON.parse('{"common":{"action":"Acción","actions":"Acciones","apply":"Aplicar","attribute":"Atributo","bind":"Enlazar","check_all":"Comprobar todo","clear":"Limpiar","close":"Cerrar","cluster":"Cluster","clusters":"Clusters","the_only_endpoint":"El único endpoint","confirmation":"Mensaje de confirmación","delete":"Borrar","destination":"Destino","devices":"Dispositivos","dialog_confirmation_prompt":"¿Estas seguro?","disable":"Deshabilitar","enter_search_criteria":"Introduce el criterio de busqueda","groups":"Grupos","loading":"Cargando...","none":"Ninguno","ok":"Ok","read":"Leer","save":"Guardar","select_device":"Seleccionar dispositivo","select_endpoint":"Seleccionar endpoint","source_endpoint":"Endpoint de origen","unbind":"Desenlazar","write":"Escribir"},"devicePage":{"about":"Acerca de","bind":"Unir","clusters":"Clusters","dev_console":"Consola de Desarrollo","exposes":"Expone","reporting":"Reportando","settings":"Ajustes","settings_specific":"Ajustes (especificos)","state":"Estado","unknown_device":"Dispositivo desconocido"},"exposes":{"action":"Acción","auto_off":"Apagado automático","away_mode":"Modo ausente","away_preset_days":"Días preestablecidos ausentes","away_preset_temperature":"Temperatura prestablecida ausente","backlight_mode":"Modo luz de fondo","battery":"Batería","battery_low":"Batería baja","boost_time":"Tiempo de impulsión","brightness":"Brillo","calibration":"Calibración","carbon_monoxide":"Monóxido de carbono","color_hs":"Color (HS)","color_temp":"Temperatura de colore","color_temp_startup":"Temperatura de color de inicio","color_xy":"Color (XY)","comfort_temperature":"Temperatura de Comfort","consumer_connected":"Consumidor conectado","consumer_overload":"Sobrecarga del consumidorConsumer overload","contact":"Contacto","current":"Actual","current_heating_setpoint":"Punto de ajuste de calor","eco_temperature":"Temperatura Eco","effect":"Efecto","energy":"Energía","force":"Forzar","humidity":"Humedad","illuminance":"Iluminación","illuminance_lux":"Iluminación","led_disabled_night":"Led deshabilitado por la noche","linkquality":"Calidad de enlace","local_temperature":"Temperatura local","local_temperature_calibration":"Calibración de temperatura local","max_temperature":"Máxima temperatura","min_temperature":"Mínima temperatura","motor_reversal":"Inversión del motor","moving":"En movimiento","occupancy":"Ocupación","operation_mode":"Modo de operación","options":"Opciones","position":"Posición","power":"Potencia","power_on_behavior":"Comportamiento de encendido","power_outage_memory":"Memoria de corte de energía","preset":"Preestablecido","pressure":"Presión","sensivity":"Sensivity","smoke":"Humo","state":"Estado","strength":"Fuerza","system_mode":"Modo de sistema","tamper":"Manipulado","temperature":"Temperatura","voltage":"Voltaje","water_leak":"Fuga de agua","week":"Semana"},"extensions":{"create_new_extension":"Crear una nueva extensión","extension_name_propmt":"Introduce un nuevo nombre de extensión","select_extension_to_edit":"Selecciona la extensión para ediar"},"featureNames":{"action":"Acción","angle_x":"Ángulo X","angle_y":"Ángulo Y","angle_z":"Ángulo Z","brightness":"Brillo","color_temp":"Temperatura de color","color_xy":"Color Xy","contact":"Contacto","current":"Corriente","energy":"Energía","humidity":"Humedad","illuminance":"Iluminación","occupancy":"Ocupación","power":"Consumo","pressure":"Presión","smoke":"Humo","smoke_density":"Densidad del humo","soil_moisture":"Humedad del suelo","state":"Estado","tamper":"Manipulación","temperature":"Temperatura","voltage":"Voltaje","water_leak":"Fuga de agua"},"groups":{"add_to_group":"Añadir a un grupo","create_group":"Crear grupo","new_group_id":"Nuevo id de grupo","new_group_id_placeholder":"Especifica el id de grupo si es necesario","new_group_name":"Nuevo nombre de grupo ","new_group_name_placeholder":"ejemplo: luces_del_dormitorio","remove_group":"Eliminar grupo"},"logs":{"empty_logs_message":"No hay nada que mostrar","filter_by_text":"Filtrar por texto","show_only":"Mostar solo"},"map":{"help_coordinator_link_description":"Las líneas continuas son el enlace al Coordinador","help_end_device_description":"Verde significa dispositivo final","help_is_coordinator":"es el Coordinador","help_lqi_description":"La calidad del enlace está entre  0 - 255 (cuanto más alto mejor), valores con / representan multiples tipos de enlaces","help_router_description":"Azul significa Router","help_router_links_description":"Las líneas discontinuas son el enlace con los Routers","hide":"Haz clic para ocultar","load":"Cargar mapa","loading":"Dependiendo del tamaño de su red, puede tardar entre 10 segundos y 2 minutos."},"navbar":{"all":"Todos","dashboard":"Panel","devices":"Dispositivos","disable_join":"Deshabilitar el unirse","extensions":"Extensiones","groups":"Grupos","logs":"Registros","map":"Mapa","ota":"OTA","permit_join":"Permitir unirse","restart":"Reiniciar","settings":"Ajustes","toggle_dropdown":"Alternar desplegable","touchlink":"Touchlink"},"ota":{"check":"Comprobar actualizaciones","check_all":"Comprobar todo","empty_ota_message":"No tienes ningún dispositivo compatible con OTA","remaining_time":"Tiempo restante {{- remaining}}","update":"Actualizar el firmware del dispositivos"},"settings":{"about":"Acerca de","advanced":"Avanzado","blocklist":"Bloqueados","coordinator_revision":"Versión de Coordinador","coordinator_type":"Tipo de Coordinador","donate":"Donar","donation_text":["Hola, %username%, aquí puedes agradecernos por trabajar tan duro","No dudes en decir algo bueno también ;)"],"download_state":"Descargar estado","experimental":"Experimental","external_converters":"Convertidores externos","frontend":"Interfaz","frontend_version":"Versión de Interfaz","main":"Principal","mqtt":"MQTT","ota":"Actualizaciones OTA","passlist":"Lista de acceso","raw":"Raw","restart_zigbee2mqtt":"Reiniciar Zigbee2MQTT","serial":"Serie","settings":"Ajustes","tools":"Herramientas","translate":"Traducir","zigbee2mqtt_version":"Versión de Zigbee2MQTT"},"settingsSchemaTranslations":{"advanced-title":"Avanzado","advanced_availability_blacklist__title":"Lista negra de disponibilidad (en desuso, utilizar la lista de bloqueo)","advanced_availability_blocklist__description":"Evitar que se compruebe la disponibilidad de los dispositivos","advanced_availability_blocklist__title":"Lista de bloqueo","advanced_availability_passlist__description":"Solo habilite la verificación de disponibilidad para ciertos dispositivos","advanced_availability_passlist__title":"Lista de acceso","advanced_availability_whitelist__title":"Lista blanca de disponibilidad (en desuso, usar la lista de acceso)","advanced_ext_pan_id__description":"Zigbee extended PAN ID, !atención cambiarlo requiere emparejar todos los dispositivos¡","advanced_ext_pan_id__title":"Ext Pan ID","advanced_log_output__description":"Ubicación de salida del registro, dejalo vacío para suprimir el registro","advanced_log_output__title":"Salida del registro","advanced_log_syslog-title":"syslog","blocklist__description":"Bloquear dispositivos de la red (por su ieeeAddr)","blocklist__title":"Lista de bloqueo","experimental-title":"Experimental","external_converters__description":"Puedes establecer convertidores externos para por ejemplo añadir el soporte para un dispositivo Diy","external_converters__title":"Convertidores externos","frontend-title":"Interfaz","mqtt-title":"MQTT","ota-title":"Actualizaciones OTA","passlist__description":"Permitir unicamente a ciertos dispositivos unirse a la red (identificados por ieeeAddr). !Ten en cuenta que todos los dispositivos que no esten en la lista seran eliminados de la red¡","passlist__title":"Lista de comprobación","root-title":"Serie","root__description":"Permitir que solo ciertos dispositivos puedan unirse a la red, (por su ieeeAddr). Ten en cuenta que todos los dispositivos que no esten en la lista de acceso, se eliminaran.","root__title":"Lista de acceso","root_availability_blacklist__title":"Lista negra de disponibilidad (en desuso, utilizar la lista de bloqueo)","root_availability_blocklist__description":"Evitar que se compruebe la disponibilidad de los dispositivos","root_availability_blocklist__title":"Lista de bloqueo","root_availability_passlist__description":"Solo habilite la verificación de disponibilidad para ciertos dispositivos","root_availability_passlist__title":"Lista de acceso","root_availability_whitelist__title":"Lista blanca de disponibilidad (en desuso, usar la lista de acceso)","root_debounce_ignore__description":"Protects unique payload values of specified payload properties from overriding within debounce time","root_debounce_ignore__title":"Ignore debounce","root_ext_pan_id__description":"Zigbee extended PAN ID, !atención cambiarlo requiere emparejar todos los dispositivos¡","root_ext_pan_id__title":"Ext Pan ID","root_filtered_attributes__description":"Permite evitar la publicación de ciertos atributos","root_filtered_attributes__title":"Atributos filtrados","root_log_output__description":"Ubicación de salida del registros, dejalo vacío para eliminar el registro","root_log_output__title":"Salida del registro","root_log_syslog-title":"syslog","serial-title":"Serie"},"touchlink":{"detected_devices_message":"Detectados {{count}} dispositivos touchlink.","rescan":"Buscar de nuevo","scan":"Buscar"},"values":{"clear":"Limpio","closed":"Cerrado","false":"Falso","leaking":"Fuga","not_supported":"No soportado","null":"Nulo","occupied":"Ocupado","open":"Abierto","supported":"Soportado","tampered":"Manipulado","true":"Verdadero"},"zigbee":{"attribute":"Atributo","block_join":"Bloquear para no unirse de nuevo","cluster":"Cluster","description":"Descripción","device_type":"Tipo de dispositivo","endpoint":"Endpoint","firmware_build_date":"Fecha del Firmware","firmware_version":"Versión de Firmware","force_remove":"Forzar la eliminación","friendly_name":"Nombre amigable","ieee_address":"Dirección IEEE","input_clusters":"Clusters entrada","interview_completed":"Entrevista completa","last_seen":"Ultima vez visto","lqi":"LQI","manufacturer":"Fabricante","max_rep_interval":"Intervalo Max de replicación","min_rep_change":"Cambio Min replicación","min_rep_interval":"Intervalo Min de replicación","model":"Modelo","network_address":"Dirección de red","output_clusters":"Clusters de salida","pic":"Foto","power":"Potencia","reconfigure":"Reconfigurar","remove_device":"Eliminar dispositivo","rename_device":"Renombrar dispositivo","select_attribute":"Seleccionar atributo","select_cluster":"Seleccionar cluster","support_status":"Soportado","unsupported":"No soportado","update_Home_assistant_entity_id":"Actualizar el ID de entidad de Home Assistant","zigbee_manufacturer":"Fabricante Zigbee","zigbee_model":"Modelo Zigbee "}}');
;// CONCATENATED MODULE: ./src/i18n/locales/ua.json
const locales_ua_namespaceObject = JSON.parse('{"common":{"action":"Дія","actions":"Дії","apply":"Застосувати","attribute":"Атрибут","bind":"Зв\'язати","check_all":"Відмітити все","clear":"Очистити","close":"Закрити","cluster":"Кластер","clusters":"Кластери","confirmation":"Запит підтвердження","delete":"Видалити","destination":"Ціль","devices":"Прилади","dialog_confirmation_prompt":"Ви впевнені?","disable":"Відключити","enter_search_criteria":"Введіть параметри пошуку","groups":"Групи","loading":"Завантажується...","none":"Ні","ok":"OK","read":"Читати","save":"Зберегти","select_device":"Виберіть прилад","select_endpoint":"Виберіть ціль","source_endpoint":"Початкова кінечна точка","the_only_endpoint":"Єдина ціль","unbind":"Відв\'язати","unknown":"Невідомо","write":"Записати"},"devicePage":{"about":"Про прилад","bind":"Зв\'язок","clusters":"Кластери","dev_console":"Консоль розробника","exposes":"Експонує","reporting":"Звіти","scene":"Сцени","settings":"Налаштування","settings_specific":"Налаштування (особливі)","state":"Стан","unknown_device":"Невідомий прилад"},"exposes":{"action":"Дія","auto_off":"Автовимкнення","away_mode":"Режим відсутності","away_preset_days":"Попередні налаштування днів відсутності","away_preset_temperature":"Попередні налаштування температури відсутності","backlight_mode":"Режим підсвітки","battery":"Заряд батареї","battery_low":"Низький заряд батареї","boost_time":"Час посиленної роботи","brightness":"Яскравість","calibration":"Калібрування","carbon_monoxide":"Чадний газ","co2":"Вуглекислий газ","color_hs":"Колір відтінок/насиченість","color_temp":"Колірна температура","color_temp_startup":"Колірна температура при старті","color_xy":"Колір (XY)","comfort_temperature":"Комфортна температура","consumer_connected":"Споживач підключений","consumer_overload":"Перевантаження споживача","contact":"Контакт","current":"Струм","current_heating_setpoint":"Поточне задане значення опалення","device_temperature":"Температура приладу","eco_temperature":"Економічна температура","effect":"Ефект","empty_exposes_definition":"Немає виставленнь","energy":"Енергія","force":"Примусово","humidity":"Вологість","illuminance":"Освітленість","illuminance_lux":"Освітленість люкс","led_disabled_night":"Нічний режим індикатора","linkquality":"Якість звя\'зку","local_temperature":"Місцева температура","local_temperature_calibration":"Калибрування місцевої температуры","max_temperature":"Макс. температура","min_temperature":"Мін. температура","motion":"Рух","motion_direction":"Напрямок руху","motion_speed":"Швидкість руху","motor_reversal":"Зворотній хід двигуна","moving":"Рух","occupancy":"Присутність","operation_mode":"Режим роботи","options":"Опції","position":"Позиція","power":"Живлення","power_on_behavior":"Поведінка при включені","power_outage_memory":"Пам\'ять після відключення єнергії","preset":"Пресет","presence":"Присутність","pressure":"Тиск","sensivity":"Чутливість","smoke":"Дим","state":"Стан","strength":"Сила","system_mode":"Системний режим","tamper":"Втручання","temperature":"Температура","voltage":"Напруга","water_leak":"Протікання","week":"Тиждень"},"extensions":{"create_new_extension":"Створити нове розширення","extension_name_propmt":"Введіть назву нового розширення","select_extension_to_edit":"Виберіть розширення для редагування"},"featureNames":{"action":"Дія","action_angle":"Кут дії","action_from_side":"Дія зі сторони","action_side":"Сторона дії","action_to_side":"Дія на сторону","alarm":"Тривога","angle_x":"Кут X","angle_y":"Кут Y","angle_z":"Кут Z","away_mode":"Режим від\'їзду","brightness":"Яскравість","calibration_time":"Час калібрування","carbon_monoxide":"Чадний газ","co2":"Вуглекислий газ","color_hs":"Колір Hs","color_temp":"Колірна температура","color_temp_startup":"Початкова колірна температура","color_xy":"Колір Xy","consumer_connected":"Споживач приєднаний","contact":"Контакт","current":"Струм","current_heating_setpoint":"Цільова температура нагріву","current_level_startup":"Встановлений рівень запуску","device_temperature":"Температура приладу","energy":"Енергія","humidity":"Вологість","illuminance":"Освітленість","level_config":"Конфігурація рівня","local_temperature":"Локальна температура","local_temperature_calibration":"Калібрування локальної температури","motor_speed":"Швидкість двигуна","moving":"Рух","occupancy":"Присутність","on_off_transition_time":"Увім./Вимк. час переходу","options":"Опції","position":"Положення","power":"Споживання енергії","preset":"Пресети","pressure":"Тиск","smoke":"Дим","smoke_density":"Густина диму","soil_moisture":"Вологість грунту","state":"Стан","system_mode":"Режим системи","tamper":"Втручання","temperature":"Температура","voltage":"Напруга","water_leak":"Витік води"},"featureDescriptions":{"Auto off after specific time.":"Автоматичне вимкнення протягом певного часу","Away mode":"Режим від\'їзду","Away preset days":"Пресети днів","Away preset temperature":"Пресети температур для режиму від\'їзду","Boost time":"Час прискорення","Brightness of this light":"Яскравість джерела світла","Calibrates the humidity value (absolute offset), takes into effect on next report of device.":"Калібрує значення вологості (абсолютне зміщення), вступає в силу при наступному звіті приладу.","Calibrates the illuminance value (percentual offset), takes into effect on next report of device.":"Калібрує значення освітленності (абсолютне зміщення), вступає в силу при наступному звіті приладу.","Calibrates the illuminance_lux value (percentual offset), takes into effect on next report of device.":"Калібрує значення освітленності в люксах (абсолютне зміщення), вступає в силу при наступному звіті приладу.","Calibrates the pressure value (absolute offset), takes into effect on next report of device.":"Калібрує значення тиску (абсолютне зміщення), вступає в силу при наступному звіті приладу.","Calibrates the temperature value (absolute offset), takes into effect on next report of device.":"Калібрує значення температури (абсолютне зміщення), вступає в силу при наступному звіті приладу.","Calibration time":"Час калібрування","Color of this light expressed as hue/saturation":"Колір джерела світла переводитьсяя в віддтінок/насиченість","Color of this light in the CIE 1931 color space (x/y)":"Колір лампи в кольоровому просторі CIE 1931 (x/y)","Color temperature after cold power on of this light":"Кольорова температура після вимкнення електроенергії","Color temperature of this light":"Кольорова температура джерела світла","Comfort temperature":"Комфортна температура","Controls the behaviour when the device is powered on":"Контролює поведінку при ввімкнені приладу","Current temperature measured on the device":"Поточна температура, виміряна приладом","Direction of movement from the point of view of the radar":"Вказує напрямок руху з точки зору радару","Eco temperature":"Еко температура","Enable/disable auto lock":"Увім./вимк. автоматичне блокування","Enable/disable away mode":"Увім./вимк. режим від\'їзду","Enables/disables physical input on the device":"Увімк./вимк. фізичне введення на приладі","Enables/disables window detection on the device":"Увімк./вимк. виявлення вікон на приладі","Enabling prevents both relais being on at the same time":"Увімкнення запобігає одночасному включенню обох реле","Force the valve position":"Форсувати положення клапана","Indicates if CO (carbon monoxide) is detected":"Виявлення СО (окис вуглецю)","Indicates if the battery of this device is almost empty":"Батарея приладу майже розряджена","Indicates if the contact is closed (= true) or open (= false)":"Стан контакту замкнутий (= true) чи розімкнений (= false)","Indicates whether the device detected a water leak":"Виявлення протікання води","Indicates whether the device detected occupancy":"Виявлення приладом присутності","Indicates whether the device detected presence":"Виявлення приладом присутності","Indicates whether the device detected smoke":"Виявлення приладом диму","Indicates whether the device is tampered":"Втручання в роботу приладу","Instantaneous measured electrical current":"Миттєве значення сили струму","Instantaneous measured power":"Миттєве виміряне значення потужності","Link quality (signal strength)":"Якість зв\'язку (сила сигналу)","Maximum temperature":"Максимальна температура","Measured electrical potential value":"Виміряне значення напруги","Measured illuminance in lux":"Виміряне значення освітленості в люксах","Measured relative humidity":"Виміряне значення вологості","Measured temperature value":"Виміряне значення температури","Minimum temperature":"Мінімальна температура","Mode of this device":"Режим даного приладу","Mode of this device (similar to system_mode)":"Режим даного приладу (подібний до Системного режиму)","Moving inside the range of the sensor":"Виявлення переміщення в межах діапазону датчика","Motor speed":"Швидкість двигуна","Number of digits after decimal point for humidity, takes into effect on next report of device.":"Кількість знаків після коми для вологості, вступає в силу при наступному звіті приладу.","Number of digits after decimal point for illuminance, takes into effect on next report of device.":"Кількість знаків після коми для освітленності, вступає в силу при наступному звіті приладу.","Number of digits after decimal point for illuminance_lux, takes into effect on next report of device.":"Кількість знаків після коми для освітленності в люксах, вступає в силу при наступному звіті приладу.","Number of digits after decimal point for pressure, takes into effect on next report of device.":"Кількість знаків після коми для тиску, вступає в силу при наступному звіті приладу.","Number of digits after decimal point for temperature, takes into effect on next report of device.":"Кількість знаків після коми для температури, вступає в силу при наступному звіті приладу.","Offset to be used in the local_temperature":"Здвиг для локальної температури","On/off state of the switch":"Увім./вимк. положення перемикача","On/off state of this light":"Увім./вимк. джерело освітлення","Position":"Позиція","Position of this cover":"Позиція штори (занавіски)","Presets for sensivity for presence and movement":"Пресети для чутливості присутності та руху","Raw measured illuminance":"Не оброблене виміряне значення освітленності","Recover state after power outage":"Відновити стан після вимкнення живлення","Remaining battery in %":"Залишок батареї у відсотках","Sends a message the last time occupancy was detected. When setting this for example to [10, 60] a `{\\"no_occupancy_since\\": 10}` will be send after 10 seconds and a `{\\"no_occupancy_since\\": 60}` after 60 seconds.":"Надсилає повідомлення, коли востаннє було виявлено присутність. Якщо встановити, наприклад, значення [10, 60], `{\\"no_occupancy_since\\": 10}` буде надіслано через 10 секунд, а `{\\"no_occupancy_since\\": 60}` через 60 секунд.","Sensitivity of the radar":"Чутливість радара","Set to false to disable the legacy integration (highly recommended), will change structure of the published payload (default true).":"Встановіть значення false, щоб вимкнути стару інтеграцію (рекомендовано), це змінить структуру опублікованого корисного навантаження (за замовчуванням true).","Side of the cube":"Сторона куба","Speed of movement":"Швидкість руху","Sum of consumed energy":"Сума витраченої енергії","Temperature setpoint":"Задана температура","The measured atmospheric pressure":"Виміряне значення атмосферного тиску","Time in seconds after which occupancy is cleared after detecting it (default 90 seconds).":"Час у секундах, після якого присутність скидається після її виявлення (за замовчуванням 90 секунд).","Triggered action (e.g. a button click)":"Виклик дії (наприклад натискання кнопки)","Triggers an effect on the light (e.g. make light blink for a few seconds)":"Створює еффект на світло (наприклад, змушує світло блимати протягом децількох хвилин)","Voltage of the battery in millivolts":"Напруга батареї в мілівольтах","Week format user for schedule":"Тижневий формат користувач для планування"},"groups":{"add_to_group":"Додати в групу","create_group":"Створити групу","group_id":"Ідентифікатор групи","group_name":"Назва групи","group_members":"Члени групи","group_scenes":"Групові сцени","new_group_id":"Новий ідентифікатор групи","new_group_id_placeholder":"Вкажіть ідентификатор групи, якщо необхідно","new_group_name":"Назва нової групи","new_group_name_placeholder":"Приклад: my_bedroom_lights","remove_group":"Видалити групу"},"logs":{"empty_logs_message":"Немає інформації для відображення","filter_by_text":"Фільтрувати за текстом","show_only":"Показати тільки"},"map":{"help_coordinator_link_description":" Суцільні лінії - звязок з Координатором","help_end_device_description":" Зелений - Кінцевий пристрій","help_is_coordinator":" - Координатор","help_lqi_description":" Якість звя\'зку в діапазоні 0 - 255 (більше - краще). Значення через дріб позначають декілька типів з\'єднань","help_router_description":" Блакитний - Роутер","help_router_links_description":" Пунктирні лінії - звязок з Роутерами","hide":" Натисніть, щоб приховати цей текст","load":"Завантажити мапу","loading":"В залежності від розміру Вашої мережі, це може тривати від 10 секунд до 2 хвилин."},"navbar":{"all":"Всі","dashboard":"Панель приладів","devices":"Прилади","disable_join":"Заборонити приєднання","extensions":"Розширення","groups":"Групи","logs":"Журнали","map":"Мапа","ota":"OTA","permit_join":"Дозволити приєднання","restart":"Перезавантажити","settings":"Налаштування","toggle_dropdown":"Перемкнути випадаючий список","touchlink":"Touchlink"},"ota":{"check":"Перевірити на наявність нових оновлень","check_all":"Перевірити все","empty_ota_message":"У Вас немає приладів, що підтримують оновлення через повітря (OTA)","remaining_time":"Часу залишилось {{- remaining}}","update":"Оновити прошивку приладу"},"scene":{"add":"Додати","recall":"Викликати","remove":"Видалити","remove_all":"Видалити все","scene_id":"Ідентифікатор сцени","scene_name":"Назва сцени","select_scene":"Вибір сцени","store":"Зберегти"},"settings":{"about":"Про програму","advanced":"Розширені","availability":"Доступність","blocklist":"Список заборон","coordinator_revision":"Версія координатора","coordinator_type":"Тип координатора","donate":"Пожертвувати","donation_text":["Вітаю, %username%! Тут ви можете подякувати нам за нашу виконану роботу","Не соромтесь додати приємні побажання в коментарях ;)"],"download_state":"Завантажити стан","experimental":"Експерементальні","external_converters":"Зовнішні конвертори","frontend":"Інтерфейс","frontend_version":"Версія веб інтерфейсу","main":"Головні","mqtt":"MQTT","ota":"OTA","passlist":"Список дозволів","raw":"Вихідні дані","restart_zigbee2mqtt":"Перезавантажити Zigbee2MQTT","serial":"Serial-порт","settings":"Налаштування","tools":"Інструменти","translate":"Переклад","zigbee2mqtt_version":"Версія Zigbee2MQTT"},"settingsSchemaTranslations":{"advanced-title":"Розширені налаштування","advanced_availability_blacklist__title":"Список заборон доступності (застаріло, використовуйте список доступних_блоків)","advanced_availability_blocklist__description":"Запобігання перевірки наявності приладів","advanced_availability_blocklist__title":"Доступність списку заборон","advanced_availability_passlist__description":"Увімкнути перевірку доступності тільки для певних приладів","advanced_availability_passlist__title":"Доступність списку дозволів","advanced_availability_whitelist__title":"Білий список доступності (застаріло, використовуйте список доступу)","advanced_ext_pan_id__description":"Розширений ідентифікатор панорами Zigbee, зміна вимагає нового приєднання всіх приладів!","advanced_ext_pan_id__title":"Ext Pan ID","advanced_log_output__description":"Вихідне місце журналу, залиште порожнім, щоб вимкнути ведення журналу","advanced_log_output__title":"Виведення журналу","advanced_log_syslog-title":"Системний журнал","blocklist__description":"Блокування приладів із мережі (за допомогою ieeeAddr)","blocklist__title":"Список заборон","experimental-title":"Експериментальні налаштування","external_converters__description":"Ви можете визначити зовнішні конвертори, наприклад додайте підтримку приладу DiY","external_converters__title":"Зовнішні конвертори","frontend-title":"WEB-Інтерфейс","mqtt-title":"MQTT налаштування","ota-title":"OTA. Оновлення через повітря","passlist__description":"Дозволити тільки певним приладам підключатися до мережі (за допомогою ieeeAddr). Зверніть увагу, що всі прилади, які не є у списку доступу, будуть вилучені з мережі!","passlist__title":"Список дозволів","root__description":"Дозволяти під\'єднуватись до мережі тільки визначеним приладам (перевірка по ieeeAddr). Зверніть увагу, що всі прилади, не включені в список, будуть видалені з мережі!","root_availability_blacklist__title":"Список заборон перевірки доступності (застаріло, використовуйте availability_blocklist)","root_availability_blocklist__description":"Вилучити прилад із списку заборон перевірки на доступність","root_availability_blocklist__title":"Список заборон перевірки доступності","root_availability_passlist__description":"Ввімкнути перевірку доступності тільки для визначених приладів","root_availability_passlist__title":"Список дозволів перевірки доступності","root_availability_whitelist__title":"Список дозволів перевірки доступності (застаріло, використовуйте passlist)","root_debounce_ignore__description":"Дозволяє публікувати вказані атрибути без використання затримки фільтрації пакетів, що повторюються","root_debounce_ignore__title":"Ігнорувати фільтр пакетів, що повторюються","root_ext_pan_id__description":"Розширений ідентифікатор мережі Zigbee. Зміни вимагають повторного підключення всіх приладів!","root_ext_pan_id__title":"Розш. ідентифікатор мережі (Ext Pan ID)","root_filtered_attributes__description":"Дозволяє відключити публікацію вказаних атрибутів","root_filtered_attributes__title":"Фільтр атрибутів","root_filtered_optimistic__description":"Фільтрувати атрибути з оптимістичного корисного навантаження для публікації під час виклику /встановлення. (Це не впливає, якщо для параметра optimistic встановлено значення false).","root_filtered_optimistic__title":"Відфільтровані оптимістичні атрибути","root_log_output__description":"Папка, в якій будуть формуватися файли журналів. Залиште поле пустим для відключення файлів журналів.","root_log_output__title":"Папка для журналів","root_log_syslog-title":"Системний журнал","root-title":"Serial","root__title":"Passlist","serial-title":"Послідовний інтерфейс"},"touchlink":{"detected_devices_message":"Знайдено прилад, що підтримує швидке приєднання (touchlink): {{count}}.","rescan":"Повторити пошук","scan":"Пошук"},"values":{"clear":"не виявлено","closed":"закрито","empty_string":"порожній рядок","false":"ні","leaking":"витік","not_supported":"не підтримується","null":"нуль","occupied":"виявлено","open":"відкрито","supported":"підтримується","tampered":"зламано","true":"так"},"zigbee":{"actions":"Дії","attribute":"Атрибут","battery":"Батарея","block_join":"Блокувати подальші спроби приєднання","cluster":"Кластер","dc_source":"Джерело постійного струму","description":"Опис","device":"Прилад","device_type":"Тип приладу","endpoint":"Кінцева точка","firmware_build_date":"Дата створення прошивки","firmware_version":"Версія прошивки","force_remove":"Видалити примусово","friendly_name":"Дружня назва","ieee_address":"Адреса IEEE","input_clusters":"Кластери вводу","interview_completed":"Запит інформації про прилад закінчено","interview_failed":"Невдалий запит інформації про прилад","interviewing":"Запит інформації...","last_seen":"Останні дані","lqi":"LQI","mains_single_phase":"Мережа (однофазна)","manufacturer":"Виробник","max_rep_interval":"Макс.інт-л.звітів","min_rep_change":"Мін.інт-л.змін","min_rep_interval":"Мін.інт-л.звітів","model":"Модель","network_address":"Мережева адреса","none":"Нічого","output_clusters":"Кластери виводу","pic":"Мал.","power":"Живлення","power_level":"Рівень заряду","reconfigure":"Переналаштувати","remove_device":"Видалити прилад","rename_device":"Змінити назву приладу","select_attribute":"Виберіть атрибут","select_cluster":"Виберіть кластер","support_status":"Статус підтримки","unsupported":"Не підтримується","updating_firmware":"Прошивка оновлюється","update_Home_assistant_entity_id":"Оновити ідентифікатор об\'єкту Home Assistant","zigbee_manufacturer":"Виробник Zigbee","zigbee_model":"Модель Zigbee"}}');
;// CONCATENATED MODULE: ./src/i18n/locales/chs.json
const chs_namespaceObject = JSON.parse('{"common":{"action":"动作","actions":"动作","apply":"应用","attribute":"属性","bind":"绑定","check_all":"检查所有","clear":"清除","close":"关闭","cluster":"集群","clusters":"集群","confirmation":"确认","delete":"删除","destination":"目的地","devices":"设备","dialog_confirmation_prompt":"是否确定？","disable":"禁用","enter_search_criteria":"输入搜索条件","groups":"群组","loading":"加载中","none":"无","ok":"好","read":"读取","save":"保存","select_device":"选择设备","select_endpoint":"选择端点","source_endpoint":"源端点","the_only_endpoint":"唯一端点","unbind":"解绑","write":"写入"},"devicePage":{"about":"关于","bind":"绑定","clusters":"集群","dev_console":"开发控制台","exposes":"暴露","reporting":"报告","settings":"设置","settings_specific":"设置（具体）","state":"状态","unknown_device":"未知设备"},"exposes":{"action":"动作","auto_off":"自动关闭","away_mode":"离开模式","away_preset_days":"Away preset days","away_preset_temperature":"Away preset temperature","backlight_mode":"背光模式","battery":"电量","battery_low":"低电量","boost_time":"Boost time","brightness":"亮度","calibration":"校准","carbon_monoxide":"一氧化碳","color_hs":"颜色（HS）","color_temp":"色温","color_temp_startup":"启动色温","color_xy":"颜色（XY）","comfort_temperature":"舒适温度","consumer_connected":"Consumer connected","consumer_overload":"Consumer overload","contact":"Contact","current":"Current","current_heating_setpoint":"Current heating setpoint","eco_temperature":"环保温度","effect":"效果","empty_exposes_definition":"空暴露定义","energy":"能源","force":"强制","humidity":"湿度","illuminance":"光照度","illuminance_lux":"光照度","led_disabled_night":"Led disabled night","linkquality":"链接质量","local_temperature":"本地温度","local_temperature_calibration":"本地温度校准","max_temperature":"最高温度","min_temperature":"最低温度","motor_reversal":"电机反转","moving":"移动","occupancy":"Occupancy","operation_mode":"操作模式","options":"设置","position":"位置","power":"Power","power_on_behavior":"Power on behavior","power_outage_memory":"Power outage memory","preset":"预设","pressure":"气压","sensivity":"敏感度","smoke":"烟雾","state":"状态","strength":"强度","system_mode":"系统模式","tamper":"Tamper","temperature":"温度","voltage":"电压","water_leak":"漏水","week":"周"},"extensions":{"create_new_extension":"创建新扩展","extension_name_propmt":"输入新扩展的名称","select_extension_to_edit":"选择扩展以编辑"},"featureNames":{"action":"动作","angle_x":"角度 X","angle_y":"角度 Y","angle_z":"角度 Z","brightness":"亮度","color_temp":"色温","color_xy":"颜色（XY）","contact":"Contact","humidity":"湿度","illuminance":"光照度","occupancy":"Occupancy","pressure":"气压","soil_moisture":"土壤湿度","state":"状态","temperature":"温度","tamper":"Tamper"},"groups":{"add_to_group":"添加到群组","create_group":"创建群组","new_group_id":"新群组 ID","new_group_id_placeholder":"如有必要，指定群组 ID","new_group_name":"新群组名","new_group_name_placeholder":"例子：我的卧室灯","remove_group":"移除群组"},"logs":{"empty_logs_message":"空日志","filter_by_text":"按文本过滤","show_only":"仅显示"},"map":{"help_coordinator_link_description":"实线表示连接到协调节点","help_end_device_description":"绿色代表终端设备节点","help_is_coordinator":"是协调节点","help_lqi_description":"链接质量在0-255之间（越高越好），具有/代表多种类型的链接的值","help_router_description":"蓝色代表路由节点","help_router_links_description":"虚线表示连接到路由节点","hide":"点我隐藏","load":"加载网络状态图","loading":"根据您的网络规模，这可能需要10秒到2分钟的时间。"},"navbar":{"all":"所有","dashboard":"仪表盘","devices":"设备","disable_join":"禁用添加新设备","extensions":"扩展","groups":"群组","logs":"日志","map":"网络状态图","ota":"OTA","permit_join":"允许添加新设备","restart":"重启","settings":"设置","toggle_dropdown":"切换下拉菜单","touchlink":"Touchlink"},"ota":{"check":"检查新的更新","check_all":"检查所有","empty_ota_message":"你没有支持 OTA 的设备","remaining_time":"剩余时间 {{- remaining}}","update":"更新设备固件"},"settings":{"about":"关于","advanced":"高级","blocklist":"阻止名单","coordinator_revision":"协调节点调整","coordinator_type":"协调节点类型","donate":"捐赠","donation_text":["你好, %username%, 在这里你可以感谢我们的辛勤工作","可以大方的夸赞我们 ;)"],"download_state":"下载状态","experimental":"实验性","external_converters":"外部转换器","frontend":"前端","frontend_version":"前端版本","main":"Main","mqtt":"MQTT","ota":"OTA 更新","passlist":"通过列表","raw":"RAW","restart_zigbee2mqtt":"重启 Zigbee2MQTT","serial":"串行","settings":"设置","tools":"工具","zigbee2mqtt_version":"Zigbee2MQTT 版本","translate":"翻译"},"settingsSchemaTranslations":{"advanced-title":"高级","advanced_availability_blacklist__title":"可用性黑名单 (已弃用, 请使用 availability_blocklist)","advanced_availability_blocklist__description":"阻止设备被检查是否可用","advanced_availability_blocklist__title":"可用性阻止名单","advanced_availability_passlist__description":"只对某些设备启用可用性检查","advanced_availability_passlist__title":"可用性通过名单","advanced_availability_whitelist__title":"可用性白名单 (已弃用, 请使用 passlist)","advanced_ext_pan_id__description":"Zigbee extended pan ID, 变更需要重新配对所有设备！","advanced_ext_pan_id__title":"Ext Pan ID","advanced_log_output__description":"日志的输出位置，留空表示不记录日志","advanced_log_output__title":"日志输出","advanced_log_syslog-title":"系统日志","blocklist__description":"从网络中阻断设备（通过 ieeeAddr）","blocklist__title":"阻止名单","experimental-title":"实验性","external_converters__description":"你可以定义外部转换器，例如增加对DIY设备的支持。","external_converters__title":"外部转换器","frontend-title":"前端","mqtt-title":"MQTT","ota-title":"OTA 更新","passlist__description":"只允许某些设备加入网络（通过ieeeAddr）。 请注意，所有不在通过名单中的设备都将从网络中移除！","passlist__title":"通过名单","root__description":"只允许某些设备加入网络（通过ieeeAddr）。 请注意，所有不在通过名单中的设备都将从网络中移除！","root_availability_blacklist__title":"可用性黑名单 (已弃用, 请使用 availability_blocklist)","root_availability_blocklist__description":"阻止设备被检查是否可用","root_availability_blocklist__title":"可用性阻止名单","root_availability_passlist__description":"只对某些设备启用可用性检查","root_availability_passlist__title":"可用性通过名单","root_availability_whitelist__title":"可用性白名单 (已弃用, 请使用 passlist)","root_debounce_ignore__description":"保护指定 payload 属性的唯一有效 payload values 在去抖动时间内不被覆盖","root_debounce_ignore__title":"忽略去抖动","root_ext_pan_id__description":"Zigbee extended pan ID, 变更需要重新配对所有设备！","root_ext_pan_id__title":"Ext Pan ID","root_filtered_attributes__description":"允许阻止某些属性被发布","root_filtered_attributes__title":"筛选的属性","root_filtered_optimistic__description":"Filter attributes from optimistic publish payload when calling /set. (This has no effect if optimistic is set to false).","root_filtered_optimistic__title":"筛选的 optimistic 属性","root_log_output__description":"日志的输出位置，留空表示不记录日志","root_log_output__title":"日志输出","root_log_syslog-title":"系统日志","serial-title":"串行"},"touchlink":{"detected_devices_message":"检测到 {{count}} touchlink 设备.","rescan":"再次扫描","scan":"扫描"},"values":{"clear":"Clear","closed":"关闭","false":"False","not_supported":"不支持","occupied":"Occupied","open":"开启","supported":"支持","true":"True","empty_string":"Empty string(\\"\\")","leaking":"泄露","tampered":"Tampered"},"zigbee":{"actions":"动作","attribute":"属性","block_join":"阻止再次加入","cluster":"集群","description":"描述","device_type":"设备类型","endpoint":"端点","firmware_build_date":"固件构建日期","firmware_version":"固件版本","force_remove":"强制删除","friendly_name":"昵称","ieee_address":"IEEE 地址","input_clusters":"输入集群","interview_completed":"配对成功","last_seen":"最后可见","lqi":"LQI","manufacturer":"制造商","max_rep_interval":"最大重复间隔","min_rep_change":"Min rep change","min_rep_interval":"最小重复间隔","model":"型号","network_address":"网络地址","none":"无","output_clusters":"输出集群","pic":"图片","power":"Power","reconfigure":"重新配置","remove_device":"移除设备","rename_device":"重命名设备","select_attribute":"选择属性","select_cluster":"选择集群","support_status":"受支持状态","unsupported":"不支持","update_Home_assistant_entity_id":"更新 Home Assistant 实体 ID","zigbee_manufacturer":"Zigbee 制造商","zigbee_model":"Zigbee 型号"}}');
;// CONCATENATED MODULE: ./src/i18n/locales/nl.json
const locales_nl_namespaceObject = JSON.parse('{"common":{"action":"Actie","actions":"Acties","apply":"Toepassen","attribute":"Attribuut","bind":"Koppelen","check_all":"Alles controleren","clear":"Wissen","close":"Sluiten","cluster":"Cluster","clusters":"Clusters","confirmation":"Bevestigingsvenster","delete":"Verwijder","destination":"Doel","devices":"Apparaten","dialog_confirmation_prompt":"Weet je het zeker?","disable":"Uitschakelen","enter_search_criteria":"Voor zoekopdracht in","groups":"Groepen","loading":"Laden...","none":"Geen","ok":"Ok","read":"Lezen","save":"Opslaan","select_device":"Selecteer apparaat","select_endpoint":"Selecteer eindpunt","source_endpoint":"Source eindpunt","the_only_endpoint":"Het enige eindpunt","unbind":"Ontkoppelen","write":"Schrijven"},"devicePage":{"about":"Over","bind":"Koppelen","clusters":"Clusters","dev_console":"Ontwikkelaarsconsole","exposes":"Tonen","reporting":"Rapportage","settings":"Instellingen","settings_specific":"Instellingen (specifiek)","state":"Status","unknown_device":"Onbekend apparaat","scene":"Scene"},"scene":{"scene_id":"Scene-ID","store":"Opslaan","recall":"Herstellen","remove":"Verwijder","remove_all":"Verwijder alle","scene_name":"Scene naam","select_scene":"Selecteer scene"},"exposes":{"action":"Actie","auto_off":"Automatisch uit","away_mode":"Afwezigheidsmodus","away_preset_days":"Vooraf ingestelde dagen afwezig","away_preset_temperature":"Vooraf ingestelde temperatuur","backlight_mode":"Achtergrondmodus","battery":"Batterij","battery_low":"Battery laag","boost_time":"Boost tijd","brightness":"Helderheid","calibration":"Kalibratie","carbon_monoxide":"Koolstofmonoxide","color_hs":"Kleur (HS)","color_temp":"Kleurtemperatuur","color_temp_startup":"Opstartkleur temperatuur","color_xy":"Kleur (XY)","comfort_temperature":"Comfort temperatuur","consumer_connected":"Client verbonden","consumer_overload":"Client overbelast","contact":"Contact","current":"Huidig","current_heating_setpoint":"Huidig verwarmingsinstelpunt","eco_temperature":"Eco temperatuur","effect":"Effect","empty_exposes_definition":"Empty exposes definition","energy":"Energie","force":"Forceer","humidity":"Luchtvochtigheid","illuminance":"Lichtsterkte","illuminance_lux":"Lichtsterkte","led_disabled_night":"Led \'s nachts uitgeschakeld","linkquality":"Verbindingskwaliteit","local_temperature":"Lokale temperatuur","local_temperature_calibration":"Lokale temperatuurkalibratie","max_temperature":"Max temperatuur","min_temperature":"Min temperatuur","motor_reversal":"Motor omgekeerd","moving":"Verplaatsing","occupancy":"Detectie","operation_mode":"Werkingsmodus","options":"Opties","position":"Positie","power":"Stroom","power_on_behavior":"Opstartgedrag","power_outage_memory":"Geheugen stroomuitval","preset":"Vooraf ingesteld","pressure":"Druk","sensivity":"Gevoeligheid","smoke":"Rook","state":"Staat","strength":"Sterkte","system_mode":"Systeemmodus","tamper":"Sabotage","temperature":"Temperatuur","voltage":"Voltage","water_leak":"Waterlekkage","week":"Week"},"extensions":{"create_new_extension":"Nieuwe extensie aanmaken","extension_name_propmt":"Voer nieuwe extensienaam in","select_extension_to_edit":"Selecteer extensie om te bewerken"},"featureNames":{"action":"Actie","angle_x":"Hoek X","angle_y":"Hoek Y","angle_z":"Hoek Z","brightness":"Helderheid","co2":"CO2","color_temp":"Kleurtemperatuur","color_xy":"Kleur XY","contact":"Contact","device_temperature":"Apparaat temperatuur","energy":"Energie","humidity":"Luchtvochtigheid","illuminance":"Lichtsterkte","local_temperature_calibration":"Lokale temperatuurkalibratie","local_temperature":"Lokale temperatuur","occupancy":"Detectie","operation_mode":"Operatie modus","pi_heating_demand":"PI warmtevraag","power":"Stroom","pressure":"Druk","soil_moisture":"Bodemvochtigheid","state":"Status","system_mode":"Systeemmodus","temperature":"Temperatuur","tamper":"Sabotage"},"groups":{"add_to_group":"Toevoegen aan groep","create_group":"Groep aanmaken","group_id":"Groep-id","group_members":"Groepsleden","group_name":"Groep naam","group_scenes":"Groep scenes","new_group_id":"Nieuw groep-ID","new_group_id_placeholder":"Geef indien nodig het groep-ID op","new_group_name":"Nieuwe groepsnaam","new_group_name_placeholder":"voorbeeld: mijn_slaapkamer_lampen","remove_group":"Verwijderen groep"},"logs":{"empty_logs_message":"Niets om weer te geven","filter_by_text":"Filteren op tekst","show_only":"Alleen tonen"},"map":{"help_coordinator_link_description":"Ononderbroken lijnen zijn koppelingen naar de Coordinator","help_end_device_description":"Groen betekend eindpunt","help_is_coordinator":"is coordinator","help_lqi_description":"Verbindingskwaliteit is tussen 0 - 255 (hoger is beter); waarden tussen / vertegenwoordigen meerdere verbindingstypes","help_router_description":"Blauw betekend Router","help_router_links_description":"Gestreepte lijnen zijn verbindingen met Routes","hide":"Verbergen","load":"Kaart laden","loading":"Afhankelijk van de grootte van het netwerk kan deze actie tussen de 10 seconden en 2 minuten duren."},"navbar":{"all":"Alles","dashboard":"Dashboard","devices":"Apparaten","disable_join":"Aanmelden uitschakelen","extensions":"Extensies","groups":"Groepen","logs":"Log","map":"Kaart","ota":"OTA","permit_join":"Aanmelden toestaan","restart":"Herstart","settings":"Instellingen","toggle_dropdown":"Schakel menu","touchlink":"Touchlink"},"ota":{"check":"Controleer op updates","check_all":"Controleer alles","empty_ota_message":"Je hebt geen apparaten welke OTA ondersteunen","remaining_time":"Resterende tijd {{- remaining}}","update":"Firmware apparaat bijwerken"},"settings":{"about":"Over","advanced":"Geavanceerd","availability":"Beschikbaarheid","blocklist":"Blokkeerlijst","coordinator_revision":"Coordinator revisie","coordinator_type":"Coordinator type","donate":"Doneren","donation_text":["Hallo %username%! Hier kan je ons bedanken voor het harde werk","Zeg gerust ook iets leuks ;)"],"download_state":"Downloadstatus","experimental":"Experimenteel","external_converters":"Externe converters","frontend":"Frontend","frontend_version":"Versie frontend","main":"Hoofd","mqtt":"MQTT","ota":"OTA updates","passlist":"Toegangslijst","raw":"Ruw","restart_zigbee2mqtt":"Herstart Zigbee2MQTT","serial":"Serieel","settings":"Instellingen","tools":"Hulpmiddelen","zigbee2mqtt_version":"Zigbee2MQTT versie","translate":"Vertalen"},"settingsSchemaTranslations":{"advanced-title":"Geavanceerd","advanced_availability_blacklist__title":"Zwarte lijst bereikbaarheid (uitgefaseerd, gebruik availability_blocklist)","advanced_availability_blocklist__description":"Voorkom controle of apparaat te bereiken is","advanced_availability_blocklist__title":"Blokkeerlijst beschikbaarheid","advanced_availability_passlist__description":"Sta enkel het controleren van beschikbaarheid toe op bepaalde apparaten","advanced_availability_passlist__title":"Toegangslijst beschikbaarheid","advanced_availability_whitelist__title":"Witte lijst bereikbaarheid (uitgefaseerd, gebruik passlist)","advanced_ext_pan_id__description":"Zigbee uitgebreid pan ID; indien aangepast dienen apparaten opnieuw gekoppeld te worden!","advanced_ext_pan_id__title":"Ext Pan ID","advanced_log_output__description":"Locatie van het logbestand. Laat deze leeg om logs te negeren","advanced_log_output__title":"Logbestand","advanced_log_syslog-title":"Syslog","blocklist__description":"Blokkeer apparaten van dit netwerk (op basis van ieeeAddr)","blocklist__title":"Blokkeerlijst","experimental-title":"Experimenteel","external_converters__description":"Je kan externe converters definiëren, bijv. voor het toevoegen van ondersteuning voor DiY apparaten","external_converters__title":"Externe converters","frontend-title":"Frontend","mqtt-title":"MQTT","ota-title":"OTA updates","passlist__description":"Laat enkel bepaalde apparaten toe op het netwerk (op ieeeAddr). Alle apparaten die niet op de toegangslijst staan worden verwijderd van het netwerk!","passlist__title":"Toegangslijst","root__description":"Laat enkel bepaalde apparaten toe op het netwerk (op ieeeAddr). Alle apparaten die niet op de toegangslijst staan worden verwijderd van het netwerk!","root_availability_blacklist__title":"Zwarte lijst bereikbaarheid (uitgefaseerd, gebruik availability_blocklist)","root_availability_blocklist__description":"Voorkom controle of apparaat te bereiken is","root_availability_blocklist__title":"Blokkeerlijst beschikbaarheid","root_availability_passlist__description":"Sta enkel het controleren van beschikbaarheid toe op bepaalde apparaten","root_availability_passlist__title":"Toegangslijst beschikbaarheid","root_availability_whitelist__title":"Witte lijst bereikbaarheid (uitgefaseerd, gebruik passlist)","root_debounce_ignore__description":"Beschermd unieke bronwaarde van specifieke bron op overschrijving binnen dempingstijd","root_debounce_ignore__title":"Negeer dempingstijd","root_ext_pan_id__description":"Zigbee uitgebreid pan ID, indien aangepast dienen apparaten opnieuw gekoppeld te worden!","root_ext_pan_id__title":"Ext Pan ID","root_filtered_attributes__description":"Zorgt er voor dat bepaalde attributen niet gepubliceerd worden","root_filtered_attributes__title":"Gefilterde attributen","root_filtered_optimistic__description":"Gefilterde attributen van optimistisch gepubliseerde waarden bij het aanroepen van /set. (Dit heeft geen effect indien optimistic niet geactiveerd is).","root_filtered_optimistic__title":"Gefilterde optimistische attributen","root_log_output__description":"Locatie van het logbestand. Laat deze leeg om logs te negeren","root_log_output__title":"Logbestand","root_log_syslog-title":"Syslog","serial-title":"Serieel"},"touchlink":{"detected_devices_message":"{{count}} touchlink apparaten gedetecteerd.","rescan":"Opnieuw zoeken","scan":"Zoeken"},"values":{"clear":"Geen","closed":"Gesloten","false":"Onwaar","not_supported":"Niet ondersteund","occupied":"Beweging","open":"Open","supported":"Ondersteund","true":"Waar","empty_string":"Lege waarde(\\"\\")","leaking":"Lekkage","tampered":"Gesaboteerd"},"zigbee":{"actions":"Acties","attribute":"Attributen","battery":"Batterij","block_join":"Blokkeer opnieuw aanmelden","cluster":"Cluster","dc_source":"DC-bron","description":"Omschrijving","device_type":"Apparaat type","endpoint":"Eindpunt","firmware_build_date":"Firmware build date","firmware_version":"Firmwareversie","force_remove":"Geforceerd verwijderen","friendly_name":"Eenvoudige naam","ieee_address":"IEEE adres","input_clusters":"Invoercluster","interview_completed":"Interview voltooid","interview_failed":"Interview mislukt","interviewing":"Interviewen","last_seen":"Laatst gezien","lqi":"LQI","mains_single_phase":"Netstroom (1-fase)","manufacturer":"Fabrikant","max_rep_interval":"max rep interval","min_rep_change":"Min rep change","min_rep_interval":"Min rep interval","model":"Model","network_address":"Netwerkadres","none":"Geen","output_clusters":"Uitvoercluster","pic":"Pic","power":"Sterkte","power_level":"stroomniveau","reconfigure":"Herconfigureren","remove_device":"Verwijder apparaat","rename_device":"Hernoem apparaat","select_attribute":"Selecteer attribuut","select_cluster":"Selecteer cluster","support_status":"Ondersteuningsstatus","unsupported":"Niet ondersteund","update_Home_assistant_entity_id":"Home Assistant entiteit-ID bijwerken","updating_firmware":"Firmware updaten","zigbee_manufacturer":"Zigbee Fabrikant","zigbee_model":"Zigbee Model"},"featureDescriptions":{"Indicates whether the device detected occupancy":"Geeft aan of het apparaat bezetting heeft gedetecteerd","Indicates if the battery of this device is almost empty":"Geeft aan of de batterij van dit apparaat bijna leeg is","Indicates whether the device is tampered":"Geeft aan of er met het apparaat is geknoeid","Remaining battery in %":"Resterende batterij in %","Brightness of this light":"Helderheid of dit licht","Color of this light expressed as hue/saturation":"Kleur van dit licht uitgedrukt als tint/verzadiging","Color of this light in the CIE 1931 color space (x/y)":"Kleur van dit licht in de CIE 1931 kleurruimte (x/y)","Color temperature of this light":"Kleurtemperatuur van dit licht","Decoupled mode for right button":"Ontkoppelde modus voor rechterknop","Indicates if the contact is closed (= true) or open (= false)":"Geeft aan of het contact gesloten (= true) of open (= false) is","Link quality (signal strength)":"Kwaliteit van de verbinding (signaalsterkte)","Measured illuminance in lux":"Gemeten verlichtingssterkte in lux","Measured relative humidity":"Gemeten relatieve vochtigheid","Measured soil moisture value":"Gemeten bodemvochtwaarde","Measured temperature value":"Gemeten temperatuurwaarde","On/off state of the switch":"Aan/uit state van de schakelaar","On/off state of this light":"Aan/uit status van dit licht","Operation mode, select \\"command\\" to enable bindings":"Operatie modus, selecteer \\"commando\\" om bindingen in te schakelen","Raw measured illuminance":"Ruwe gemeten verlichtingssterkte","The measured atmospheric pressure":"De gemeten atmosferische druk","Triggered action (e.g. a button click)":"Geactiveerde actie (bijv. een druk op een knop)","Triggers an effect on the light (e.g. make light blink for a few seconds)":"Activeert een effect op het licht (bijv. licht een paar seconden laten knipperen)"}}');
;// CONCATENATED MODULE: ./src/i18n/locales/it.json
const locales_it_namespaceObject = JSON.parse('{"common":{"action":"Azione","actions":"Azioni","apply":"Applica","attribute":"Attributo","bind":"Associa","check_all":"Verifica tutto","clear":"Pulisci","close":"Chiudi","cluster":"Cluster","clusters":"Cluster","confirmation":"Conferma","delete":"Elimina","destination":"Destinazione","devices":"Dispositivi","dialog_confirmation_prompt":"Sei sicuro?","disable":"Disabilita","enter_search_criteria":"Inserisci un criterio di ricerca","groups":"Gruppi","loading":"Caricamento...","none":"Nessuno","ok":"Ok","read":"Leggi","save":"Salva","select_device":"Selezione dispositivo","select_endpoint":"Seleziona endpoint","source_endpoint":"Sorgente endpoint","the_only_endpoint":"Unico endpoint","unbind":"Dissocia","write":"Scrivi"},"devicePage":{"about":"Info","bind":"Associa","clusters":"Clusters","dev_console":"Console developer","exposes":"Exposes","reporting":"Reporting","settings":"Impostazioni","settings_specific":"Impostazioni specifiche","state":"Stato","unknown_device":"Dispositivo sconosciuto"},"exposes":{"action":"Azione","auto_off":"Spegnimento automatico","away_mode":"Modalità fuori casa","away_preset_days":"Giorni prestabiliti modalità fuori casa","away_preset_temperature":"Preset temperatura modalità fuori casa","backlight_mode":"Modalità retroilluminazione","battery":"Batteri","battery_low":"Batteria bassa","boost_time":"Tempo di boost","brightness":"Luminosità","calibration":"Calibrazione","carbon_monoxide":"Monossido di carbonio","color_hs":"Colore (HS)","color_temp":"Temperatura colore","color_temp_startup":"Temperatura colore all\'avvio","color_xy":"Colore (XY)","comfort_temperature":"Temperatura comfort","consumer_connected":"Carico connesso","consumer_overload":"Sovraccarico","contact":"Contatto","current":"Corrente","current_heating_setpoint":"Setpoint corrente riscaldamento","eco_temperature":"Temperatura Eco","effect":"Effetto","empty_exposes_definition":"Svuota definizioni esposte","energy":"Energia","force":"Forza","humidity":"Umidità","illuminance":"Luminosità","illuminance_lux":"Lux luminosità","led_disabled_night":"Led notturno disabilitato","linkquality":"Qualità connessione","local_temperature":"Temperatura locale","local_temperature_calibration":"Calibrazione temperatura locale","max_temperature":"Temperatura max","min_temperature":"Temperatura min","motor_reversal":"Inversione del motore","moving":"In movimento","occupancy":"Occupazione","operation_mode":"Modalità operativa","options":"Opzioni","position":"Positione","power":"Alimentazione","power_on_behavior":"Comportamento di accensione","power_outage_memory":"Memoria per interruzione di corrente","preset":"Preset","pressure":"Pressione","sensivity":"Sensibilità","smoke":"Fumo","state":"State","strength":"Forza","system_mode":"Modalità di sistema","tamper":"Tamper","temperature":"Temperatura","voltage":"Tensione","water_leak":"Perdita acqua","week":"Settimana"},"extensions":{"create_new_extension":"Crea nuova estensione","extension_name_propmt":"Inserisci nome estensione","select_extension_to_edit":"Seleziona estensione da modificare"},"featureNames":{"action":"Azione","angle_x":"Angolo X","angle_y":"Angolo Y","angle_z":"Angolo Z","brightness":"Luminosità","color_temp":"Temperatura colore","color_xy":"Colore Xy","contact":"Contatto","humidity":"Umidità","illuminance":"Luminosità","occupancy":"Occupazione","pressure":"Pressione","soil_moisture":"Umidità del suolo","state":"Stato","temperature":"Temperatura","tamper":"Manomesso","power_alarm_active":"Allarme potenza attivo"},"groups":{"add_to_group":"Aggiungi a gruppo","create_group":"Crea gruppo","new_group_id":"Nuovo id gruppo","new_group_id_placeholder":"Specica id gruppo se necessario","new_group_name":"Nuovo nome gruppo","new_group_name_placeholder":"esempio:: luci_camera_da_letto","remove_group":"Rimuovi gruppo"},"logs":{"empty_logs_message":"Niente da visualizzare","filter_by_text":"Filtra per testo","show_only":"Mostra solo"},"map":{"help_coordinator_link_description":"Linee continue sono link verso il Coordinator","help_end_device_description":"Verde identifica un End Device","help_is_coordinator":"è il Coordinator","help_lqi_description":"La qualità di connessione è tra 0 - 255 (più alta è meglio), valori con / rappresentano tipi di link multipli","help_router_description":"Blu identifica un Router","help_router_links_description":"Linee tratteggiate sono link verso i Routers","hide":"Clicca per nascondere","load":"Carica mappa","loading":"In base alla dimensione della tua rete questa operazione può richiedere tra i 10 secondi e i 2 minuti."},"navbar":{"all":"Tutto","dashboard":"Cruscotto","devices":"Dispositivi","disable_join":"Disabilita join","extensions":"Estensioni","groups":"Gruppi","logs":"Log","map":"Mappa","ota":"OTA","permit_join":"Permetti join","restart":"Riavvia","settings":"Impostazioni","toggle_dropdown":"Attiva/disattiva menu a discesa","touchlink":"Touchlink"},"ota":{"check":"Verifica nuovi aggiornamenti","check_all":"Verifica tutti i dispositivi","empty_ota_message":"Non hai dispositivi in grado di supportare aggiornamenti OTA","remaining_time":"Tempo rimanente {{- remaining}}","update":"Aggiorna firmware del device"},"settings":{"about":"Info","advanced":"Avanzate","blocklist":"Blocklist","coordinator_revision":"Revisione Coordinator","coordinator_type":"Tipo Coordinator","donate":"Donazioni","donation_text":["Ciao, %username% , qui puoi ringraziarci per il duro lavoro","Non esitare a dire anche qualcosa di carino ;)"],"download_state":"Download backup","experimental":"Sperimentale","external_converters":"Convertitori esterni","frontend":"Frontend","frontend_version":"Versione frontend","main":"Principale","mqtt":"MQTT","ota":"Aggiornamenti OTA","passlist":"Passlist","raw":"Raw","restart_zigbee2mqtt":"Riavvia Zigbee2MQTT","serial":"Seriale","settings":"Impostazioni","tools":"Strumenti","zigbee2mqtt_version":"Versione Zigbee2MQTT","translate":"Traduci"},"settingsSchemaTranslations":{"advanced-title":"Avanzate","advanced_availability_blacklist__title":"Blacklist disponibilità (obsoleto, utilizza Blocklist)","advanced_availability_blocklist__description":"Impedisci la verifica della disponibilità dei dispositivi","advanced_availability_blocklist__title":"Blocklist disponibilità","advanced_availability_passlist__description":"Abilita il controllo della disponibilità solo per alcuni dispositivi","advanced_availability_passlist__title":"Passlist disponibilità","advanced_availability_whitelist__title":"Whitelist disponibilità (obsoleto, usa Passlist)","advanced_ext_pan_id__description":"Zigbee Extended Pan ID, la modifica richiede il repairing di tutti i dispositivi!","advanced_ext_pan_id__title":"Ext Pan ID","advanced_log_output__description":"Posizione di output del registro, lasciare vuoto per fermare la registrazione","advanced_log_output__title":"Output log","advanced_log_syslog-title":"Syslog","blocklist__description":"Blocca i dispositivi dalla rete (tramite ieeeAddr)","blocklist__title":"Blocklist","experimental-title":"Sperimentale","external_converters__description":"È possibile definire convertitori esterni ad es. aggiungi il supporto per un dispositivo fai-da-te","external_converters__title":"Convertitori esterni","frontend-title":"Frontend","mqtt-title":"MQTT","ota-title":"Aggiornamenti OTA","passlist__description":"Consenti solo a determinati dispositivi di unirsi alla rete (tramite ieeeAddr). Tieni presente che tutti i dispositivi non presenti nella lista di accesso verranno rimossi dalla rete!","passlist__title":"Passlist","root__description":"Consenti solo a determinati dispositivi di unirsi alla rete (tramite ieeeAddr). Tieni presente che tutti i dispositivi non presenti nella lista di accesso verranno rimossi dalla rete!","root_availability_blacklist__title":"Blacklist disponibilità (obsoleto, utilizza Blocklist)","root_availability_blocklist__description":"Impedisci la verifica della disponibilità dei dispositivi","root_availability_blocklist__title":"Blocklist disponibilità","root_availability_passlist__description":"Abilita il controllo della disponibilità solo per alcuni dispositivi","root_availability_passlist__title":"Passlist disponibilità","root_availability_whitelist__title":"Whitelist disponibilità (obsoleto, usa Passlist)","root_debounce_ignore__description":"Proteggi i valori specifiche proprietà di payload contro l\'override con un tempo di antirimbalzo","root_debounce_ignore__title":"Ignora antirimbalzo","root_ext_pan_id__description":"Zigbee Extended Pan ID, la modifica richiede il repairing di tutti i dispositivi!","root_ext_pan_id__title":"Ext Pan ID","root_filtered_attributes__description":"Consenti di impedire la pubblicazione di determinati attributi","root_filtered_attributes__title":"Attributi filtrati","root_filtered_optimistic__description":"Filtra gli attributi dal payload di pubblicazione ottimistica quando si interroga/imposta (Questo non ha effetto se l\'ottimistico è impostato su falso).","root_filtered_optimistic__title":"Attributi ottimistici filtrati","root_log_output__description":"Posizione di output del registro, lasciare vuoto per fermare la registrazione","root_log_output__title":"Output log","root_log_syslog-title":"syslog","serial-title":"Seriale"},"touchlink":{"detected_devices_message":"Ricerca {{count}} dispositivi touchlink.","rescan":"Ricerca ancora","scan":"Ricerca"},"values":{"clear":"Libero","closed":"Chiuso","false":"Falso","not_supported":"Non supportato","occupied":"Occupato","open":"Aperto","supported":"Supportato","true":"Vero","empty_string":"Stringa vuota (\\"\\")","leaking":"Perdita","tampered":"Manomesso"},"zigbee":{"actions":"Azioni","attribute":"Attributi","block_join":"Blocca la riassociazione","cluster":"Cluster","description":"Descrizione","device_type":"Tipo dispositivo","endpoint":"Endpoint","firmware_build_date":"Data creazione firmware","firmware_version":"Versione firmware","force_remove":"Rimozione forzata","friendly_name":"Nome","ieee_address":"Indirizzo IEEE","input_clusters":"Cluster ingresso","interview_completed":"Interrogazione completata","last_seen":"Ultima connessione","lqi":"LQI","manufacturer":"Produttore","max_rep_interval":"Intervallo max rep","min_rep_change":"cambio min rep","min_rep_interval":"Intervallo min rep","model":"Modello","network_address":"Indirizzo di rete","none":"Nessuno","output_clusters":"Cluster di uscita","pic":"Immagine","power":"Potenza","reconfigure":"Riconfigura","remove_device":"Rimuovi dispositivo","rename_device":"Rinomina dispositivo","select_attribute":"Seleziona attributo","select_cluster":"Seleziona cluster","support_status":"Stato supporto","unsupported":"Non supportato","update_Home_assistant_entity_id":"Aggiorna entity_id di Home Assistant","zigbee_manufacturer":"Produttore Zigbee","zigbee_model":"Modello Zigbee"}}');
;// CONCATENATED MODULE: ./src/i18n/locales/zh.json
const zh_namespaceObject = JSON.parse('{"common":{"action":"動作","actions":"動作","apply":"套用","attribute":"屬性","bind":"綁定","check_all":"檢查全部","clear":"清除","close":"關閉","cluster":"叢集","clusters":"叢集","confirmation":"確定","delete":"刪除","destination":"目的地","devices":"裝置","dialog_confirmation_prompt":"是否確定？","disable":"停用","enter_search_criteria":"輸入搜尋關鍵字","groups":"群組","loading":"載入中","none":"無","ok":"確定","read":"讀取","save":"儲存","select_device":"選擇裝置","select_endpoint":"選擇端點","source_endpoint":"源端點","the_only_endpoint":"唯一端點","unbind":"解綁","write":"寫入"},"devicePage":{"about":"關於","bind":"綁定","clusters":"叢集","dev_console":"開發控制台","exposes":"資料","reporting":"報告","settings":"設定","settings_specific":"設定(具體)","state":"狀態","unknown_device":"未知裝置","scene":"場景"},"exposes":{"action":"動作","auto_off":"自動關閉","away_mode":"離開模式","backlight_mode":"背光模式","battery":"電量","battery_low":"低電量","brightness":"亮度","calibration":"校準","carbon_monoxide":"一氧化碳","co2":"二氧化碳","color_hs":"顏色(HS)","color_temp":"色溫","color_temp_startup":"啟動色溫","color_xy":"颜色(XY)","comfort_temperature":"舒適溫度","contact":"門窗","current":"電流","current_heating_setpoint":"目前加熱設定溫度","eco_temperature":"節能溫度","effect":"效果","energy":"能源","force":"力量","humidity":"濕度","illuminance":"光照度","illuminance_lux":"光照度","linkquality":"連接質量","local_temperature":"本地溫度","local_temperature_calibration":"本地溫度校準","max_temperature":"最高溫度","min_temperature":"最低溫度","motor_reversal":"馬達反轉","moving":"移動","occupancy":"有人","operation_mode":"運作模式","options":"設定","position":"位置","power":"電源","power_on_behavior":"啟動時預設電源行為","power_outage_memory":"復電時回復停電前狀態","preset":"預設","pressure":"氣壓","sensivity":"敏感度","smoke":"煙霧","state":"狀態","strength":"強度","system_mode":"系統模式","tamper":"Tamper","temperature":"溫度","voltage":"電壓","water_leak":"漏水","week":"週"},"extensions":{"create_new_extension":"建立新擴充","extension_name_propmt":"輸入新擴充的名稱","select_extension_to_edit":"選擇擴充以編輯"},"featureNames":{"action":"動作","angle_x":"角度 X","angle_y":"角度 Y","angle_z":"角度 Z","brightness":"亮度","color_temp":"色溫","color_xy":"顏色(XY)","contact":"門窗","humidity":"濕度","illuminance":"光照度","occupancy":"有人","pressure":"氣壓","soil_moisture":"土壤濕度","state":"狀態","temperature":"溫度","co2":"二氧化碳","tamper":"Tamper"},"featureDescriptions":{"On/off state of the switch":"開關的狀態","Controls the behaviour when the device is powered on":"裝置通電時的預設狀態","Link quality (signal strength)":"連接品質 (訊號強度)","Instantaneous measured power":"即時耗電瓦數","Decoupled mode for left button":"左鍵的解耦模式(將按鍵與繼電器分離)","Decoupled mode for center button":"中鍵的解耦模式(將按鍵與繼電器分離)","Decoupled mode for right button":"右鍵的解耦模式(將按鍵與繼電器分離)","Remaining battery in %":"剩餘電量的百分比","Indicates whether the device detected occupancy":"是否偵測到有運動","Measured temperature value":"測量到的溫度","Voltage of the battery in millivolts":"測量到的電壓(單位為mV)","Measured illuminance in lux":"測量到的光照度(單位為lux)"},"groups":{"add_to_group":"新增到群組","create_group":"建立群組","new_group_id":"新群組 ID","new_group_id_placeholder":"群組ID(選填)","new_group_name":"新群組名稱","new_group_name_placeholder":"例：我的臥室燈","remove_group":"移除群組"},"logs":{"empty_logs_message":"無日誌","filter_by_text":"按文字過濾","show_only":"只顯示"},"map":{"help_coordinator_link_description":"實線表示連接到協調器","help_end_device_description":"綠色為終端裝置","help_is_coordinator":"為協調器","help_lqi_description":"連接品質(越高越好)，具有/表示有多重連接","help_router_description":"藍色為路由節點","help_router_links_description":"虛線表示連接到路由節點","hide":"點我隱藏說明","load":"載入網路拓樸圖","loading":"根據你的網路規模，這可能需要十秒到兩分鐘的時間。"},"navbar":{"all":"全部","dashboard":"總覽","devices":"裝置","disable_join":"停用新裝置配對","extensions":"擴充","groups":"群組","logs":"日誌","map":"網路圖","ota":"OTA","permit_join":"允許裝置加入","restart":"重啟","settings":"設定","toggle_dropdown":"切換下拉選單","touchlink":"Touchlink"},"ota":{"check":"檢查更新","check_all":"檢查全部更新","empty_ota_message":"你沒有支援OTA更新的裝置","remaining_time":"剩餘時間 {{- remaining}}","update":"更新裝置韌體"},"settings":{"about":"關於","advanced":"進階","blocklist":"封鎖裝置列表","coordinator_revision":"協調器版本","coordinator_type":"協調器類型","donate":"贊助","donation_text":["Hello, %username%, here you can thank us for hardworking","Don\'t hesitate to say something nice as well ;)"],"download_state":"下載狀態","experimental":"實驗性功能","external_converters":"外部轉換器","frontend":"前端","frontend_version":"前端版本","main":"基礎","mqtt":"MQTT","ota":"OTA 更新","passlist":"允許裝置列表","raw":"RAW","restart_zigbee2mqtt":"重啟 Zigbee2MQTT","serial":"串列通訊","settings":"設定","tools":"工具","zigbee2mqtt_version":"Zigbee2MQTT 版本","translate":"翻譯","homeassistant":"Home Assistant 整合","permit_join":"允許裝置加入"},"settingsSchemaTranslations":{"advanced-title":"進階","advanced_availability_blacklist__title":"可用性黑名單 (已棄用, 請使用 availability_blocklist)","advanced_availability_blocklist__description":"停用列表中裝置的可用性檢查","advanced_availability_blocklist__title":"可用性阻止名單","advanced_availability_passlist__description":"只對列表中裝置進行可用性檢查","advanced_availability_passlist__title":"可用性檢查清單","advanced_availability_whitelist__title":"可用性白名單 (已棄用, 請使用 passlist)","advanced_ext_pan_id__description":"Zigbee 網路擴充ID, 變更此項將需要重新配對全部裝置！","advanced_ext_pan_id__title":"網路擴充ID","advanced_log_output__description":"日誌的輸出位置，留空將停用日誌紀錄","advanced_log_output__title":"日誌輸出","advanced_log_syslog-title":"系統日誌","blocklist__description":"從網路中封鎖裝置(根據 ieeeAddr)","blocklist__title":"封鎖裝置清單","experimental-title":"實驗性功能","external_converters__description":"你可以在此定義外部轉換器，例如增加對DIY裝置的支援。","external_converters__title":"外部轉換器","frontend-title":"前端","mqtt-title":"MQTT","ota-title":"OTA 更新","passlist__description":"只允許特定裝置加入網路(根據 ieeeAddr)。 請注意，所有不在此請單中的裝置都將從網路中移除！","passlist__title":"允許裝置清單","serial-title":"串列通訊"},"touchlink":{"detected_devices_message":"檢測到{{count}}個touchlink裝置","rescan":"再次掃描","scan":"掃描"},"values":{"clear":"無人","closed":"關閉","false":"否","not_supported":"不支援","occupied":"有人","open":"開啟","supported":"支援","true":"是","empty_string":"空字串(\\"\\")","leaking":"洩漏","tampered":"Tampered"},"zigbee":{"actions":"動作","attribute":"屬性","block_join":"防止再次加入","cluster":"叢集","description":"描述","device":"裝置","device_type":"裝置類型","endpoint":"端點","firmware_build_date":"韌體編譯時間","firmware_version":"韌體版本","force_remove":"強制刪除","friendly_name":"暱稱","ieee_address":"IEEE 地址","input_clusters":"輸入叢集","interview_completed":"配對成功","last_seen":"最後出現","lqi":"連線品質(LQI)","manufacturer":"製造商","max_rep_interval":"最大回報間隔","min_rep_change":"修改最小回報間隔","min_rep_interval":"最小回報間隔","model":"型號","network_address":"網路地址","none":"無","output_clusters":"輸出叢集","pic":"圖片","power":"電源類型","reconfigure":"重新設置裝置","remove_device":"移除裝置","rename_device":"重新命名裝置","select_attribute":"選擇屬性","select_cluster":"選擇叢集","support_status":"受支援狀態","unsupported":"不支援","update_Home_assistant_entity_id":"更新 Home Assistant 實體 ID","zigbee_manufacturer":"Zigbee 製造商","zigbee_model":"Zigbee 型號"},"scene":{"scene_id":"場景ID","store":"儲存","recall":"Recall","remove":"移除","remove_all":"移除全部"}}');
;// CONCATENATED MODULE: ./src/i18n/locales/ko.json
const ko_namespaceObject = JSON.parse('{"common":{"action":"액션","actions":"액션","apply":"적용","attribute":"속성","bind":"Bind","check_all":"전체 확인","clear":"초기화","close":"닫기","cluster":"클러스터","clusters":"클러스터","confirmation":"명령 확인","delete":"삭제","destination":"Destination","devices":"장치","dialog_confirmation_prompt":"실행할까요?","disable":"해제","enter_search_criteria":"Enter search criteria","groups":"그룹","loading":"Loading...","none":"None","ok":"확인","read":"읽기","save":"저장","select_device":"장치 선택","select_endpoint":"endpoint 선택","source_endpoint":"Source endpoint","the_only_endpoint":"The only endpoint","unbind":"Unbind","write":"쓰기"},"devicePage":{"about":"자세히","bind":"Bind","clusters":"클러스터","dev_console":"Dev console","exposes":"Exposes","reporting":"보고","settings":"설정","settings_specific":"설정 (specific)","state":"상태","unknown_device":"알 수 없는 장치"},"exposes":{"action":"액션","auto_off":"Auto off","away_mode":"외출 모드","away_preset_days":"Away preset days","away_preset_temperature":"Away preset temperature","backlight_mode":"Backlight mode","battery":"배터리","battery_low":"저전압 배터리","boost_time":"Boost time","brightness":"밝기","calibration":"캘리브레이션","carbon_monoxide":"일산화탄소","color_hs":"Color (HS)","color_temp":"색 온도","color_temp_startup":"Startup color temp","color_xy":"Color (XY)","comfort_temperature":"편안한 온도","consumer_connected":"Consumer connected","consumer_overload":"Consumer overload","contact":"접촉","current":"전류","current_heating_setpoint":"Current heating setpoint","eco_temperature":"Eco temperature","effect":"Effect","empty_exposes_definition":"Empty exposes definition","energy":"에너지","force":"Force","humidity":"습도","illuminance":"조도","illuminance_lux":"조도_lux","led_disabled_night":"Led disabled night","linkquality":"Linkquality","local_temperature":"Local 온도","local_temperature_calibration":"Local 온도 보정","max_temperature":"최대 온도","min_temperature":"최저 온도","motor_reversal":"역방향 모터회전","moving":"움직임","occupancy":"감지","operation_mode":"동작 모드","options":"옵션","position":"위치","power":"전원","power_on_behavior":"Power on behavior","power_outage_memory":"Power outage memory","preset":"프리셋","pressure":"압력","sensivity":"감도","smoke":"연기","state":"상태","strength":"강도","system_mode":"시스템 모드","tamper":"분리 감지","temperature":"온도","voltage":"전압","water_leak":"누수","week":"주","device_temperature":"장치 온도"},"extensions":{"create_new_extension":"새 익스텐션 만들기","extension_name_propmt":"새 익스텐션 이름 입력","select_extension_to_edit":"바꿀 익스텐션 선택"},"featureNames":{"action":"액션","angle_x":"X 각도","angle_y":"Y 각도","angle_z":"Z 각도","brightness":"밝기","color_temp":"색 온도","color_xy":"Color Xy","contact":"접촉","humidity":"습도","illuminance":"밝기","occupancy":"감지","options":"옵션","position":"위치","pressure":"압력","soil_moisture":"토양 습도","smoke":"연기","state":"상태","temperature":"온도","tamper":"분리 감지","device_temperature":"장치 온도"},"groups":{"add_to_group":"그룹 추가","create_group":"그룹 생성","new_group_id":"새 그룹 아이디","new_group_id_placeholder":"특별 그룹 ID (옵션)","new_group_name":"새 그룹 이름","new_group_name_placeholder":"예: my_bedroom_lights","remove_group":"그룹 삭제"},"logs":{"empty_logs_message":"Nothing to display","filter_by_text":"Filter by text","show_only":"Show only"},"map":{"help_coordinator_link_description":"실선 : Coordinator와 연결","help_end_device_description":"녹색 : End Device","help_is_coordinator":"is Coordinator","help_lqi_description":"Link quality 값은 0~255 (높을수록 좋음), 여러 유형의 링크를 나타냅니다.","help_router_description":"파랑 : Router","help_router_links_description":"점선 : Routes와 연결","hide":"숨기기","load":"맵 보기","loading":"네트워크 크기에 따라 다르며 10초~2분정도 소요됩니다."},"navbar":{"all":"전체","dashboard":"대쉬 보드","devices":"장치","disable_join":"페어링 오프","extensions":"익스텐션","groups":"그룹","logs":"로그","map":"지도","ota":"OTA","permit_join":"페어링 온","restart":"재시작","settings":"설정","toggle_dropdown":"Toggle dropdown","touchlink":"터치링크"},"ota":{"check":"업데이트 확인 중","check_all":"전체 업데이트 확인","empty_ota_message":"OTA 지원장치가 없습니다.","remaining_time":"남은 시간 {{- remaining}}","update":"장치 펌웨어 업데이트"},"settings":{"about":"자세히","advanced":"고급","blocklist":"차단 리스트","coordinator_revision":"Coordinator revision","coordinator_type":"Coordinator type","donate":"기부","donation_text":["Hello, %username%, here you can thank us for hardworking","Don\'t hesitate to say something nice as well ;)"],"download_state":"다운로드 상태","experimental":"Experimental","external_converters":"외부 컨버터","frontend":"Frontend","frontend_version":"Frontend 버전","main":"Main","mqtt":"MQTT","ota":"OTA 업데이트","passlist":"Passlist","raw":"Raw","restart_zigbee2mqtt":"재시작 Zigbee2MQTT","serial":"Serial","settings":"설정","tools":"도구","zigbee2mqtt_version":"Zigbee2MQTT 버전","translate":"번역"},"settingsSchemaTranslations":{"advanced-title":"Advanced","advanced_availability_blacklist__title":"Availability blacklist (deprecated, use availability_blocklist)","advanced_availability_blocklist__description":"Prevent devices from being checked for availability","advanced_availability_blocklist__title":"Availability Blocklist","advanced_availability_passlist__description":"Only enable availability check for certain devices","advanced_availability_passlist__title":"Availability passlist","advanced_availability_whitelist__title":"Availability whitelist (deprecated, use passlist)","advanced_ext_pan_id__description":"Zigbee extended pan ID, changing requires repairing all devices!","advanced_ext_pan_id__title":"Ext Pan ID","advanced_log_output__description":"Output location of the log, leave empty to supress logging","advanced_log_output__title":"Log output","advanced_log_syslog-title":"syslog","blocklist__description":"Block devices from the network (by ieeeAddr)","blocklist__title":"Blocklist","experimental-title":"Experimental","external_converters__description":"You can define external converters to e.g. add support for a DiY device","external_converters__title":"External converters","frontend-title":"Frontend","mqtt-title":"MQTT","ota-title":"OTA updates","passlist__description":"Allow only certain devices to join the network (by ieeeAddr). Note that all devices not on the passlist will be removed from the network!","passlist__title":"Passlist","root__description":"Allow only certain devices to join the network (by ieeeAddr). Note that all devices not on the passlist will be removed from the network!","root_availability_blacklist__title":"Availability blacklist (deprecated, use availability_blocklist)","root_availability_blocklist__description":"Prevent devices from being checked for availability","root_availability_blocklist__title":"Availability Blocklist","root_availability_passlist__description":"Only enable availability check for certain devices","root_availability_passlist__title":"Availability passlist","root_availability_whitelist__title":"Availability whitelist (deprecated, use passlist)","root_debounce_ignore__description":"Protects unique payload values of specified payload properties from overriding within debounce time","root_debounce_ignore__title":"Ignore debounce","root_ext_pan_id__description":"Zigbee extended pan ID, changing requires repairing all devices!","root_ext_pan_id__title":"Ext Pan ID","root_filtered_attributes__description":"Allows to prevent certain attributes from being published","root_filtered_attributes__title":"Filtered attributes","root_filtered_optimistic__description":"Filter attributes from optimistic publish payload when calling /set. (This has no effect if optimistic is set to false).","root_filtered_optimistic__title":"Filtered optimistic attributes","root_log_output__description":"Output location of the log, leave empty to supress logging","root_log_output__title":"Log output","root_log_syslog-title":"syslog","serial-title":"Serial"},"touchlink":{"detected_devices_message":"Detected {{count}} touchlink devices.","rescan":"재 탐색","scan":"탐색"},"values":{"clear":"정상","closed":"닫힘","false":"False","not_supported":"지원하지 않음","occupied":"Occupied","open":"열림","supported":"지원됨","true":"True","empty_string":"Empty string(\\"\\")","leaking":"누수","tampered":"분리 감지"},"zigbee":{"actions":"액션","attribute":"속성","block_join":"Block from joining again","cluster":"클러스터","description":"설명","device_type":"장치 종류","endpoint":"Endpoint","firmware_build_date":"펌웨어 제작일","firmware_version":"펌웨어 버전","force_remove":"강제 삭제","friendly_name":"Friendly name","ieee_address":"IEEE Address","input_clusters":"입력 클러스터","interview_completed":"인터뷰 성공","last_seen":"Last seen","lqi":"LQI","manufacturer":"제조사","max_rep_interval":"최대 보고 주기","min_rep_change":"최소 보고 변화값","min_rep_interval":"최소 보고 주기","model":"모델명","network_address":"네트워크 주소","none":"None","output_clusters":"출력 클러스터","pic":"사진","power":"파워","reconfigure":"재설정","remove_device":"장치 삭제","rename_device":"장치 이름 변경","select_attribute":"속성 선택","select_cluster":"클러스터 선택","support_status":"지원 상태","unsupported":"지원하지 않음","update_Home_assistant_entity_id":"Home Assistant entity ID 업데이트","zigbee_manufacturer":"Zigbee 제조사","zigbee_model":"Zigbee 모델명"}}');
// EXTERNAL MODULE: ./node_modules/timeago.js/lib/lang/pl.js
var lang_pl = __webpack_require__(6854);
// EXTERNAL MODULE: ./node_modules/timeago.js/lib/lang/fr.js
var lang_fr = __webpack_require__(4056);
// EXTERNAL MODULE: ./node_modules/timeago.js/lib/lang/de.js
var lang_de = __webpack_require__(1643);
// EXTERNAL MODULE: ./node_modules/timeago.js/lib/lang/ru.js
var lang_ru = __webpack_require__(8592);
// EXTERNAL MODULE: ./node_modules/timeago.js/lib/lang/pt_BR.js
var pt_BR = __webpack_require__(9404);
// EXTERNAL MODULE: ./node_modules/timeago.js/lib/lang/es.js
var lang_es = __webpack_require__(9936);
// EXTERNAL MODULE: ./node_modules/timeago.js/lib/lang/uk.js
var uk = __webpack_require__(4739);
// EXTERNAL MODULE: ./node_modules/timeago.js/lib/lang/zh_CN.js
var zh_CN = __webpack_require__(2860);
// EXTERNAL MODULE: ./node_modules/timeago.js/lib/lang/nl.js
var lang_nl = __webpack_require__(2357);
// EXTERNAL MODULE: ./node_modules/timeago.js/lib/lang/it.js
var lang_it = __webpack_require__(643);
// EXTERNAL MODULE: ./node_modules/timeago.js/lib/lang/zh_TW.js
var zh_TW = __webpack_require__(1980);
// EXTERNAL MODULE: ./node_modules/timeago.js/lib/lang/ko.js
var ko = __webpack_require__(2392);
;// CONCATENATED MODULE: ./src/i18n/index.ts































(0,esm/* register */.z2)("pl", lang_pl/* default */.Z);
(0,esm/* register */.z2)("fr", lang_fr/* default */.Z);
(0,esm/* register */.z2)("de", lang_de/* default */.Z);
(0,esm/* register */.z2)("ru", lang_ru/* default */.Z);
(0,esm/* register */.z2)("ptbr", pt_BR/* default */.Z);
(0,esm/* register */.z2)("es", lang_es/* default */.Z);
(0,esm/* register */.z2)("ua", uk/* default */.Z);
(0,esm/* register */.z2)("chs", zh_CN/* default */.Z);
(0,esm/* register */.z2)("nl", lang_nl/* default */.Z);
(0,esm/* register */.z2)("it", lang_it/* default */.Z);
(0,esm/* register */.z2)("ko", ko/* default */.Z);
(0,esm/* register */.z2)("zh", zh_TW/* default */.Z);
const resources = {
    en: en_namespaceObject,
    fr: locales_fr_namespaceObject,
    pl: locales_pl_namespaceObject,
    de: locales_de_namespaceObject,
    ru: locales_ru_namespaceObject,
    ptbr: locales_ptbr_namespaceObject,
    es: locales_es_namespaceObject,
    ua: locales_ua_namespaceObject,
    chs: chs_namespaceObject,
    nl: locales_nl_namespaceObject,
    it: locales_it_namespaceObject,
    zh: zh_namespaceObject,
    ko: ko_namespaceObject,
};
window.missing = {};
const blacklistedNamespaces = ['localeNames'];
const missingKeyHandler = (lngs, ns, key, fallbackValue) => {
    if (!blacklistedNamespaces.includes(ns)) {
        set_default()(window.missing, [ns, key], fallbackValue);
        src_store.setState({ missingTranslations: window.missing });
    }
};
const debug = "production" !== 'production';
i18next/* default.use */.Z.use(i18nextBrowserLanguageDetector/* default */.Z)
    .use(context/* initReactI18next */.Db)
    .init({
    debug,
    resources,
    ns: Object.keys(en_namespaceObject),
    saveMissing: true,
    missingKeyHandler
});
const currentLanguage = i18next/* default.language.split */.Z.language.split('-')[0].toLocaleLowerCase();
if (!resources[currentLanguage]) {
    i18next/* default.changeLanguage */.Z.changeLanguage('en');
}
/* harmony default export */ const i18n = (i18next/* default */.Z);

// EXTERNAL MODULE: ./node_modules/react-i18next/dist/es/I18nextProvider.js
var I18nextProvider = __webpack_require__(6339);
;// CONCATENATED MODULE: ./src/index.tsx


























const ConnectedDevicePageWrap = ({ dev }) => (React.createElement(ConnectedDevicePageWrap, { dev: dev }));
const themes = {
    light: './css/light.css',
    dark: './css/dark.css',
};
src_api.connect();
const Main = () => {
    const { theme } = src_store.getState();
    return react.createElement(react.Suspense, { fallback: "loading" },
        react.createElement(I18nextProvider/* I18nextProvider */.a, { i18n: i18n },
            react.createElement(unistore_react/* Provider */.z, { store: src_store },
                react.createElement(react_css_theme_switcher_esm/* ThemeSwitcherProvider */.c, { themeMap: themes, defaultTheme: theme },
                    react.createElement(react_router_dom/* HashRouter */.UT, null,
                        react.createElement(state_notifier_StateNotifier, null),
                        react.createElement("div", { className: "main" },
                            react.createElement(navbar, null),
                            react.createElement("main", { className: "content p-0 p-sm-3" },
                                react.createElement("div", { className: "container-fluid p-0 h-100" },
                                    react.createElement(react_router/* Switch */.rs, null,
                                        react.createElement(react_router/* Route */.AW, { path: "/ota", render: (props) => react.createElement(ErrorBoundary, { ...props },
                                                react.createElement(ota_page, null)) }),
                                        react.createElement(react_router/* Route */.AW, { path: "/map", render: (props) => react.createElement(ErrorBoundary, { ...props },
                                                react.createElement(components_map, null)) }),
                                        react.createElement(react_router/* Route */.AW, { path: "/device/:dev/:tab?", render: (props) => react.createElement(ErrorBoundary, { ...props },
                                                react.createElement(device_page, null)) }),
                                        react.createElement(react_router/* Route */.AW, { path: "/settings/:tab?", render: (props) => react.createElement(ErrorBoundary, { ...props },
                                                react.createElement(settings, null)) }),
                                        react.createElement(react_router/* Route */.AW, { path: "/groups", render: (props) => react.createElement(ErrorBoundary, { ...props },
                                                react.createElement(groups, null)) }),
                                        react.createElement(react_router/* Route */.AW, { path: "/group/:groupId?", render: (props) => react.createElement(ErrorBoundary, { ...props },
                                                react.createElement(groups_GroupPage, null)) }),
                                        react.createElement(react_router/* Route */.AW, { path: "/logs", render: (props) => react.createElement(ErrorBoundary, { ...props },
                                                react.createElement(logs_page, null)) }),
                                        react.createElement(react_router/* Route */.AW, { path: "/touchlink", render: (props) => react.createElement(ErrorBoundary, { ...props },
                                                react.createElement(touchlink_page, null)) }),
                                        react.createElement(react_router/* Route */.AW, { path: "/dashboard", render: (props) => react.createElement(ErrorBoundary, { ...props },
                                                react.createElement(dashboard_page, null)) }),
                                        react.createElement(react_router/* Route */.AW, { path: "/extensions", render: (props) => react.createElement(ErrorBoundary, { ...props },
                                                react.createElement(extensions_editor, null)) }),
                                        react.createElement(react_router/* Route */.AW, { path: "/", render: (props) => react.createElement(ErrorBoundary, { ...props },
                                                react.createElement(zigbee, null)) }))))))))));
};
react_dom.render(react.createElement(Main, null), document.getElementById("root"));


/***/ }),

/***/ 634:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "55cd21f70dc38c74e89a.png";

/***/ }),

/***/ 8234:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "bdac95fb9b6e1011ff13.png";

/***/ }),

/***/ 8393:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "f089fd97c4f748dc240d.png";

/***/ }),

/***/ 8522:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "36baafd4913c34b7621d.png";

/***/ }),

/***/ 33:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "a31ec91840f0acdb1d8a.png";

/***/ }),

/***/ 3686:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "8e639677ed26c0e699f2.png";

/***/ }),

/***/ 3876:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "f7ecf664781426f41f86.png";

/***/ }),

/***/ 7358:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "89a867bd81edd3b2fbc6.png";

/***/ }),

/***/ 250:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "3390a8dee1465fe91612.png";

/***/ }),

/***/ 3510:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "0f8f97805c32ff22bc14.png";

/***/ }),

/***/ 9817:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "b4fe9b31254ddc033cfc.png";

/***/ }),

/***/ 7822:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "ce224eab53916fb54e7d.png";

/***/ }),

/***/ 9774:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "39be67ed85bc170560c4.png";

/***/ }),

/***/ 1639:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "687e896db1804112e546.png";

/***/ }),

/***/ 9394:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "d921749ee5fe6bc67e4c.png";

/***/ }),

/***/ 2796:
/***/ ((module) => {

module.exports = "class MyExampleExtension_TS_ {\n    constructor(zigbee, mqtt, state, publishEntityState, eventBus, settings, logger) {\n        logger.info('Loaded  MyExampleExtension_TS_');\n        mqtt.publish('example/extension', 'hello from MyExampleExtension_TS_');\n        this.mqttBaseTopic = settings.get().mqtt.base_topic;\n        this.eventBus = eventBus;\n        this.mqtt = mqtt;\n        this.eventBus.on('stateChange', this.onStateChange.bind(this), this.constructor.name);\n    }\n\n    async onStateChange(data) {\n        console.log(\"State changed\", data); // comment this out if clutters logs\n        \n        const { ID, update } = data;\n        \n        \n        //example how to toggle state\n        if (ID === '0x00158d000224154d') { //state changed for some device (example: clicked a button)\n            if (update.action === 'single') {\n                const myLampIeeAddr = '0x00124b001e73227f'; // change this\n                this.mqtt.onMessage(`${this.mqttBaseTopic}/${myLampIeeAddr}/set`, JSON.stringify({state: 'toggle'}));\n            }\n        }\n    }\n\n    async onMQTTMessage(topic, message) {\n        // console.log({topic, message});\n    }\n\n    async stop() {\n        this.eventBus.removeListenersExtension(this.constructor.name);\n    }\n}\n\nmodule.exports = MyExampleExtension_TS_;\n";

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, [718], () => (__webpack_exec__(7225)));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=main.90518dbdda1ba18108b9.js.map