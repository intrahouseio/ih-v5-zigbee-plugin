"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.definitions = void 0;
const fz = __importStar(require("../converters/fromZigbee"));
const tz = __importStar(require("../converters/toZigbee"));
const exposes = __importStar(require("../lib/exposes"));
const m = __importStar(require("../lib/modernExtend"));
const reporting = __importStar(require("../lib/reporting"));
const e = exposes.presets;
exports.definitions = [
    {
        zigbeeModel: ["GWA1201_TWO_WAY_SWITCH"],
        model: "GWA1201_TWO_WAY_SWITCH",
        vendor: "Gewiss",
        description: "GWA1201",
        extend: [m.onOff(), m.electricityMeter(), m.identify()],
        ota: true,
    },
    {
        zigbeeModel: ["GWA1521_Actuator_1_CH_PF"],
        model: "GWA1521",
        description: "Switch actuator 1 channel with input",
        vendor: "Gewiss",
        extend: [m.onOff()],
    },
    {
        zigbeeModel: ["GWA1522_Actuator_2_CH"],
        model: "GWA1522",
        description: "Switch actuator 2 channels with input",
        vendor: "Gewiss",
        extend: [m.deviceEndpoints({ endpoints: { l1: 1, l2: 2 } }), m.onOff({ endpointNames: ["l1", "l2"] })],
    },
    {
        zigbeeModel: ["GWA1531_Shutter"],
        model: "GWA1531",
        description: "Shutter actuator",
        vendor: "Gewiss",
        fromZigbee: [fz.cover_position_tilt, fz.ignore_basic_report],
        toZigbee: [tz.cover_state, tz.cover_position_tilt],
        meta: { coverInverted: true },
        configure: async (device, coordinatorEndpoint) => {
            const endpoint = device.getEndpoint(1);
            await reporting.bind(endpoint, coordinatorEndpoint, ["closuresWindowCovering"]);
            await reporting.currentPositionLiftPercentage(endpoint);
        },
        exposes: [e.cover_position()],
    },
    {
        zigbeeModel: ["GWA1502_BinaryInput230V"],
        model: "GWA1502",
        vendor: "Gewiss",
        description: "Contact interface - 2 channels - 230V",
        meta: { multiEndpoint: true },
        extend: [
            m.deviceEndpoints({ endpoints: { "1": 1, "2": 2 } }),
            m.binary({
                name: "input",
                cluster: "genBinaryInput",
                attribute: "presentValue",
                reporting: { attribute: "presentValue", min: "MIN", max: "1_HOUR", change: 1 },
                valueOn: ["ON", 1],
                valueOff: ["OFF", 0],
                description: "State of input I1",
                access: "STATE_GET",
                endpointName: "1",
            }),
            m.binary({
                name: "input",
                cluster: "genBinaryInput",
                attribute: "presentValue",
                reporting: { attribute: "presentValue", min: "MIN", max: "1_HOUR", change: 1 },
                valueOn: ["ON", 1],
                valueOff: ["OFF", 0],
                description: "State of input I2",
                access: "STATE_GET",
                endpointName: "2",
            }),
        ],
    },
    {
        zigbeeModel: ["GWA1501_BinaryInput_FC"],
        model: "GWA1501",
        vendor: "Gewiss",
        description: "Contact interface - 2 channels",
        meta: { multiEndpoint: true },
        extend: [
            m.deviceEndpoints({ endpoints: { "1": 1, "2": 2 } }),
            m.battery(),
            m.binary({
                name: "input",
                cluster: "genBinaryInput",
                attribute: "presentValue",
                reporting: { attribute: "presentValue", min: "MIN", max: "MAX", change: 1 },
                valueOn: ["ON", 1],
                valueOff: ["OFF", 0],
                description: "State of input I1",
                access: "STATE_GET",
                endpointName: "1",
            }),
            m.binary({
                name: "input",
                cluster: "genBinaryInput",
                attribute: "presentValue",
                reporting: { attribute: "presentValue", min: "MIN", max: "MAX", change: 1 },
                valueOn: ["ON", 1],
                valueOff: ["OFF", 0],
                description: "State of input I2",
                access: "STATE_GET",
                endpointName: "2",
            }),
        ],
    },
];
//# sourceMappingURL=gewiss.js.map