"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.definitions = void 0;
const fz = __importStar(require("../converters/fromZigbee"));
const exposes = __importStar(require("../lib/exposes"));
const m = __importStar(require("../lib/modernExtend"));
const reporting = __importStar(require("../lib/reporting"));
const e = exposes.presets;
exports.definitions = [
    {
        zigbeeModel: ["DimmerSwitch-2Gang-ZB3.0"],
        model: "D086-ZG",
        vendor: "HZC Electric",
        description: "Zigbee dual dimmer",
        extend: [m.deviceEndpoints({ endpoints: { l1: 1, l2: 2 } }), m.light({ endpointNames: ["l1", "l2"], configureReporting: true })],
    },
    {
        zigbeeModel: ["TempAndHumSensor-ZB3.0"],
        model: "S093TH-ZG",
        vendor: "HZC Electric",
        description: "Temperature and humidity sensor",
        fromZigbee: [fz.temperature, fz.humidity, fz.linkquality_from_basic],
        toZigbee: [],
        exposes: [e.temperature(), e.humidity()], // Unfortunately, battery percentage is not reported by this device
    },
    {
        zigbeeModel: ["WaterLeakageSensor-ZB3.0"],
        model: "S900W-ZG",
        vendor: "HZC Electric",
        description: "Water leak sensor",
        fromZigbee: [fz.ias_water_leak_alarm_1, fz.battery],
        toZigbee: [],
        exposes: [e.water_leak(), e.battery_low(), e.battery()],
        configure: async (device, coordinatorEndpoint) => {
            const endpoint = device.getEndpoint(1);
            await reporting.bind(endpoint, coordinatorEndpoint, ["genPowerCfg"]);
            await reporting.batteryPercentageRemaining(endpoint);
        },
    },
    {
        zigbeeModel: ["HZC Electric motion sensor"],
        model: "S902M-ZG",
        vendor: "HZC Electric",
        description: "Motion sensor",
        fromZigbee: [fz.ias_occupancy_alarm_1, fz.battery],
        toZigbee: [],
        exposes: [e.occupancy(), e.battery_low(), e.battery(), e.tamper()],
        extend: [m.illuminance()],
    },
    {
        fingerprint: [{ type: "Router", manufacturerName: "Shyugj", modelID: "Dimmer-Switch-ZB3.0" }],
        model: "D077-ZG",
        vendor: "HZC Electric",
        description: "Zigbee dimmer",
        extend: [m.light({ configureReporting: true })],
    },
    {
        zigbeeModel: ["Meter-Dimmer-Switch-ZB3.0"],
        model: "D692-ZG",
        vendor: "HZC Electric",
        description: "Rotary dimmer with screen",
        extend: [
            m.light({ effect: false, configureReporting: true, powerOnBehavior: false }),
            m.electricityMeter({ voltage: false, current: false, configureReporting: true }),
        ],
        meta: {},
    },
];
//# sourceMappingURL=hzc_electric.js.map